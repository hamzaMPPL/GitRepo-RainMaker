//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RainMaker.BSS_Service {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BSS_Service.Service1Soap")]
    public interface Service1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VSInventoryAllocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool VSInventoryAllocation(int SignupID, int SeriesID, int DiDRangeCount, int StartRange, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VSInventoryVerification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable VSInventoryVerification(int SeriesID, int DiDRangeCount, int StartRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateFLLDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateFLLDeployment(
                    int ID, 
                    int SignupID, 
                    int ProductDetailsID, 
                    int ProductTypeID, 
                    string ChannelQuantity, 
                    int IsCPEInstalled, 
                    int VCID, 
                    string CPEUsername, 
                    string CPEPassword, 
                    string CPELocation, 
                    int Extension, 
                    string AllocatedMasterNumber, 
                    string Domain, 
                    string IPPool, 
                    string BroadCast, 
                    string SubnetMask, 
                    string Gateway, 
                    string IPRange, 
                    int VASID, 
                    string ForwardingNumber, 
                    int AdHOCQuantity, 
                    int CBQuantity, 
                    int RoutingID, 
                    string InternationalSpecific, 
                    int IsPABX, 
                    int PABXModelID, 
                    int IsUAN, 
                    string UANNumber, 
                    string UANBackendNumber, 
                    int IsTFN, 
                    string TFNNumber, 
                    string TFNBackendNumber, 
                    string OtherPasswords, 
                    string SSHTelnetPort, 
                    string FLLVLAN, 
                    System.DateTime ConfiguredDate, 
                    string Remarks, 
                    int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFLLDeploymentDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFLLDeploymentDetails(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchFLLProvisonCricuits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchFLLProvisonCricuits(
                    int SignupID, 
                    string BSSCODE, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    int CircuitTypeID, 
                    int CityID, 
                    int InfraID, 
                    int CircuitOwnerID, 
                    int CircuitStatusID, 
                    int CustomerCode, 
                    int NodeID, 
                    int RoutingID, 
                    int ProductsDetailID, 
                    int ProductTypeID, 
                    int AggregationTypeID, 
                    int SeriesID, 
                    int VASID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VerifyFLLIpAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable VerifyFLLIpAddress(string IpAddress1, string IpAddress2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StatusActionByFLL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object StatusActionByFLL(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FLLStatusActionEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool FLLStatusActionEmail(int SignupID, string StatusFlag, string EmailStage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertDefaultInSD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertDefaultInSD(int SignupID, string Notes, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFiberDetailsLogs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFiberDetailsLogs(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertFLLExtraIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertFLLExtraIP(int SignupID, string ExtraIp_NetworkIP, string ExtraIP_BroadCast, string ExtraIp_SubnetMask, string ExtraIp_IpRange, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFLLExtraIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFLLExtraIP(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ldap_Authentication", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Ldap_Authentication(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SendSMS(string Stage, string Number, string Message, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmployeeViaGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetEmployeeViaGroup(int GroupID, int CityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetActivityType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetActivityType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetActivityStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetActivityStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCloserRemarks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCloserRemarks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetActivitySales", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetActivitySales(string UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerContact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomerContact(string RefID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOpportunity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetOpportunity(string RefID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertActivitySales", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertActivitySales(
                    string Subject, 
                    string CustCode, 
                    string Account, 
                    string Address, 
                    string POC, 
                    string SubRefID, 
                    string Opportunity, 
                    string ActivityDate, 
                    string ActivityTime, 
                    string ActivityTypeID, 
                    string ActivityStatus, 
                    string ActivityOwner, 
                    string Remarks, 
                    string CloserRemarks, 
                    string Attachment, 
                    string IsActive, 
                    string TransactionBy, 
                    string TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateActivitySales", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateActivitySales(string ActivityID, string Subject, string CustCode, string Account, string Address, string POC, string SubRefID, string Opportunity, string ActivityDate, string ActivityTime, string ActivityTypeID, string ActivityStatus, string ActivityOwner, string Remarks, string CloserRemarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchOpportunity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchOpportunity(string Where, int LOBID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetModuleNameViaRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetModuleNameViaRole(int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFormsViaRole_ModuleId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFormsViaRole_ModuleId(int RoleID, int ModuleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetTicketStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetTicketStatus(int TicketStatusID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetTicketOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetTicketOwner(int TicketOwnerID, int RegionID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetAlertEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetAlertEmail(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetTicketNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetTicketNo(int CityID, string Priority, int TicketTypeID, int ModeofTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetTTNode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetTTNode(int NodeID, int CityID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetTicketDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetTicketDetails(int TicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_InsertTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Noctt_InsertTicket(
                    string TicketNo, 
                    int TicketTypeID, 
                    int ModeofTicketID, 
                    int TicketStatusID, 
                    string Priority, 
                    int TicketOwnerID, 
                    int EscalatedPersonID, 
                    int IssueOnID, 
                    int NodeAID, 
                    int NodeBID, 
                    string Connectivity, 
                    int ImpactID, 
                    System.DateTime ETTR, 
                    System.DateTime FaultOccured, 
                    System.DateTime FaultCleared, 
                    int FaultID, 
                    int RFOID, 
                    string Notes, 
                    int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_UpdateTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Noctt_UpdateTicket(int TicketID, int TicketStatusID, System.DateTime ETTR, System.DateTime FaultCleared, int FaultID, int RFOID, int TicketTypeID, int ModeofTicketID, string Priority, int TicketOwnerID, int EscalatedPersonID, System.DateTime FaultOccured, string Notes, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_EmailAlert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Noctt_EmailAlert(int TicketID, int IsBroadBand, int IsSupport, int IsNOC, int IsOptix, int IsOptixSupport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_SearchTickets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_SearchTickets(string TicketNo, int TicketOwnerID, int IssueOnID, int RegionID, int CityID, int NodeAID, int TicketTypeID, int ModeofTicketID, int TicketStatusID, string Connectivity, int ImpactID, int FaultID, int RFOID, System.DateTime ToDate, System.DateTime FromDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitforICS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitforICS(int SignupID, string CMSID, string CircuitName, string GPID, int RegionID, int CityID, int RingID, int NodeID, int CustomerCode, string IPAddress, int StatusID, int InfraID, int ServiceUnitID, int IsGSAC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ComplaintType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_ComplaintType(int ComplaintTypeID, string ComplaintType, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ModeofComplain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_ModeofComplain(int ModeofComplaintID, string ModeofComplaint, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_GetProblemDignoseEnd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_GetProblemDignoseEnd(int ProblemDignoseEndID, string ProblemDignoseEnd, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_GetRFO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_GetRFO(int RFOID, string RFO, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_GetServerityLevel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_GetServerityLevel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ComplainImpact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_ComplainImpact();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_AssignedDepartment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_AssignedDepartment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_GetComplainStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_GetComplainStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_GetComplainOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_GetComplainOwner();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_GetLinkStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_GetLinkStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_GetEmailAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_GetEmailAddress(int SignupID, int IsActive, int IsPartner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_LoggedBy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_LoggedBy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ComplainFault", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_ComplainFault();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ComplainTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetICS_ComplainTicket(string DeptCode, string InfraCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_TotalHoldDuration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetICS_TotalHoldDuration(int ComplaintID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ParentTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetICS_ParentTicket(string DeptCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertICS_Complain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertICS_Complain(
                    int ComplaintID, 
                    int SignupID, 
                    string TicketNo, 
                    System.DateTime FaultOccureDateTime, 
                    int ComplaintLoggedByID, 
                    int ComplaintTypeID, 
                    int ModeofComplaintID, 
                    int ImpactID, 
                    int ComplaintStatusID, 
                    int ComplainOwnerID, 
                    int LinkStatusID, 
                    int IsETTR, 
                    System.DateTime ETRR_DateTime, 
                    int IsETA, 
                    System.DateTime ETA_DateTime, 
                    int ServerityLevelID, 
                    string Fault, 
                    string FaultLocation, 
                    int ComplainSolvedByID, 
                    System.DateTime FaultClearedDateTime, 
                    int ProblemDignoseEndID, 
                    int RFOID, 
                    int ComplaintClosedByID, 
                    System.DateTime ComplainCloseDateTime, 
                    string Remarks, 
                    int ForwardToDepartID, 
                    string ParentTicket, 
                    int ModuleDeptID, 
                    int TransactionByID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateICS_Complain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateICS_Complain(
                    int ComplaintID, 
                    System.DateTime FaultOccureDateTime, 
                    int ComplaintTypeID, 
                    int ModeofComplaintID, 
                    int ImpactID, 
                    int ComplaintStatusID, 
                    int ComplainOwnerID, 
                    int LinkStatusID, 
                    int IsETTR, 
                    System.DateTime ETRR_DateTime, 
                    int IsETA, 
                    System.DateTime ETA_DateTime, 
                    int ServerityLevelID, 
                    string Fault, 
                    string FaultLocation, 
                    int ComplainSolvedByID, 
                    System.DateTime FaultClearedDateTime, 
                    int ProblemDignoseEndID, 
                    int RFOID, 
                    int ComplaintClosedByID, 
                    System.DateTime ComplainCloseDateTime, 
                    string Remarks, 
                    int IsHold, 
                    System.DateTime HoldDateTime, 
                    System.DateTime UnHoldDateTime, 
                    string HoldRemarks, 
                    string HoldFlag, 
                    int ForwardToDepartID, 
                    int ForwardByDepartID, 
                    int TransactionByID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchICS_ComplainCircuits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchICS_ComplainCircuits(
                    string TicketNo, 
                    int SignupID, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    int CityID, 
                    int OwnerID, 
                    int CustomerCode, 
                    int NodeID, 
                    int ComplainStatusID, 
                    int ComplainTypeID, 
                    int OpenedByID, 
                    int ModeOFComplaintID, 
                    int ComplaintImpactID, 
                    int ProblemDignosedAt, 
                    int AssignedDepartID, 
                    int RFOID, 
                    System.DateTime ToDate, 
                    System.DateTime FromDate, 
                    int Count, 
                    string Flag, 
                    string ParentTicket, 
                    int ModuleDeptID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ComplainDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_ComplainDetails(int ComplaintID);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadICS_Attachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadICS_AttachmentResponse UploadICS_Attachment(RainMaker.BSS_Service.UploadICS_AttachmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ComplainHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetICS_ComplainHistory(int ComplaintID, int Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_InternalEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetICS_InternalEmail(string[] ID, string[] SigID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ExternalEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetICS_ExternalEmail(int ComplaintID, int IsAttachment, string FileName, string ToEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetICS_ExternalPartnerEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetICS_ExternalPartnerEmail(int ComplaintID, int IsAttachment, string FileName, string ToEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICS_ExtractReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ICS_ExtractReport(int CityID, int CustomerCode, int NodeID, int ComplainTypeID, int ModeOFComplaintID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitCount(int StatusID, int InfraID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainCount(int ComplaintStatusID, int AssignedDeptID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDeploymentsCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDeploymentsCount(System.DateTime dat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDeploymentsviaInfraMedium", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDeploymentsviaInfraMedium(System.DateTime dat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDeploymentsviaStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDeploymentsviaStatus(System.DateTime dat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDeploymentViaLOB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDeploymentViaLOB(System.DateTime dat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StatusActionByBilling", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object StatusActionByBilling(int SignupID, string LastActionRemarks, int TransactionBy, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BillingStatusActionEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool BillingStatusActionEmail(int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage, string LastActionRemarks, string TransactionByName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVSPackages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVSPackages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVSATModels", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVSATModels(string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVSATTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVSATTypes(int Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertVSATDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertVSATDeployment(
                    int SignupID, 
                    System.DateTime DeploymentDate, 
                    int ModemTypeID, 
                    string ModemSerial, 
                    int ModemModelID, 
                    int BucTypeID, 
                    string BucSerial, 
                    int BucModelID, 
                    int LNBTypeID, 
                    string LNBSerial, 
                    int LNBModelID, 
                    int DishTypeID, 
                    int DishModelID, 
                    int CableTypeID, 
                    string CableLength, 
                    string Stage, 
                    string Notes, 
                    string SvpAttachments, 
                    int TransactionBy, 
                    int CircuitTypeID, 
                    int Pri_NodeID, 
                    int Sec_NodeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateVSATDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateVSATDeployment(
                    int DeploymentID, 
                    int SignupID, 
                    System.DateTime DeploymentDate, 
                    int ModemTypeID, 
                    string ModemSerial, 
                    int ModemModelID, 
                    int BucTypeID, 
                    string BucSerial, 
                    int BucModelID, 
                    int LNBTypeID, 
                    string LNBSerial, 
                    int LNBModelID, 
                    int DishTypeID, 
                    int DishModelID, 
                    int CableTypeID, 
                    string CableLength, 
                    string Stage, 
                    string Notes, 
                    string SvpAttachments, 
                    int TransactionBy, 
                    int CircuitTypeID, 
                    int Pri_NodeID, 
                    int Sec_NodeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VSAT_InteranlEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool VSAT_InteranlEmail(int DeploymentID, int SignupID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVSDeploymentDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVSDeploymentDetails(int SignupID);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadVSFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadVSFileResponse UploadVSFile(RainMaker.BSS_Service.UploadVSFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteVSFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteVSFile(string filename);
        
        // CODEGEN: Parameter 'DownloadVSFileResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadVSFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadVSFileResponse DownloadVSFile(RainMaker.BSS_Service.DownloadVSFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StatusActionByVS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object StatusActionByVS(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNoticedPeriod", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetNoticedPeriod();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRequestStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRequestStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTerminationReason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTerminationReason();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTerminationSubReason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTerminationSubReason(int TerminationReasonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCustomerTermination", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertCustomerTermination(int TerminationID, int SignupID, System.DateTime CaseReportedAt, string OverallCustomerRevenue, System.DateTime TerminationDate, string NoOfCircuitTerminated, int RequestStatusID, int NoticedPeriodID, int TerminationReasonID, int SubReasonID, string Remarks, string Conclusion, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCustomerTermination", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateCustomerTermination(int TerminationID, int SignupID, System.DateTime CaseReportedAt, string OverallCustomerRevenue, System.DateTime TerminationDate, string NoOfCircuitTerminated, int RequestStatusID, int NoticedPeriodID, int TerminationReasonID, int SubReasonID, string Remarks, string Conclusion, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateSignupDetailsByCTC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateSignupDetailsByCTC(int SignupID, System.DateTime MRC_Charges, string RequestStatusID, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReportData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetReportData(
                    string SelectQuery, 
                    int LOBID, 
                    int ServiceUniID, 
                    int InfraID, 
                    int StatusID, 
                    int BusinessTypeID, 
                    int CircuitTypeID, 
                    int CityID, 
                    int Pri_NodeID, 
                    int Pri_OwnerID, 
                    int Pri_ThirdPartyID, 
                    int CustomerCode, 
                    int Sec_NodeID, 
                    int Sec_OwnerID, 
                    int Sec_ThirdPartyID, 
                    int ReportTypeID, 
                    System.DateTime FromDate, 
                    System.DateTime ToDate, 
                    int IsCPMFormate, 
                    int IsNOCFormate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReportType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetReportType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetROISummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetROISummary(System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainsLogs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainsLogs(int LOBID, int ServiceUnitID, int InfraID, int CityID, int CustomerCode, int statusID, int CaseCategoryID, int InitialStatementID, int ComplainTypeID, int AssignedToDepartID, int AssignedByDepartID, System.DateTime ToDate, System.DateTime FromDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAggerationType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAggerationType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIPSubnet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetIPSubnet();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPABXModel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPABXModel(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNumberClass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetNumberClass();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNumSeries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetNumSeries(int CityID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GettProductDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GettProductDetails(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetProductType(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSubRegion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSubRegion(int RegionID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRoutingProfile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRoutingProfile(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVCVendor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVCVendor(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVAServices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVAServices(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertIPInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertIPInventory(int NodeID, int SubnetID, string IpAddress, int TransactionBy, int StartOctate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertVSInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertVSInventory(int CityID, int SeriesID, int ClassID, int DiDRangeCount, int StartRange, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertVCInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertVCInventory(string DeviceType, int VendorID, string PortsE1, string MACAddress, string SerialNumber, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchIPInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchIPInventory(int NodeID, int SubnetID, int CityID, int IsFree, int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchVCInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchVCInventory(string VCID, string DeviceType, int VendorID, int IsFree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchVSInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchVSInventory(int CityID, int SeriesID, string Number, int RegionID, int SubRegionID, int IsFree, int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertFLLDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertFLLDeployment(
                    int SignupID, 
                    int ActiveID, 
                    int ProductDetailsID, 
                    int ProductTypeID, 
                    string ChannelQuantity, 
                    int IsCPEInstalled, 
                    int Extension, 
                    string AllocatedMasterNumber, 
                    int VASID, 
                    string ForwardingNumber, 
                    int AdHOCQuantity, 
                    int CBQuantity, 
                    int RoutingID, 
                    string IntercnationalSpecific, 
                    int IsPABX, 
                    int PABXModelID, 
                    int IsUAN, 
                    string UANNumber, 
                    string UANBackendNumber, 
                    int IsTFN, 
                    string TFNNumber, 
                    string TFNBackendNumber, 
                    int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCC_DepoymentDetailsbySignupID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable getCC_DepoymentDetailsbySignupID(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDCLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDCLocation(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServerpool", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetServerpool(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertOS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertOS(string OSName, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateOS(int OSID, string OSName, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFrequency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFrequency(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CC_ActivetConformationMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CC_ActivetConformationMail(int DeploymentID, int SignupID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StatusActionByCC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object StatusActionByCC(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StatusActionEmailByCC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool StatusActionEmailByCC(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCOA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertCOA(int SignupID, System.DateTime COADate, System.DateTime BillingDate, string COAAttached, string Notes, int TransactionBy, System.DateTime TransactionDatime, System.DateTime DueDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCOA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateCOA(int COAID, int SignupID, System.DateTime COADate, System.DateTime BillingDate, string COAAttached, string Notes, int TransactionBy, System.DateTime TransactionDatime, System.DateTime DueDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCOADetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCOADetails(int SignUpID);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadCOAFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadCOAFileResponse UploadCOAFile(RainMaker.BSS_Service.UploadCOAFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteCOAFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteCOAFile(string filename);
        
        // CODEGEN: Parameter 'DownloadCOAFileResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadCOAFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadCOAFileResponse DownloadCOAFile(RainMaker.BSS_Service.DownloadCOAFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/COAExternalEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool COAExternalEmail(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/COAInternalEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool COAInternalEmail(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDCStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDCStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPDUModels", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPDUModels(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPDUCapacity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPDUCapacity(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPDU", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertPDU(int PDUModelID, int PDUCapacityID, int RackID, string PDUName, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePDU", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdatePDU(int PDUID, string PDUName, int PDUModelID, int RackID, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePDUPort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdatePDUPort(int PDUPortID, int StatusID, int SignupID, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPDUPorts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPDUPorts(int PDUID, int StatusID, int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchPDU", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchPDU(string PDUName, int PDUCapacityID, int PDUModelID, int RackID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRackModels", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRackModels(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRackCapacity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRackCapacity(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRackMeasuringUnit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRackMeasuringUnit(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRackPowerFeed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRackPowerFeed(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertRacks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertRacks(string RackName, int RackModelID, string Dimension, int RackCapacityID, int PowerFeedID, bool IsSinglePhase, int IsDualPhase, int Is32BreakerRating, int Is64BreakerRating, int ISACPowerSupply, int IsDCPowerSupply, int PowerMeasuringID, int IsActive, string Remarks, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateRack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object UpdateRack(int RackID, string RackName, int RackModelID, string Dimension, string PowerFeedID, bool IsSinglePhase, int IsDualPhase, int Is32BreakerRating, int Is64BreakerRating, int ISACPowerSupply, int IsDCPowerSupply, string PowerMeasuringID, int IsActive, string Remarks, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRackUs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRackUs(int RackID, int StatusID, int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchRack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchRack(int RackID, string RackName, int RackModelID, int RackCapacityID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateRackUs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateRackUs(int NoOfUID, int StatusID, int SignupID, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPatching", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertPatching(int SignupID, int NoofUs, string ModeofBilling, int DCLocID, System.DateTime ActivationDate, int Internet_SignupID, int MPLSLayer3_SignupID, int MPLSLayer2_SignupID, int FLL_SignupID, int Transit_SignupID, int layer2VPN_SignupID, string Remarks, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePatching", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdatePatching(int DCPatchingID, int SignupID, int NoofUs, string ModeofBilling, int DCLocID, System.DateTime ActivationDate, int Internet_SignupID, int MPLSLayer3_SignupID, int MPLSLayer2_SignupID, int FLL_SignupID, int Transit_SignupID, int layer2VPN_SignupID, string Remarks, int TransactionBy, int Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDC_PatchingBySignUpID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDC_PatchingBySignUpID(int SignUpID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DC_ActivetConformationMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DC_ActivetConformationMail(int SignupID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMultiplesDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetMultiplesDetails(int SignUpID, int RackCount, int RackUsCount, int RackNeed, int RackUNeed, int RackID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateODFPortsByDC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateODFPortsByDC(int SignupID, int ODFID, int ODFPortID, string ODFTray, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTicketType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTicketType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAssignedDepartment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAssignedDepartment(string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProblemDignosedAt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetProblemDignosedAt(int AssignDeptID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCaseCategory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCaseCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainStatus(string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplaintReportedVia", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplaintReportedVia();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInitialStatement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetInitialStatement();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPocStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPocStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustBandwidthIssue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustBandwidthIssue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetComplainTicket(string InfraCode, string CircuitCode, string TicketTypeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainParentTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetComplainParentTicket(string CircuitCode, string TicketTypeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDignosesOptionValues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDignosesOptionValues(int IsActive, string OptionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitCompleteDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitCompleteDetail(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitforOTS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitforOTS(int SignupID, string CMSID, string CircuitName, string GPID, int RegionID, int CityID, int RingID, int NodeID, int CustomerCode, string IPAddress, int StatusID, int InfraID, int ServiceUnitID, string Primary_CPE_IpAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertComplain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertComplain(
                    int SignupID, 
                    string TicketNo, 
                    int InitailStatementID, 
                    int ComplaintTypeID, 
                    int TicketTypeID, 
                    int ComplaintStatusID, 
                    int ProblemDignoseEndID, 
                    string LoggedBy, 
                    int ComplaintReportedviaId, 
                    System.DateTime ComplaintReceivedDate, 
                    string PersonSolving, 
                    int CaseCategoryID, 
                    string CallerName, 
                    string CallerNumber, 
                    string PoCName, 
                    string PoCNumber, 
                    int PoCStatusID, 
                    int AssignedToDeptID, 
                    int AssignedByDeptID, 
                    string FCR, 
                    System.DateTime Hold_UnHoldTime, 
                    string RCA, 
                    string Partner, 
                    int LinkStatusID, 
                    string Location, 
                    string Fault, 
                    string TxnOwner, 
                    System.DateTime ETA, 
                    System.DateTime ETTR, 
                    string PersonGivenETA, 
                    string Remarks, 
                    string QueryResponse, 
                    string IPOpsComments, 
                    string AssignedPersonName, 
                    int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertComplainTroubleshooting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertComplainTroubleshooting(
                    string ComplainID, 
                    string NodePortStatus, 
                    string NodePortTrafficStatus, 
                    string NodePortTrafficUtilization, 
                    string NodePortErrDiscard, 
                    string STGTrafficUtilization, 
                    string CTGTrafficUtilization, 
                    string LastMilePowerStatus, 
                    string FiberLEDStatus, 
                    string CPEStaus, 
                    string CEInterfaceStatus, 
                    string CETrafficStatus, 
                    string BandwidthUtilization, 
                    string DeviceRebooted, 
                    string CustomerIPResponses, 
                    string CustomerBandwidthIssue, 
                    string GatewayResponses, 
                    string AssignedDNS, 
                    string DNSResponding, 
                    string IsIPBlockedbyPTA, 
                    string EmailIssueIn, 
                    string EmailDomain, 
                    string MPPLSMTP_POPResponse, 
                    string MPPLSMTP_POPTelnet, 
                    string EmailIssueOn, 
                    string FacingEmailIssueAt, 
                    string ISIPBlackListed, 
                    string ISWebsiteReachable, 
                    string CustomerQuery, 
                    string Remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchComplainCircuits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchComplainCircuits(
                    string TicketNo, 
                    int SignupID, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    string TicketType, 
                    int ComplainStatusID, 
                    int CityID, 
                    int OwnerID, 
                    string LoggedBy, 
                    int CaseCategoryID, 
                    int InitialStatementID, 
                    int ProblemDignosedAt, 
                    int ReasonOutageID, 
                    System.DateTime ToDate, 
                    System.DateTime FromDate, 
                    int CustomerCode, 
                    int AssignedDepartID, 
                    int NodeID, 
                    int Count, 
                    string Flag, 
                    int IsFollow, 
                    int ComplaintReportedViaID, 
                    int FwdToDept, 
                    int FwdByDept, 
                    int FwdStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainDetailByComplainID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainDetailByComplainID(int ComplaintID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainTroubleShooting_ByComplainID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainTroubleShooting_ByComplainID(int ComplaintID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReasonOfOutage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetReasonOfOutage(int ProblemDignosedAtID, int InfraID, int DepartmentID, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetcountofCircuits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetcountofCircuits(int SignupID, string CMSID, string GPID, int RegionID, int StatusID, string CustName, int CustomerCode, string Primary_IpAddres, int IsExtraIP, string ExtraIPPool, int InfraID, int ServiceUnitID, string FLAG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainHistory(int ComplaintID, int FLAG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerSLA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomerSLA(int CustomerCode, int RegionID, string StatusID, System.DateTime SLADate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerComplainHistroy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomerComplainHistroy(int SignupID, string CMSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateComplain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateComplain(
                    int ComplainID, 
                    string TicketNo, 
                    int ComplaintStatusID, 
                    int AssignedByDeptID, 
                    int AssignedToDeptID, 
                    string AssignedToPersonName, 
                    string AssignedByPersonName, 
                    System.DateTime LastUpdatedDate, 
                    System.DateTime ETA, 
                    string PersonGivenETA, 
                    System.DateTime ETTR, 
                    string PersonSolving, 
                    System.DateTime ComplainSolvingDate, 
                    string FCR, 
                    int ProblemDignoseEndID, 
                    int ReasonOutageID, 
                    string Dignose_Causes, 
                    string Dignose_RootCauseAnalysis, 
                    string Dignose_PreventativeMeasureTake, 
                    int LastMileInfraID, 
                    string CustomerFeedBack, 
                    string FurtherAction, 
                    string NewComplainRef, 
                    string QueryResponses, 
                    string Remarks, 
                    string RequestTypeAtNE, 
                    string Picture1, 
                    string Picture2, 
                    int TeamID, 
                    int TeamPriority, 
                    int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CustomerExternalEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CustomerExternalEmail(int TicketTypeID, int CaseCategoryID, string Stage, int ComplaintID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ComplainInternalEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ComplainInternalEmail(int ComplaintID, int TicketTypeID, int AssignedtoDepartID, int AssignedByDepartID, int ComplainStatusID, int CaseCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLoggedBy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetLoggedBy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetComplainFollowHis", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetComplainFollowHis(int ComplaintID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkComplainBySignupID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable checkComplainBySignupID(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateComplainFollow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateComplainFollow(int ComplaintID, int IsFollow, int TransactionByID, string TransactionByName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssignedComplainsToTeam", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AssignedComplainsToTeam(int ComplaintID, int TeamID, int Priority, string Remarks, int AssignedByDeptID, string AssignedByPersonName, int TransactionBy);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadOTS_Attachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadOTS_AttachmentResponse UploadOTS_Attachment(RainMaker.BSS_Service.UploadOTS_AttachmentRequest request);
        
        // CODEGEN: Parameter 'DownloadOTSFileResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadOTSFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadOTSFileResponse DownloadOTSFile(RainMaker.BSS_Service.DownloadOTSFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateFiberDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateFiberDetails(int SignupID, string JoinName, string TubeNameFromCustomer, string CoreColorFromCustomer, string TubeNameFromNode, string CoreColorFromNode, string CutDistance, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTeamPrioirty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTeamPrioirty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTeamList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTeamList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetFault", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetFault(int FaultID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetImpact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetImpact(int ImpactID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetIssueOn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetIssueOn(int IssueOnID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetEscalatedPerson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetEscalatedPerson(int EscalatedPersonID, int RegionID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetModeofTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetModeofTicket(int ModeofTicketID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetRFO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetRFO(int RFOID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Noctt_GetTicketType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Noctt_GetTicketType(int TicketTypeID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertModel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertModel(string ModelType, string ModelName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertOperation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertOperation(string OperationName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertRouter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertRouter(int RotuerTypeID, string RouterName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertExtraIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertExtraIP(int SignupID, int IpProvisionID, string Section, string ExtraIp_NetworkIP, string ExtraIP_BroadCast, string ExtraIp_SubnetMask, string ExtraIp_IpRange, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertVRF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertVRF(string VRFName, string RD, int ServiceUnitID, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateModel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateModel(int ModelID, string ModelType, string ModelName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOperation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateOperation(int OperationID, string OperationName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateRouter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateRouter(int RouterID, int RotuerTypeID, string RouterName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateVRF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateVRF(int VRFID, string VRFName, string RD, int ServiceUnitID, int IsActive, int TransactionBy, System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetNode(int NodeID, int CityID, int RingID, int IsActive, string Node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertNode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertNode(string Node, int CityID, int RingID, int IsActive, int TranBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateNode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateNode(string NodeID, string Node, int CityID, int RingID, int IsActive, int TranBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFieldforNOC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFieldforNOC(int ServiceUnitID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIPStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetIPStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTopology", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTopology();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODUMount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODUMount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetNetwork(int RegionID, int CityID, int IsVoip, int StatusID, string IpAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertNetwork(int RegionID, int CityID, string IpAddress, int IsVoip, int StatusID, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateNetwork(int seq, int StatusID, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VerifyIpAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable VerifyIpAddress(string IpAddress1, string IpAddress2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCPEModel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCPEModel(int CPETypeID, string CPEModel, int IsActive, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCPEModel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertCPEModel(int CPETypeID, string CPEModel, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCPEModel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateCPEModel(int CPEModelID, int CPETypeID, string CPEModel, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertIpProvisioning", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertIpProvisioning(
                    int IpProvsionID, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime ConfigurationDate, 
                    string MRTGlink, 
                    int PortalAcessesGranted, 
                    string PortalUserID, 
                    string PortalPassword, 
                    string Documents, 
                    string NetworkDiagram, 
                    string Notes, 
                    int Primary_SwitchID, 
                    int Primary_SwitchPortID, 
                    int Primary_OLTID, 
                    string Primary_OLTPonPort, 
                    string Primary_OLTIpAddress, 
                    int Primary_CPE_ModelID, 
                    int Primary_CPE_WavelengthID, 
                    string Primary_CPE_UplinkPort, 
                    string Primary_CPE_IpAddress, 
                    string Primary_CPE_PortNo, 
                    string Primary_CPE_SFPSN, 
                    string Primary_CPE_SerialNo, 
                    int Primary_ODU_ModelID, 
                    int Primary_ODU_LinkSenerioID, 
                    int Primary_ODU_MountOnID, 
                    string Primary_ODU_Frequency, 
                    string Primary_ODU_RootIP, 
                    string Primary_ODU_RemoteIP, 
                    string Primary_ODU_AssetNo, 
                    string Primary_ODU_AerialDistance, 
                    string Primary_IpAddres, 
                    string Primary_SubnetMask, 
                    string Primary_NetworkIP, 
                    string Primary_BroadCastIP, 
                    string Primary_Gateway, 
                    string Primary_IPRange, 
                    string Primary_VLAN, 
                    string Primary_VLAN_B, 
                    int Primary_CircuitModeID, 
                    int Primary_VRFID, 
                    string Primary_IPME, 
                    string Primary_IPCE, 
                    int Primary_RouterID, 
                    string Primary_RouterInterface, 
                    int Primary_Router_BID, 
                    string Primary_RouterInterface_B, 
                    int Primary_OperationID, 
                    int Primary_TopologyID, 
                    int Primary_FeedTypeID, 
                    string Primary_IsSiteB, 
                    int Primary_SiteBClientID, 
                    string Primary_AsNumber, 
                    int Primary_IsTagged, 
                    int Secondary_SwitchID, 
                    int Secondary_SwitchPortID, 
                    int Secondary_OLTID, 
                    string Secondary_OLTPonPort, 
                    string Secondary_OLTIpAddress, 
                    string Secondary_CPE_ModelID, 
                    int Secondary_CPE_WavelengthID, 
                    string Secondary_CPE_UplinkPort, 
                    string Secondary_CPE_IpAddress, 
                    string Secondary_CPE_PortNo, 
                    string Secondary_CPE_SFPSN, 
                    string Secondary_CPE_SerialNo, 
                    int Secondary_ODU_ModelID, 
                    int Secondary_ODU_LinkSenerioID, 
                    int Secondary_ODU_MountOnID, 
                    string Secondary_ODU_Frequency, 
                    string Secondary_ODU_RootIP, 
                    string Secondary_ODU_RemoteIP, 
                    string Secondary_ODU_AssetNo, 
                    string Secondary_ODU_AerialDistance, 
                    int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateIpProvisioning", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateIpProvisioning(
                    int IpProvsionID, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime ConfigurationDate, 
                    string MRTGlink, 
                    int PortalAcessesGranted, 
                    string PortalUserID, 
                    string PortalPassword, 
                    string Documents, 
                    string NetworkDiagram, 
                    string Notes, 
                    int Primary_SwitchID, 
                    int Primary_SwitchPortID, 
                    int Primary_OLTID, 
                    string Primary_OLTPonPort, 
                    string Primary_OLTIpAddress, 
                    int Primary_CPE_ModelID, 
                    int Primary_CPE_WavelengthID, 
                    string Primary_CPE_UplinkPort, 
                    string Primary_CPE_IpAddress, 
                    string Primary_CPE_PortNo, 
                    string Primary_CPE_SFPSN, 
                    string Primary_CPE_SerialNo, 
                    int Primary_ODU_ModelID, 
                    int Primary_ODU_LinkSenerioID, 
                    int Primary_ODU_MountOnID, 
                    string Primary_ODU_Frequency, 
                    string Primary_ODU_RootIP, 
                    string Primary_ODU_RemoteIP, 
                    string Primary_ODU_AssetNo, 
                    string Primary_ODU_AerialDistance, 
                    string Primary_IpAddres, 
                    string Primary_SubnetMask, 
                    string Primary_NetworkIP, 
                    string Primary_BroadCastIP, 
                    string Primary_Gateway, 
                    string Primary_IPRange, 
                    string Primary_VLAN, 
                    string Primary_VLAN_B, 
                    int Primary_CircuitModeID, 
                    int Primary_VRFID, 
                    string Primary_IPME, 
                    string Primary_IPCE, 
                    int Primary_RouterID, 
                    string Primary_RouterInterface, 
                    int Primary_Router_BID, 
                    string Primary_RouterInterface_B, 
                    int Primary_OperationID, 
                    int Primary_TopologyID, 
                    int Primary_FeedTypeID, 
                    string Primary_IsSiteB, 
                    int Primary_SiteBClientID, 
                    string Primary_AsNumber, 
                    int Primary_IsTagged, 
                    int Secondary_SwitchID, 
                    int Secondary_SwitchPortID, 
                    int Secondary_OLTID, 
                    string Secondary_OLTPonPort, 
                    string Secondary_OLTIpAddress, 
                    int Secondary_CPE_ModelID, 
                    int Secondary_CPE_WavelengthID, 
                    string Secondary_CPE_UplinkPort, 
                    string Secondary_CPE_IpAddress, 
                    string Secondary_CPE_PortNo, 
                    string Secondary_CPE_SFPSN, 
                    string Secondary_CPE_SerialNo, 
                    int Secondary_ODU_ModelID, 
                    int Secondary_ODU_LinkSenerioID, 
                    int Secondary_ODU_MountOnID, 
                    string Secondary_ODU_Frequency, 
                    string Secondary_ODU_RootIP, 
                    string Secondary_ODU_RemoteIP, 
                    string Secondary_ODU_AssetNo, 
                    string Secondary_ODU_AerialDistance, 
                    int TransactionBy, 
                    int Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCustomerDetailsByIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateCustomerDetailsByIP(int SignupID, int NodeID, int BkNodeID, int VOIP, int VC, string VPN, int ExtraIP, string BandwidthID, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IpConfigurationConfirmationMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IpConfigurationConfirmationMail(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int CircuitTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StatusActionByNOC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object StatusActionByNOC(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StatusActionByTXN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object StatusActionByTXN(int SignupID, string LastActionRemarks, int TransactionBy, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IpStatusActionEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IpStatusActionEmail(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIpProviosnDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetIpProviosnDetail(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchActiveCricuits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchActiveCricuits(
                    int SignupID, 
                    string BSSCODE, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    int CircuitTypeID, 
                    int CityID, 
                    int InfraID, 
                    int ServiceUnitID, 
                    int CircuitOwnerID, 
                    int CircuitStatusID, 
                    int CustomerCode, 
                    int NodeID, 
                    int Primary_RingID, 
                    int Primary_SwitchID, 
                    int Primary_SwitchPortID, 
                    string Primary_IpAddres, 
                    string Primary_CPE_IpAddress, 
                    string ExtraIP, 
                    int IsExtraIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSiteB_IpProvisionDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSiteB_IpProvisionDetails(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelExtraIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelExtraIP(int Seq, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDuplexMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDuplexMode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPortType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPortType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSDH", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSDH();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLMMediaInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetLMMediaInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTxnInterface", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTxnInterface();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPortSpeed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPortSpeed(int PortSpeedID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEquipment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetEquipment(int EquipmentID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCapacity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCapacity(int CapacityID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODFPortsDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODFPortsDetails(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitProvisionDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitProvisionDetails(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitConfigurationDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitConfigurationDetails(int TxnProvisionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOFCDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetOFCDetails(int OFCDetailsID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEquipmetDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetEquipmetDetails(int EqiupmentEndID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertOLT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertOLT(string OLT, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPortSpeed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertPortSpeed(string PortSpeed, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertEquipment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertEquipment(string Equipment, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCapacity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertCapacity(string Capacity, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOLT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateOLT(int OLTID, string OLT, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePortSpeed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdatePortSpeed(int PortSpeedID, string PortSpeed, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEquipment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateEquipment(int EquipmentID, string Equipment, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCapacity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateCapacity(int CapacityID, string Capacity, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Insert_txnMainDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Insert_txnMainDetails(
                    int TxnProvisionID, 
                    System.DateTime DateofVisit, 
                    System.DateTime HandoverDate, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime RevisionDate, 
                    string CustomerPoC_Name, 
                    string CustomerPoC_Contact1, 
                    string CustomerPoC_Contact2, 
                    string CustomerPoC_Email1, 
                    string CustomerPoC_Email2, 
                    string LocalPoC_Name, 
                    string LocalPoC_Contact1, 
                    string LocalPoC_Contact2, 
                    string LocalPoC_Email1, 
                    string LocalPoC_Email2, 
                    string CPSiteAddress1, 
                    string CPSiteAddress2, 
                    string DemarcationEndA, 
                    string DemarcationEndB, 
                    string PartnerName, 
                    string PartnerContact, 
                    string PartnerClientID, 
                    string PartnerEmailAddress, 
                    string PartnerName2, 
                    string PartnerContact2, 
                    string PartnerClientID2, 
                    string PartnerEmailAddress2, 
                    string PartnerName3, 
                    string PartnerContact3, 
                    string PartnerClientID3, 
                    string PartnerEmailAddress3, 
                    string ServiceCapacity, 
                    string ServiceEmailAddress, 
                    string ServiceCustomerID, 
                    string ServiceBearerID, 
                    string OtherServiceInformation, 
                    string EndAName, 
                    string EndBName, 
                    string EndCName, 
                    string EndDName, 
                    string CustomerAcceptance, 
                    string SLD, 
                    string TestResult, 
                    string Comments, 
                    string TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertEquimetDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertEquimetDetails(
                    int EqiupmentEndID, 
                    int TxnProvisionID, 
                    string EquipmentID1, 
                    int InterfaceID1, 
                    string PatchCableCord1, 
                    string Attenuator1, 
                    string SlotPort1, 
                    string ODFDDFlocation1, 
                    string EquipmentID2, 
                    int InterfaceID2, 
                    string PatchCableCord2, 
                    string Attenuator2, 
                    string SlotPort2, 
                    string ODFDDFlocation2, 
                    string EquipmentID3, 
                    int InterfaceID3, 
                    string PatchCableCord3, 
                    string Attenuator3, 
                    string SlotPort3, 
                    string ODFDDFlocation3, 
                    string EndFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCircuitConfiqDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertCircuitConfiqDetails(
                    int TxnProvisionID, 
                    int Near_PortTypeID_End1, 
                    string Near_Location_End1, 
                    int Near_PortSpeedID_End1, 
                    string Near_VLAN_End1, 
                    string Near_LCAS_End1, 
                    int Near_DuplexModeID_End1, 
                    string Near_AutoNegotiation_End1, 
                    string Near_MTUSize_End1, 
                    int Far_PortTypeID_End1, 
                    string Far_Location_End1, 
                    int Far_PortSpeedID_End1, 
                    string Far_VLAN_End1, 
                    string Far_LCAS_End1, 
                    int Far_DuplexModeID_End1, 
                    string Far_AutoNegotiation_End1, 
                    string Far_MTUSize_End1, 
                    int Near_PortTypeID_End2, 
                    string Near_Location_End2, 
                    int Near_PortSpeedID_End2, 
                    string Near_VLAN_End2, 
                    string Near_LCAS_End2, 
                    int Near_DuplexModeID_End2, 
                    string Near_AutoNegotiation_End2, 
                    string Near_MTUSize_End2, 
                    int Far_PortTypeID_End2, 
                    string Far_Location_End2, 
                    int Far_PortSpeedID_End2, 
                    string Far_VLAN_End2, 
                    string Far_LCAS_End2, 
                    int Far_DuplexModeID_End2, 
                    string Far_AutoNegotiation_End2, 
                    string Far_MTUSize_End2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertOFCDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertOFCDetails(
                    int TxnProvisionID, 
                    string OFCRegion, 
                    int LM_MediaID, 
                    string Spur_OFCType, 
                    string Spur_Route, 
                    string Spur_TXNODF, 
                    string Spur_Optical_TestPointA, 
                    string Spur_Optical_TestPointB, 
                    string Spur_Optical_Port, 
                    string Spur_Optical_TotalLoss, 
                    string Spur_Optical_AverageLoss, 
                    string Spur_Optical_OPMReading, 
                    string Spur_EE_TestPointA, 
                    string Spur_EE_TestPointB, 
                    string Spur_EE_TestType, 
                    string Spur_EE_Duration, 
                    string Spur_EE_Availablity, 
                    string Pro_OFCType, 
                    string Pro_Route, 
                    string Pro_TXNODF, 
                    string Pro_Optical_TestPointA, 
                    string Pro_Optical_TestPointB, 
                    string Pro_Optical_Port, 
                    string Pro_Optical_TotalLoss, 
                    string Pro_Optical_AverageLoss, 
                    string Pro_Optical_OPMReading, 
                    string Pro_EE_TestPointA, 
                    string Pro_EE_TestPointB, 
                    string Pro_EE_TestType, 
                    string Pro_EE_Duration, 
                    string Pro_EE_Availablity, 
                    string OFCFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Update_txnMainDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Update_txnMainDetails(
                    int TxnProvisionID, 
                    System.DateTime DateofVisit, 
                    System.DateTime HandoverDate, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime RevisionDate, 
                    string CustomerPoC_Name, 
                    string CustomerPoC_Contact1, 
                    string CustomerPoC_Contact2, 
                    string CustomerPoC_Email1, 
                    string CustomerPoC_Email2, 
                    string LocalPoC_Name, 
                    string LocalPoC_Contact1, 
                    string LocalPoC_Contact2, 
                    string LocalPoC_Email1, 
                    string LocalPoC_Email2, 
                    string CPSiteAddress1, 
                    string CPSiteAddress2, 
                    string DemarcationEndA, 
                    string DemarcationEndB, 
                    string PartnerName, 
                    string PartnerContact, 
                    string PartnerClientID, 
                    string PartnerEmailAddress, 
                    string PartnerName2, 
                    string PartnerContact2, 
                    string PartnerClientID2, 
                    string PartnerEmailAddress2, 
                    string PartnerName3, 
                    string PartnerContact3, 
                    string PartnerClientID3, 
                    string PartnerEmailAddress3, 
                    string ServiceCapacity, 
                    string ServiceEmailAddress, 
                    string ServiceCustomerID, 
                    string ServiceBearerID, 
                    string OtherServiceInformation, 
                    string EndAName, 
                    string EndBName, 
                    string EndCName, 
                    string EndDName, 
                    string CustomerAcceptance, 
                    string SLD, 
                    string TestResult, 
                    string Comments, 
                    string TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEquimetDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateEquimetDetails(
                    int EqiupmentEndID, 
                    int TxnProvisionID, 
                    string EquipmentID1, 
                    int InterfaceID1, 
                    string PatchCableCord1, 
                    string Attenuator1, 
                    string SlotPort1, 
                    string ODFDDFlocation1, 
                    string EquipmentID2, 
                    int InterfaceID2, 
                    string PatchCableCord2, 
                    string Attenuator2, 
                    string SlotPort2, 
                    string ODFDDFlocation2, 
                    string EquipmentID3, 
                    int InterfaceID3, 
                    string PatchCableCord3, 
                    string Attenuator3, 
                    string SlotPort3, 
                    string ODFDDFlocation3, 
                    string EndFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCircuitConfiqDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateCircuitConfiqDetails(
                    int CircuitConfigID, 
                    int TxnProvisionID, 
                    int Near_PortTypeID_End1, 
                    string Near_Location_End1, 
                    int Near_PortSpeedID_End1, 
                    string Near_VLAN_End1, 
                    string Near_LCAS_End1, 
                    int Near_DuplexModeID_End1, 
                    string Near_AutoNegotiation_End1, 
                    string Near_MTUSize_End1, 
                    int Far_PortTypeID_End1, 
                    string Far_Location_End1, 
                    int Far_PortSpeedID_End1, 
                    string Far_VLAN_End1, 
                    string Far_LCAS_End1, 
                    int Far_DuplexModeID_End1, 
                    string Far_AutoNegotiation_End1, 
                    string Far_MTUSize_End1, 
                    int Near_PortTypeID_End2, 
                    string Near_Location_End2, 
                    int Near_PortSpeedID_End2, 
                    string Near_VLAN_End2, 
                    string Near_LCAS_End2, 
                    int Near_DuplexModeID_End2, 
                    string Near_AutoNegotiation_End2, 
                    string Near_MTUSize_End2, 
                    int Far_PortTypeID_End2, 
                    string Far_Location_End2, 
                    int Far_PortSpeedID_End2, 
                    string Far_VLAN_End2, 
                    string Far_LCAS_End2, 
                    int Far_DuplexModeID_End2, 
                    string Far_AutoNegotiation_End2, 
                    string Far_MTUSize_End2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOFCDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateOFCDetails(
                    int OFCDetailsID, 
                    int TxnProvisionID, 
                    string OFCRegion, 
                    int LM_MediaID, 
                    string Spur_OFCType, 
                    string Spur_Route, 
                    string Spur_TXNODF, 
                    string Spur_Optical_TestPointA, 
                    string Spur_Optical_TestPointB, 
                    string Spur_Optical_Port, 
                    string Spur_Optical_TotalLoss, 
                    string Spur_Optical_AverageLoss, 
                    string Spur_Optical_OPMReading, 
                    string Spur_EE_TestPointA, 
                    string Spur_EE_TestPointB, 
                    string Spur_EE_TestType, 
                    string Spur_EE_Duration, 
                    string Spur_EE_Availablity, 
                    string Pro_OFCType, 
                    string Pro_Route, 
                    string Pro_TXNODF, 
                    string Pro_Optical_TestPointA, 
                    string Pro_Optical_TestPointB, 
                    string Pro_Optical_Port, 
                    string Pro_Optical_TotalLoss, 
                    string Pro_Optical_AverageLoss, 
                    string Pro_Optical_OPMReading, 
                    string Pro_EE_TestPointA, 
                    string Pro_EE_TestPointB, 
                    string Pro_EE_TestType, 
                    string Pro_EE_Duration, 
                    string Pro_EE_Availablity, 
                    string OFCFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateODFPortsByTXN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UpdateODFPortsByTXN(int SignupID, int IsEnd1_Protected, int End1_Protected_ODFID, int End1_Protected_ODFPortID, string End1_Protected_ODFTray, int IsEnd2_Spur, int IsEnd2_Spur_ODFID, int IsEnd2_Spur_ODFPortID, string IsEnd2_Spur_ODFTray, int IsEnd2_Protected, int IsEnd2_Protected_ODFID, int IsEnd2_Protected_ODFPortID, string IsEnd2_Protected_ODFTray, string TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDetailsofOther", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateDetailsofOther(int TxnProvisionID, int SignupID, int DeploymentID, int Pri_SLAID, string TDMCircuitID, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertOtherDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertOtherDocuments(int SignupID, string OtherDocumentsName, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOtherDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateOtherDocuments(int seqID, int SignupID, string OtherDocumentsName, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOtherDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetOtherDocuments(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTxnInternalStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateTxnInternalStatus(int SignupID, string Status, string Remarks, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInternalStatusHist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetInternalStatusHist(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TxnInternalEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TxnInternalEmail(int SignupID, string Status, string Remarks, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TXNStatusActionEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TXNStatusActionEmail(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRAM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRAM(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCloudType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCloudType(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetOS(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProcessorSpeed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetProcessorSpeed(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPackageType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPackageType(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSoftware", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSoftware(string SWType, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStorageType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetStorageType(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVMHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVMHost(int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertRAM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertRAM(string RAM, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateRAM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateRAM(string RAM, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCloudDepolyment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertCloudDepolyment(
                    int DeploymentID, 
                    int SignupID, 
                    int CloudTypeID, 
                    int NoofVM, 
                    int PackageTypeID, 
                    int HighAvalibility, 
                    int ProcessorSpeedID, 
                    int NoofCores, 
                    int RAMID, 
                    int StorageTypeID, 
                    string StorageCapacity, 
                    int NoofNIC, 
                    int NoofPublicIPs, 
                    string PriIPAddress, 
                    string PriVLAN, 
                    string SecIPAddress, 
                    string SecVLAN, 
                    string PriServerLoc, 
                    string PriServerPool, 
                    int PriVMHostID, 
                    string SecServerLoc, 
                    string SecServerPool, 
                    int SecVMHostID, 
                    string OSName, 
                    int ExchangeRequired, 
                    string ExchangeName, 
                    int NoofExchangeCALs, 
                    int DtabaseRequired, 
                    string DatabaseName, 
                    int RemoteAccessRequired, 
                    int NoofRemoteCALs, 
                    int VPNRequired, 
                    int NoofVPNUsers, 
                    string VPNUserID, 
                    string VPNPassword, 
                    int PortalAccessRequired, 
                    string PortalUserID, 
                    string PortalPassword, 
                    int VMSnapshotRequired, 
                    string VMSnapshotFrequency, 
                    string VMSnapshotPath, 
                    string Remarks, 
                    int Internet_SignupID, 
                    int MPLSLayer3_SignupID, 
                    int MPLSLayer2_SignupID, 
                    int FLL_SignupID, 
                    int Transit_SignupID, 
                    int layer2VPN_SignupID, 
                    int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCloudDelpoyment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateCloudDelpoyment(
                    int DeploymentID, 
                    int SignupID, 
                    int CloudTypeID, 
                    int NoofVM, 
                    int PackageTypeID, 
                    int HighAvalibility, 
                    int ProcessorSpeedID, 
                    int NoofCores, 
                    int RAMID, 
                    int StorageTypeID, 
                    string StorageCapacity, 
                    int NoofNIC, 
                    int NoofPublicIPs, 
                    string PriIPAddress, 
                    string PriVLAN, 
                    string SecIPAddress, 
                    string SecVLAN, 
                    string PriServerLoc, 
                    string PriServerPool, 
                    int PriVMHostID, 
                    string SecServerLoc, 
                    string SecServerPool, 
                    int SecVMHostID, 
                    string OSName, 
                    int ExchangeRequired, 
                    string ExchangeName, 
                    int NoofExchangeCALs, 
                    int DtabaseRequired, 
                    string DatabaseName, 
                    int RemoteAccessRequired, 
                    int NoofRemoteCALs, 
                    int VPNRequired, 
                    int NoofVPNUsers, 
                    string VPNUserID, 
                    string VPNPassword, 
                    int PortalAccessRequired, 
                    string PortalUserID, 
                    string PortalPassword, 
                    int VMSnapshotRequired, 
                    string VMSnapshotFrequency, 
                    string VMSnapshotPath, 
                    System.DateTime DeploymentDate, 
                    System.DateTime ActivationDate, 
                    string Remarks, 
                    int Internet_SignupID, 
                    int MPLSLayer3_SignupID, 
                    int MPLSLayer2_SignupID, 
                    int FLL_SignupID, 
                    int Transit_SignupID, 
                    int layer2VPN_SignupID, 
                    int TransactionBy, 
                    int Mark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSalesPersonsbyInfraID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSalesPersonsbyInfraID(int InfraID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertBusinessType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertBusinessType(string BusinessType, int Isvalid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertBandwith", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertBandwith(string Bandwidth, int ServiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertMasterCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertMasterCustomer(int CustomerCode, string Customer, string Logo, string Country, string State, string City, string EmailAddress, string Phone, string Remarks, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateMasterCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateMasterCustomer(int CustomerCode, string Customer, string Logo, string Country, string State, string City, string EmailAddress, string Phone, string Remarks, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchMasterCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchMasterCustomer(int CustomerCode, string CustomerName, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMasterCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetMasterCustomer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertProjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertProjects(int CustomerCode, int ProjectCode, string Project, string PO, string Description, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectsByCustomerCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetProjectsByCustomerCode(long CustomerCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertLocation(int LocationCode, int CityID, string Location, string Remarks, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateLocation(int LocationCode, string Location, string Remarks, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLocations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetLocations(int CityID, int locCode, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertCity(string CityName, int CityCode, int Region, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertInternationCity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertInternationCity(string CityName, int CountryID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateCity(string CityID, string CityName, int CityCode, int Region, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerIdentification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomerIdentification();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomersList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomersList();
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileSLA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadFileSLAResponse UploadFileSLA(RainMaker.BSS_Service.UploadFileSLARequest request);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileBOG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadFileBOGResponse UploadFileBOG(RainMaker.BSS_Service.UploadFileBOGRequest request);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileSignup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadFileSignupResponse UploadFileSignup(RainMaker.BSS_Service.UploadFileSignupRequest request);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileMSC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadFileMSCResponse UploadFileMSC(RainMaker.BSS_Service.UploadFileMSCRequest request);
        
        // CODEGEN: Parameter 'DownloadFileSignupResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadFileSignup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadFileSignupResponse DownloadFileSignup(RainMaker.BSS_Service.DownloadFileSignupRequest request);
        
        // CODEGEN: Parameter 'DownloadManualResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadManual", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadManualResponse DownloadManual(RainMaker.BSS_Service.DownloadManualRequest request);
        
        // CODEGEN: Parameter 'DownloadFileSLDResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadFileSLD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadFileSLDResponse DownloadFileSLD(RainMaker.BSS_Service.DownloadFileSLDRequest request);
        
        // CODEGEN: Parameter 'DownloadFileBCaseResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadFileBCase", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadFileBCaseResponse DownloadFileBCase(RainMaker.BSS_Service.DownloadFileBCaseRequest request);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileND", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadFileNDResponse UploadFileND(RainMaker.BSS_Service.UploadFileNDRequest request);
        
        // CODEGEN: Parameter 'DownloadFileNDResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadFileND", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadFileNDResponse DownloadFileND(RainMaker.BSS_Service.DownloadFileNDRequest request);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadNOCFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadNOCFileResponse UploadNOCFile(RainMaker.BSS_Service.UploadNOCFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NOCFileDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool NOCFileDelete(string filename);
        
        // CODEGEN: Parameter 'DownloadNOCFileResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadNOCFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadNOCFileResponse DownloadNOCFile(RainMaker.BSS_Service.DownloadNOCFileRequest request);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadTXNFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadTXNFileResponse UploadTXNFile(RainMaker.BSS_Service.UploadTXNFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteTXNFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteTXNFile(string filename);
        
        // CODEGEN: Parameter 'DownloadTXNFileResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadTXNFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadTXNFileResponse DownloadTXNFile(RainMaker.BSS_Service.DownloadTXNFileRequest request);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadCustomerImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadCustomerImageResponse UploadCustomerImage(RainMaker.BSS_Service.UploadCustomerImageRequest request);
        
        // CODEGEN: Parameter 'DownloadCustomerImageResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadCustomerImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadCustomerImageResponse DownloadCustomerImage(RainMaker.BSS_Service.DownloadCustomerImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteCustomerImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteCustomerImage(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertRejectionForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertRejectionForm(string SignupID, System.DateTime RejectionDate, int RejectionID, int InfraID, string Notes, string transBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertAdditionalRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertAdditionalRequest(
                    int SignupID, 
                    string ReqType, 
                    int Add_InfraID, 
                    System.DateTime CODDate, 
                    System.DateTime RFSDate, 
                    int CityID, 
                    int LocationCode, 
                    int AreaID, 
                    int NodeID, 
                    int IsBOG, 
                    string BOG, 
                    int TypeID, 
                    string Address, 
                    string Notes, 
                    double InfraCost, 
                    double EquipCost, 
                    double OTCParty, 
                    double MRCParty, 
                    double OTC, 
                    double MRC, 
                    double ROI, 
                    int TransactionBy, 
                    System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateAdditionalRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateAdditionalRequest(
                    int ID, 
                    int SignupID, 
                    string ReqType, 
                    int InfraID, 
                    System.DateTime CODDate, 
                    System.DateTime RFSDate, 
                    int CityID, 
                    int LocationCode, 
                    int AreaID, 
                    int NodeID, 
                    int IsBOG, 
                    string BOG, 
                    int TypeID, 
                    string Address, 
                    string Notes, 
                    double InfraCost, 
                    double EquipCost, 
                    double OTCParty, 
                    double MRCParty, 
                    double OTC, 
                    double MRC, 
                    double ROI, 
                    int TransactionBy, 
                    System.DateTime TransactionDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Addtional_Mail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Addtional_Mail(int SignUpID, int Add_InfraID, string ReqType, string Notes, int LOBID, int ServiceID, int InfraID, int Add_ID);
        
        // CODEGEN: Parameter 'picture' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileMEMO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.UploadFileMEMOResponse UploadFileMEMO(RainMaker.BSS_Service.UploadFileMEMORequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAdditionalRequestbyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAdditionalRequestbyID(int ID);
        
        // CODEGEN: Parameter 'DownloadFileMEMOResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadFileMEMO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        RainMaker.BSS_Service.DownloadFileMEMOResponse DownloadFileMEMO(RainMaker.BSS_Service.DownloadFileMEMORequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAdditionalReportData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAdditionalReportData(string SelectQuery, int InfraID, string RequestType, string FromDate, string ToDate, string ReportType, string CircuitName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAdditonalView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAdditonalView(string Company_NAme, int SignupID, string BSSCode, string infra, string CMSID, string GPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODFPortCapacity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODFPortCapacity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertODFPort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertODFPort(int NodeID, int ODFTypeID, int No_Of_ODFTrayID, int ODFPortCapacityID, string ODFName, int IsActive, string Description, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateODFPort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateODFPort(int ODFID, int NodeID, int ODFTypeID, int No_Of_ODFTrayID, int ODFPortCapacityID, string ODFName, int IsActive, string Description, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchODF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchODF(int CityID, int NodeID, int ODFTypeID, int No_Of_ODFTrayID, int ODFPortCapacityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODFPortStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODFPortStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateODFPortStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateODFPortStatus(int PortID, int StatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODFPortsbyODFID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODFPortsbyODFID(int ODFID, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODF(int CityID, int ODFTypeID, int NodeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEngineer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetEngineer(int RegionID, int CityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeploymentConformationMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeploymentConformationMail(int DeploymentID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateDeployment(
                    int DeploymentID, 
                    int SignupID, 
                    int Pri_InfraMediumID, 
                    int Pri_ODFID, 
                    int Pri_ODFPortID, 
                    int Pri_ODFTrayID, 
                    string Pri_DFN, 
                    int Pri_SLAID, 
                    int Pri_InterfaceID, 
                    string Pri_TotalMediaLosses, 
                    int Pri_Client_ODFID, 
                    int Pri_Client_ODFPortID, 
                    int Pri_Client_ODFTrayID, 
                    int Sec_InfraMediumID, 
                    int Sec_ODFID, 
                    int Sec_ODFPortID, 
                    int Sec_ODFTrayID, 
                    string Sec_DFN, 
                    int Sec_SLAID, 
                    int Sec_InterfaceID, 
                    string Sec_TotalMediaLosses, 
                    int Sec_Client_ODFID, 
                    int Sec_Client_ODFPortID, 
                    int Sec_Client_ODFTrayID, 
                    int EngineerID, 
                    int SplicerID, 
                    System.DateTime DeploymentDate, 
                    System.DateTime HandoverDate, 
                    string TestedBy, 
                    string TestedRemarks, 
                    string InfraLayOutDiagram, 
                    string OTDRTraceResult, 
                    string BandwidthTestResult, 
                    string Notes, 
                    int TransactionBy, 
                    int PrimaryCircuitOwnerID, 
                    int SecondaryCircuitOwnerID, 
                    int CircuitTypeID, 
                    int NodeID, 
                    string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HandoverConformationMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool HandoverConformationMail(int DeploymentID, int LOBID, int ServcieUnitID, int InfraID, string Stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertDeployment(
                    int DeploymentID, 
                    int SignupID, 
                    int Pri_InfraMediumID, 
                    int Pri_ODFID, 
                    int Pri_ODFPortID, 
                    int Pri_ODFTrayID, 
                    string Pri_DFN, 
                    int Pri_SLAID, 
                    int Pri_InterfaceID, 
                    string Pri_TotalMediaLosses, 
                    int Pri_Client_ODFID, 
                    int Pri_Client_ODFPortID, 
                    int Pri_Client_ODFTrayID, 
                    int Sec_InfraMediumID, 
                    int Sec_ODFID, 
                    int Sec_ODFPortID, 
                    int Sec_ODFTrayID, 
                    string Sec_DFN, 
                    int Sec_SLAID, 
                    int Sec_InterfaceID, 
                    string Sec_TotalMediaLosses, 
                    int Sec_Client_ODFID, 
                    int Sec_Client_ODFPortID, 
                    int Sec_Client_ODFTrayID, 
                    int EngineerID, 
                    int SplicerID, 
                    System.DateTime DeploymentDate, 
                    System.DateTime HandoverDate, 
                    string TestedBy, 
                    string TestedRemarks, 
                    string InfraLayOutDiagram, 
                    string OTDRTraceResult, 
                    string BandwidthTestResult, 
                    string Notes, 
                    int TransactionBy, 
                    int PrimaryCircuitOwnerID, 
                    int SecondaryCircuitOwnerID, 
                    int CircuitTypeID, 
                    int NodeID, 
                    string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODFType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODFType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetODFTraybyODFID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetODFTraybyODFID(int ODFID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSLA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSLA();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNo_ofTray", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetNo_ofTray();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInterface", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetInterface();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchDeploymentCircuits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchDeploymentCircuits(int DeploymentID, int SignupID, string BSSCODE, string GPID, string CMSID, int CircuitTypeID, int CircuitOwnerID, int InfraID, int CityID, string CircuitName, int StatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitDeploymentbyDeploymentID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitDeploymentbyDeploymentID(int DeploymentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitDeploymentDetatils", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitDeploymentDetatils(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSwitchPortCapacity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSwitchPortCapacity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSwitchPortsbySwitchID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSwitchPortsbySwitchID(int SwitchID, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSwitches", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSwitches(int SwitchID, int IsActive, int NodeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOLT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetOLT(int OLTID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchSwitches", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchSwitches(int CityID, int NodeID, int SwitchModelID, int SwitchPortCapacityID, string SwitchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertSwitch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertSwitch(int SwitchID, string SwitchName, int NodeID, int SwitchModelID, int SwitchPortCapacityID, string SwitchIP, string SwitchSequence, string Description, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateSwitch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateSwitch(int SwitchID, string SwitchName, int NodeID, int SwitchModelID, int SwitchPortCapacityID, string SwitchIP, string SwitchSequence, string Description, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateSwitchPortStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateSwitchPortStatus(int SwitchPortID, int StatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCPEWaveLength", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCPEWaveLength();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCPEType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCPEType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitMode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFeedType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFeedType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRouterType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRouterType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetExtraIp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetExtraIp(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRouter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRouter(int RouterID, int RouterTypeID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetModel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetModel(int ModelID, string ModelType, int IsActive, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVRF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetVRF(int VRFID, int ServiceUnitID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOperation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetOperation(int OperationID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNMSStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetNMSStatus(string IPAddress, string IfName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuthenticateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable AuthenticateUser(string username, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSecModuleForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSecModuleForm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSecRoleForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSecRoleForm(int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertAndDeleteSecRoleForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertAndDeleteSecRoleForm(int roleID, int formID, int roleFormID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertAndUpdateSecRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertAndUpdateSecRole(string rolename, int isActive, int roleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSecModuleSecModuleFormSecRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSecModuleSecModuleFormSecRole();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSecRoleFormByRoleID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSecRoleFormByRoleID(int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSecRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSecRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDepartment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDepartment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSystemUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSystemUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertUser(string Name, string Username, string Password, int DepartmentID, int RoleID, int IsADAuthenticate, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateUser(int UserID, string Name, string Username, string Password, int DepartmentID, int RoleID, int IsADAuthenticate, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMainControl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object[] GetMainControl(int roleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetModuleFormsViaRoleID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetModuleFormsViaRoleID(int roleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertActivity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertActivity(int SignupID, string Remarks, System.DateTime TransactionTime, string TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchEmailTo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchEmailTo(int LobID, int InfraID, int ServiceUnitID, string Name, string Stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchEmailCC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SearchEmailCC(int LobID, int InfraID, int ServiceUnitID, string Name, string Stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertEmailTo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertEmailTo(string ToID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEmailTo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateEmailTo(int seq, string ToID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertEmailCC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertEmailCC(string CCID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateEmailCC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateEmailCC(int seq, string CCID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExecQuery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ExecQuery(string Query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInfraMedium", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetInfraMedium(int InfraMediumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitOwner();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetThirdPartyType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetThirdPartyType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateArea", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object UpdateArea(int AreaID, string Area, bool active, int transby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Get_LOB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Get_LOB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Get_Cities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Get_Cities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSalesPersons", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSalesPersons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRejectionReasons", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRejectionReasons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEquipmentProperty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetEquipmentProperty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServiceUnitByLOB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetServiceUnitByLOB(int LOB_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitTypeByInfraID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitTypeByInfraID(int InfraID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBandwidthEnterprise", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetBandwidthEnterprise();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInfra", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetInfra(int IsActive, int ServiceUnitID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRequestType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRequestType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTypeDesc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTypeDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTypeDescbyOwnerID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTypeDescbyOwnerID(int OwnerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBusinessType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetBusinessType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPaymentTerms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPaymentTerms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitStatus(string Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPriority", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetPriority();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAreaByCityID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAreaByCityID(int CityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServiceUnits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetServiceUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetConnectivityType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetConnectivityType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRegions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRegions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCityByRegion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCityByRegion(int Region);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCountries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCountries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSiteB_ID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSiteB_ID(string B_Company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRingByCity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRingByCity(int CityID, int IsActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertRing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertRing(string RingName, int CityID, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateRing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateRing(int RingID, string RingName, int CityID, int IsActive, int TransactionBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTaskForce", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTaskForce(string Name, string Desgination, int RegionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTaskForce", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateTaskForce(int TaskForceID, string Name, int RegionID, int IsActive, int TransactionBy, System.DateTime TransactionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertTaskForce", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertTaskForce(string Name, string Desgination, int RegionID, int IsActive, int TransactionBy, System.DateTime TransactionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSiteB_Circuits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSiteB_Circuits(int CustomerCode, int ServiceUnitID, int InfraID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientStatusHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetClientStatusHistory(int SignupID, string CMSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServiceUnitViaInfra", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetServiceUnitViaInfra(int InfraID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInfraViaLOB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetInfraViaLOB(int LOBID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCustomerSignup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertCustomerSignup(
                    int SignupID, 
                    int LOBID, 
                    int ServiceUnitID, 
                    int InfraID, 
                    int CustomerCode, 
                    int ProjectCode, 
                    int LocationCode, 
                    int CircuitCode, 
                    string CircuitName, 
                    string Address, 
                    string Phone, 
                    string Email, 
                    string Fax, 
                    string Country, 
                    string TD_City, 
                    int CityID, 
                    int AreaID, 
                    int NodeID, 
                    int BusinessTypeID, 
                    string NTN, 
                    string Contact_Name, 
                    string Contact_Department, 
                    string Contact_Designation, 
                    string Contact_Office, 
                    string Contact_Phone, 
                    string Contact_Cell, 
                    string Contact_Fax, 
                    string Contact_Email, 
                    string Contact_SMS, 
                    string CNIC, 
                    System.DateTime CNICExpiryDate, 
                    int PriorityID, 
                    int IsSLA, 
                    string SLA, 
                    int IsBOG, 
                    string BOG, 
                    int IsSignup, 
                    string Signup, 
                    string TD_ConnectivityType, 
                    string TD_BandwidthType, 
                    string TD_CircuitSpeed, 
                    int BandwidthID, 
                    int ULPackageID, 
                    int DLPackageID, 
                    string InfraMedium, 
                    string InfraLength, 
                    int IsAddReq, 
                    int IsVOIP, 
                    int IsVC, 
                    int IsVPN, 
                    int IsExtraIP, 
                    string TD_ContractPeriod, 
                    string Bil_Name, 
                    string Bil_Company, 
                    string Bil_Address, 
                    string Bil_Country, 
                    string Bil_City, 
                    string Bil_PostalCode, 
                    string Bil_Phone, 
                    string Bil_Email, 
                    string Bil_Cell, 
                    string Bil_Fax, 
                    string Bil_Currency, 
                    string OTC_Type, 
                    double OTC_Charges, 
                    int PaymentTermID, 
                    double MRC_Charges, 
                    int CircuitOwnerID, 
                    string ThirdPartyAccountID, 
                    double OTC_Party, 
                    double MRC_Party, 
                    double InfraCost, 
                    int EquipmentPropertyID, 
                    double EquipmentCost, 
                    double ROI_Month, 
                    double PortCost, 
                    string SiteNature, 
                    double ProjectMRC, 
                    double ProjectOTC, 
                    double ProjectInvestment, 
                    double ProjectPayBack, 
                    int IsAdvancePayment, 
                    double AdvanceAmount, 
                    string ChequeNo, 
                    string ReceiptNo, 
                    int CircuitTypeID, 
                    int BackupInfraID, 
                    int BackupOwnerID, 
                    double BackupOTC, 
                    double BackupMRC, 
                    string SD_SiteA_Interface, 
                    string SD_SiteB_Interface, 
                    string SID_A_Company, 
                    string SID_A_Address, 
                    string SID_Country, 
                    string SID_A_City, 
                    string SID_A_Cell, 
                    string SID_A_Phone, 
                    string SID_A_Fax, 
                    string SID_A_Email, 
                    string SID_B_Company, 
                    string SID_B_Address, 
                    string SID_B_Country, 
                    string SID_B_City, 
                    string SID_B_Cell, 
                    string SID_B_Phone, 
                    string SID_B_Fax, 
                    string SID_B_Email, 
                    int ParentID, 
                    int SiteB, 
                    string GPID, 
                    string ClientRefID, 
                    int PartnerID, 
                    int IsGSAC, 
                    System.DateTime SignupDate, 
                    int SalesPersonID, 
                    System.DateTime OrderDate, 
                    string WorkingDays, 
                    System.DateTime RFSDate, 
                    string Notes, 
                    int StatusID, 
                    int TransactionBy, 
                    int Cus_Mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCustomerSignups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateCustomerSignups(
                    int SignupID, 
                    int LOBID, 
                    int ServiceUnitID, 
                    int InfraID, 
                    int CustomerCode, 
                    int ProjectCode, 
                    int LocationCode, 
                    int CircuitCode, 
                    string CircuitName, 
                    string Address, 
                    string Phone, 
                    string Email, 
                    string Fax, 
                    string Country, 
                    string TD_City, 
                    int CityID, 
                    int AreaID, 
                    int NodeID, 
                    int BusinessTypeID, 
                    string NTN, 
                    string Contact_Name, 
                    string Contact_Department, 
                    string Contact_Designation, 
                    string Contact_Office, 
                    string Contact_Phone, 
                    string Contact_Cell, 
                    string Contact_Fax, 
                    string Contact_Email, 
                    string Contact_SMS, 
                    string CNIC, 
                    System.DateTime CNICExpiryDate, 
                    int PriorityID, 
                    int IsSLA, 
                    string SLA, 
                    int IsBOG, 
                    string BOG, 
                    int IsSignup, 
                    string Signup, 
                    string TD_ConnectivityType, 
                    string TD_BandwidthType, 
                    string TD_CircuitSpeed, 
                    int BandwidthID, 
                    int ULPackageID, 
                    int DLPackageID, 
                    string InfraMedium, 
                    string InfraLength, 
                    int IsAddReq, 
                    int IsVOIP, 
                    int IsVC, 
                    int IsVPN, 
                    int IsExtraIP, 
                    int IsGSAC, 
                    string TD_ContractPeriod, 
                    string Bil_Name, 
                    string Bil_Company, 
                    string Bil_Address, 
                    string Bil_Country, 
                    string Bil_City, 
                    string Bil_PostalCode, 
                    string Bil_Phone, 
                    string Bil_Email, 
                    string Bil_Cell, 
                    string Bil_Fax, 
                    string Bil_Currency, 
                    string OTC_Type, 
                    double OTC_Charges, 
                    int PaymentTermID, 
                    double MRC_Charges, 
                    int CircuitOwnerID, 
                    string ThirdPartyAccountID, 
                    double OTC_Party, 
                    double MRC_Party, 
                    double InfraCost, 
                    int EquipmentPropertyID, 
                    double EquipmentCost, 
                    double ROI_Month, 
                    double PortCost, 
                    string SiteNature, 
                    double ProjectMRC, 
                    double ProjectOTC, 
                    double ProjectInvestment, 
                    double ProjectPayBack, 
                    int IsAdvancePayment, 
                    double AdvanceAmount, 
                    string ChequeNo, 
                    string ReceiptNo, 
                    int CircuitTypeID, 
                    int BackupInfraID, 
                    int BackupOwnerID, 
                    double BackupOTC, 
                    double BackupMRC, 
                    string SD_SiteA_Interface, 
                    string SD_SiteB_Interface, 
                    string SID_A_Company, 
                    string SID_A_Address, 
                    string SID_Country, 
                    string SID_A_City, 
                    string SID_A_Cell, 
                    string SID_A_Phone, 
                    string SID_A_Fax, 
                    string SID_A_Email, 
                    string SID_B_Company, 
                    string SID_B_Address, 
                    string SID_B_Country, 
                    string SID_B_City, 
                    string SID_B_Cell, 
                    string SID_B_Phone, 
                    string SID_B_Fax, 
                    string SID_B_Email, 
                    int ParentID, 
                    int SiteB, 
                    string GPID, 
                    string ContractID, 
                    string ClientRefID, 
                    int PartnerID, 
                    int IsBluechip, 
                    int IsRelocate, 
                    System.DateTime SignupDate, 
                    int SalesPersonID, 
                    System.DateTime OrderDate, 
                    string WorkingDays, 
                    System.DateTime RFSDate, 
                    string Notes, 
                    int StatusID, 
                    int TransactionBy, 
                    string BSSCODE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRelocateHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetRelocateHistory(int SignupID, int AddID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateChildByParentID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateChildByParentID(long ParentID, string ChildID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeAssociateChilds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeAssociateChilds(string ChildID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNewCircuitCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNewCircuitCode(int CustomerCode, int ProjectCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerSignupsView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomerSignupsView(string BSSCode, string Company, int OrderId, string Infra, string Status, string CMSID, string GPID, int CityID, int OwnerID, int CircuitOwnerID, int CustomerCode, int ProjectCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSearchOrdersByCompanyAndOrderNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSearchOrdersByCompanyAndOrderNo(string Company, string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetViewOrderBySignupID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetViewOrderBySignupID(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSearchOrdersByCompanyAndServiceNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSearchOrdersByCompanyAndServiceNo(string Company, string ServiceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTDMSearchOrderbyOrderNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTDMSearchOrderbyOrderNo(string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerSignupsbySignupID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCustomerSignupsbySignupID(int SignupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetViewOrderByOrderNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetViewOrderByOrderNo(string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCircuitName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCircuitName(string CircuitName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OrderNotificationMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool OrderNotificationMail(int Lob, int ServiceUnit, int Infra, string stage, string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OrderNotificationMailforTDM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool OrderNotificationMailforTDM(int Lob, int ServiceUnit, int Infra, string stage, string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Customer_Email", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Customer_Email(string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CustomerMailofTDM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CustomerMailofTDM(string OrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertArea", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertArea(string area, int CityID, int IsActive, string TransBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertSalesperson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertSalesperson(int InfraID, string SalesPersonName, int IsActive);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadICS_Attachment", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadICS_AttachmentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadICS_AttachmentRequest() {
        }
        
        public UploadICS_AttachmentRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadICS_AttachmentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadICS_AttachmentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadICS_AttachmentResult;
        
        public UploadICS_AttachmentResponse() {
        }
        
        public UploadICS_AttachmentResponse(string UploadICS_AttachmentResult) {
            this.UploadICS_AttachmentResult = UploadICS_AttachmentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadVSFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadVSFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadVSFileRequest() {
        }
        
        public UploadVSFileRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadVSFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadVSFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadVSFileResult;
        
        public UploadVSFileResponse() {
        }
        
        public UploadVSFileResponse(string UploadVSFileResult) {
            this.UploadVSFileResult = UploadVSFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadVSFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadVSFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadVSFileRequest() {
        }
        
        public DownloadVSFileRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadVSFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadVSFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadVSFileResult;
        
        public DownloadVSFileResponse() {
        }
        
        public DownloadVSFileResponse(byte[] DownloadVSFileResult) {
            this.DownloadVSFileResult = DownloadVSFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadCOAFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadCOAFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadCOAFileRequest() {
        }
        
        public UploadCOAFileRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadCOAFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadCOAFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadCOAFileResult;
        
        public UploadCOAFileResponse() {
        }
        
        public UploadCOAFileResponse(string UploadCOAFileResult) {
            this.UploadCOAFileResult = UploadCOAFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadCOAFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadCOAFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadCOAFileRequest() {
        }
        
        public DownloadCOAFileRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadCOAFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadCOAFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadCOAFileResult;
        
        public DownloadCOAFileResponse() {
        }
        
        public DownloadCOAFileResponse(byte[] DownloadCOAFileResult) {
            this.DownloadCOAFileResult = DownloadCOAFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadOTS_Attachment", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadOTS_AttachmentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadOTS_AttachmentRequest() {
        }
        
        public UploadOTS_AttachmentRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadOTS_AttachmentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadOTS_AttachmentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadOTS_AttachmentResult;
        
        public UploadOTS_AttachmentResponse() {
        }
        
        public UploadOTS_AttachmentResponse(string UploadOTS_AttachmentResult) {
            this.UploadOTS_AttachmentResult = UploadOTS_AttachmentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadOTSFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadOTSFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadOTSFileRequest() {
        }
        
        public DownloadOTSFileRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadOTSFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadOTSFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadOTSFileResult;
        
        public DownloadOTSFileResponse() {
        }
        
        public DownloadOTSFileResponse(byte[] DownloadOTSFileResult) {
            this.DownloadOTSFileResult = DownloadOTSFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileSLA", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileSLARequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadFileSLARequest() {
        }
        
        public UploadFileSLARequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileSLAResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileSLAResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileSLAResult;
        
        public UploadFileSLAResponse() {
        }
        
        public UploadFileSLAResponse(string UploadFileSLAResult) {
            this.UploadFileSLAResult = UploadFileSLAResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileBOG", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileBOGRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadFileBOGRequest() {
        }
        
        public UploadFileBOGRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileBOGResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileBOGResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileBOGResult;
        
        public UploadFileBOGResponse() {
        }
        
        public UploadFileBOGResponse(string UploadFileBOGResult) {
            this.UploadFileBOGResult = UploadFileBOGResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileSignup", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileSignupRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadFileSignupRequest() {
        }
        
        public UploadFileSignupRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileSignupResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileSignupResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileSignupResult;
        
        public UploadFileSignupResponse() {
        }
        
        public UploadFileSignupResponse(string UploadFileSignupResult) {
            this.UploadFileSignupResult = UploadFileSignupResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileMSC", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileMSCRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadFileMSCRequest() {
        }
        
        public UploadFileMSCRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileMSCResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileMSCResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileMSCResult;
        
        public UploadFileMSCResponse() {
        }
        
        public UploadFileMSCResponse(string UploadFileMSCResult) {
            this.UploadFileMSCResult = UploadFileMSCResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileSignup", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileSignupRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadFileSignupRequest() {
        }
        
        public DownloadFileSignupRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileSignupResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileSignupResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileSignupResult;
        
        public DownloadFileSignupResponse() {
        }
        
        public DownloadFileSignupResponse(byte[] DownloadFileSignupResult) {
            this.DownloadFileSignupResult = DownloadFileSignupResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadManual", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadManualRequest {
        
        public DownloadManualRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadManualResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadManualResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadManualResult;
        
        public DownloadManualResponse() {
        }
        
        public DownloadManualResponse(byte[] DownloadManualResult) {
            this.DownloadManualResult = DownloadManualResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileSLD", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileSLDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadFileSLDRequest() {
        }
        
        public DownloadFileSLDRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileSLDResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileSLDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileSLDResult;
        
        public DownloadFileSLDResponse() {
        }
        
        public DownloadFileSLDResponse(byte[] DownloadFileSLDResult) {
            this.DownloadFileSLDResult = DownloadFileSLDResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileBCase", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileBCaseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadFileBCaseRequest() {
        }
        
        public DownloadFileBCaseRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileBCaseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileBCaseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileBCaseResult;
        
        public DownloadFileBCaseResponse() {
        }
        
        public DownloadFileBCaseResponse(byte[] DownloadFileBCaseResult) {
            this.DownloadFileBCaseResult = DownloadFileBCaseResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileND", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileNDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadFileNDRequest() {
        }
        
        public UploadFileNDRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileNDResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileNDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileNDResult;
        
        public UploadFileNDResponse() {
        }
        
        public UploadFileNDResponse(string UploadFileNDResult) {
            this.UploadFileNDResult = UploadFileNDResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileND", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileNDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadFileNDRequest() {
        }
        
        public DownloadFileNDRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileNDResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileNDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileNDResult;
        
        public DownloadFileNDResponse() {
        }
        
        public DownloadFileNDResponse(byte[] DownloadFileNDResult) {
            this.DownloadFileNDResult = DownloadFileNDResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadNOCFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadNOCFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadNOCFileRequest() {
        }
        
        public UploadNOCFileRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadNOCFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadNOCFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadNOCFileResult;
        
        public UploadNOCFileResponse() {
        }
        
        public UploadNOCFileResponse(string UploadNOCFileResult) {
            this.UploadNOCFileResult = UploadNOCFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadNOCFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadNOCFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadNOCFileRequest() {
        }
        
        public DownloadNOCFileRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadNOCFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadNOCFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadNOCFileResult;
        
        public DownloadNOCFileResponse() {
        }
        
        public DownloadNOCFileResponse(byte[] DownloadNOCFileResult) {
            this.DownloadNOCFileResult = DownloadNOCFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadTXNFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadTXNFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadTXNFileRequest() {
        }
        
        public UploadTXNFileRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadTXNFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadTXNFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadTXNFileResult;
        
        public UploadTXNFileResponse() {
        }
        
        public UploadTXNFileResponse(string UploadTXNFileResult) {
            this.UploadTXNFileResult = UploadTXNFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadTXNFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadTXNFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadTXNFileRequest() {
        }
        
        public DownloadTXNFileRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadTXNFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadTXNFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadTXNFileResult;
        
        public DownloadTXNFileResponse() {
        }
        
        public DownloadTXNFileResponse(byte[] DownloadTXNFileResult) {
            this.DownloadTXNFileResult = DownloadTXNFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadCustomerImage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadCustomerImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadCustomerImageRequest() {
        }
        
        public UploadCustomerImageRequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadCustomerImageResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadCustomerImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UploadCustomerImageResult;
        
        public UploadCustomerImageResponse() {
        }
        
        public UploadCustomerImageResponse(bool UploadCustomerImageResult) {
            this.UploadCustomerImageResult = UploadCustomerImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadCustomerImage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadCustomerImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadCustomerImageRequest() {
        }
        
        public DownloadCustomerImageRequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadCustomerImageResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadCustomerImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadCustomerImageResult;
        
        public DownloadCustomerImageResponse() {
        }
        
        public DownloadCustomerImageResponse(byte[] DownloadCustomerImageResult) {
            this.DownloadCustomerImageResult = DownloadCustomerImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileMEMO", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileMEMORequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] picture;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string filename;
        
        public UploadFileMEMORequest() {
        }
        
        public UploadFileMEMORequest(byte[] picture, string filename) {
            this.picture = picture;
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileMEMOResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileMEMOResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileMEMOResult;
        
        public UploadFileMEMOResponse() {
        }
        
        public UploadFileMEMOResponse(string UploadFileMEMOResult) {
            this.UploadFileMEMOResult = UploadFileMEMOResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileMEMO", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileMEMORequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        public DownloadFileMEMORequest() {
        }
        
        public DownloadFileMEMORequest(string filename) {
            this.filename = filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileMEMOResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileMEMOResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileMEMOResult;
        
        public DownloadFileMEMOResponse() {
        }
        
        public DownloadFileMEMOResponse(byte[] DownloadFileMEMOResult) {
            this.DownloadFileMEMOResult = DownloadFileMEMOResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Service1SoapChannel : RainMaker.BSS_Service.Service1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1SoapClient : System.ServiceModel.ClientBase<RainMaker.BSS_Service.Service1Soap>, RainMaker.BSS_Service.Service1Soap {
        
        public Service1SoapClient() {
        }
        
        public Service1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool VSInventoryAllocation(int SignupID, int SeriesID, int DiDRangeCount, int StartRange, int TransactionBy) {
            return base.Channel.VSInventoryAllocation(SignupID, SeriesID, DiDRangeCount, StartRange, TransactionBy);
        }
        
        public System.Data.DataTable VSInventoryVerification(int SeriesID, int DiDRangeCount, int StartRange) {
            return base.Channel.VSInventoryVerification(SeriesID, DiDRangeCount, StartRange);
        }
        
        public bool UpdateFLLDeployment(
                    int ID, 
                    int SignupID, 
                    int ProductDetailsID, 
                    int ProductTypeID, 
                    string ChannelQuantity, 
                    int IsCPEInstalled, 
                    int VCID, 
                    string CPEUsername, 
                    string CPEPassword, 
                    string CPELocation, 
                    int Extension, 
                    string AllocatedMasterNumber, 
                    string Domain, 
                    string IPPool, 
                    string BroadCast, 
                    string SubnetMask, 
                    string Gateway, 
                    string IPRange, 
                    int VASID, 
                    string ForwardingNumber, 
                    int AdHOCQuantity, 
                    int CBQuantity, 
                    int RoutingID, 
                    string InternationalSpecific, 
                    int IsPABX, 
                    int PABXModelID, 
                    int IsUAN, 
                    string UANNumber, 
                    string UANBackendNumber, 
                    int IsTFN, 
                    string TFNNumber, 
                    string TFNBackendNumber, 
                    string OtherPasswords, 
                    string SSHTelnetPort, 
                    string FLLVLAN, 
                    System.DateTime ConfiguredDate, 
                    string Remarks, 
                    int TransactionBy) {
            return base.Channel.UpdateFLLDeployment(ID, SignupID, ProductDetailsID, ProductTypeID, ChannelQuantity, IsCPEInstalled, VCID, CPEUsername, CPEPassword, CPELocation, Extension, AllocatedMasterNumber, Domain, IPPool, BroadCast, SubnetMask, Gateway, IPRange, VASID, ForwardingNumber, AdHOCQuantity, CBQuantity, RoutingID, InternationalSpecific, IsPABX, PABXModelID, IsUAN, UANNumber, UANBackendNumber, IsTFN, TFNNumber, TFNBackendNumber, OtherPasswords, SSHTelnetPort, FLLVLAN, ConfiguredDate, Remarks, TransactionBy);
        }
        
        public System.Data.DataTable GetFLLDeploymentDetails(int SignupID) {
            return base.Channel.GetFLLDeploymentDetails(SignupID);
        }
        
        public System.Data.DataTable SearchFLLProvisonCricuits(
                    int SignupID, 
                    string BSSCODE, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    int CircuitTypeID, 
                    int CityID, 
                    int InfraID, 
                    int CircuitOwnerID, 
                    int CircuitStatusID, 
                    int CustomerCode, 
                    int NodeID, 
                    int RoutingID, 
                    int ProductsDetailID, 
                    int ProductTypeID, 
                    int AggregationTypeID, 
                    int SeriesID, 
                    int VASID) {
            return base.Channel.SearchFLLProvisonCricuits(SignupID, BSSCODE, CMSID, GPID, CircuitName, CircuitTypeID, CityID, InfraID, CircuitOwnerID, CircuitStatusID, CustomerCode, NodeID, RoutingID, ProductsDetailID, ProductTypeID, AggregationTypeID, SeriesID, VASID);
        }
        
        public System.Data.DataTable VerifyFLLIpAddress(string IpAddress1, string IpAddress2) {
            return base.Channel.VerifyFLLIpAddress(IpAddress1, IpAddress2);
        }
        
        public object StatusActionByFLL(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag) {
            return base.Channel.StatusActionByFLL(SignupID, ActivationDate, LastActionRemarks, TransactionBy, Flag);
        }
        
        public bool FLLStatusActionEmail(int SignupID, string StatusFlag, string EmailStage) {
            return base.Channel.FLLStatusActionEmail(SignupID, StatusFlag, EmailStage);
        }
        
        public bool InsertDefaultInSD(int SignupID, string Notes, int TransactionBy) {
            return base.Channel.InsertDefaultInSD(SignupID, Notes, TransactionBy);
        }
        
        public System.Data.DataTable GetFiberDetailsLogs(int SignupID) {
            return base.Channel.GetFiberDetailsLogs(SignupID);
        }
        
        public bool InsertFLLExtraIP(int SignupID, string ExtraIp_NetworkIP, string ExtraIP_BroadCast, string ExtraIp_SubnetMask, string ExtraIp_IpRange, int TransactionBy) {
            return base.Channel.InsertFLLExtraIP(SignupID, ExtraIp_NetworkIP, ExtraIP_BroadCast, ExtraIp_SubnetMask, ExtraIp_IpRange, TransactionBy);
        }
        
        public System.Data.DataTable GetFLLExtraIP(int SignupID) {
            return base.Channel.GetFLLExtraIP(SignupID);
        }
        
        public bool Ldap_Authentication(string Username, string Password) {
            return base.Channel.Ldap_Authentication(Username, Password);
        }
        
        public bool SendSMS(string Stage, string Number, string Message, int UserID) {
            return base.Channel.SendSMS(Stage, Number, Message, UserID);
        }
        
        public System.Data.DataTable GetEmployeeViaGroup(int GroupID, int CityID) {
            return base.Channel.GetEmployeeViaGroup(GroupID, CityID);
        }
        
        public System.Data.DataTable GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Data.DataTable GetActivityType() {
            return base.Channel.GetActivityType();
        }
        
        public System.Data.DataTable GetActivityStatus() {
            return base.Channel.GetActivityStatus();
        }
        
        public System.Data.DataTable GetCloserRemarks() {
            return base.Channel.GetCloserRemarks();
        }
        
        public System.Data.DataTable GetActivitySales(string UserID) {
            return base.Channel.GetActivitySales(UserID);
        }
        
        public System.Data.DataTable GetCustomerContact(string RefID) {
            return base.Channel.GetCustomerContact(RefID);
        }
        
        public System.Data.DataTable GetOpportunity(string RefID) {
            return base.Channel.GetOpportunity(RefID);
        }
        
        public bool InsertActivitySales(
                    string Subject, 
                    string CustCode, 
                    string Account, 
                    string Address, 
                    string POC, 
                    string SubRefID, 
                    string Opportunity, 
                    string ActivityDate, 
                    string ActivityTime, 
                    string ActivityTypeID, 
                    string ActivityStatus, 
                    string ActivityOwner, 
                    string Remarks, 
                    string CloserRemarks, 
                    string Attachment, 
                    string IsActive, 
                    string TransactionBy, 
                    string TransactionDateTime) {
            return base.Channel.InsertActivitySales(Subject, CustCode, Account, Address, POC, SubRefID, Opportunity, ActivityDate, ActivityTime, ActivityTypeID, ActivityStatus, ActivityOwner, Remarks, CloserRemarks, Attachment, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public bool UpdateActivitySales(string ActivityID, string Subject, string CustCode, string Account, string Address, string POC, string SubRefID, string Opportunity, string ActivityDate, string ActivityTime, string ActivityTypeID, string ActivityStatus, string ActivityOwner, string Remarks, string CloserRemarks) {
            return base.Channel.UpdateActivitySales(ActivityID, Subject, CustCode, Account, Address, POC, SubRefID, Opportunity, ActivityDate, ActivityTime, ActivityTypeID, ActivityStatus, ActivityOwner, Remarks, CloserRemarks);
        }
        
        public System.Data.DataTable SearchOpportunity(string Where, int LOBID) {
            return base.Channel.SearchOpportunity(Where, LOBID);
        }
        
        public System.Data.DataTable GetModuleNameViaRole(int RoleID) {
            return base.Channel.GetModuleNameViaRole(RoleID);
        }
        
        public System.Data.DataTable GetFormsViaRole_ModuleId(int RoleID, int ModuleID) {
            return base.Channel.GetFormsViaRole_ModuleId(RoleID, ModuleID);
        }
        
        public System.Data.DataTable Noctt_GetTicketStatus(int TicketStatusID, int IsActive) {
            return base.Channel.Noctt_GetTicketStatus(TicketStatusID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetTicketOwner(int TicketOwnerID, int RegionID, int IsActive) {
            return base.Channel.Noctt_GetTicketOwner(TicketOwnerID, RegionID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetAlertEmail(int ID) {
            return base.Channel.Noctt_GetAlertEmail(ID);
        }
        
        public System.Data.DataTable Noctt_GetTicketNo(int CityID, string Priority, int TicketTypeID, int ModeofTicketID) {
            return base.Channel.Noctt_GetTicketNo(CityID, Priority, TicketTypeID, ModeofTicketID);
        }
        
        public System.Data.DataTable Noctt_GetTTNode(int NodeID, int CityID, int IsActive) {
            return base.Channel.Noctt_GetTTNode(NodeID, CityID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetTicketDetails(int TicketID) {
            return base.Channel.Noctt_GetTicketDetails(TicketID);
        }
        
        public int Noctt_InsertTicket(
                    string TicketNo, 
                    int TicketTypeID, 
                    int ModeofTicketID, 
                    int TicketStatusID, 
                    string Priority, 
                    int TicketOwnerID, 
                    int EscalatedPersonID, 
                    int IssueOnID, 
                    int NodeAID, 
                    int NodeBID, 
                    string Connectivity, 
                    int ImpactID, 
                    System.DateTime ETTR, 
                    System.DateTime FaultOccured, 
                    System.DateTime FaultCleared, 
                    int FaultID, 
                    int RFOID, 
                    string Notes, 
                    int TransactionBy) {
            return base.Channel.Noctt_InsertTicket(TicketNo, TicketTypeID, ModeofTicketID, TicketStatusID, Priority, TicketOwnerID, EscalatedPersonID, IssueOnID, NodeAID, NodeBID, Connectivity, ImpactID, ETTR, FaultOccured, FaultCleared, FaultID, RFOID, Notes, TransactionBy);
        }
        
        public bool Noctt_UpdateTicket(int TicketID, int TicketStatusID, System.DateTime ETTR, System.DateTime FaultCleared, int FaultID, int RFOID, int TicketTypeID, int ModeofTicketID, string Priority, int TicketOwnerID, int EscalatedPersonID, System.DateTime FaultOccured, string Notes, int TransactionBy) {
            return base.Channel.Noctt_UpdateTicket(TicketID, TicketStatusID, ETTR, FaultCleared, FaultID, RFOID, TicketTypeID, ModeofTicketID, Priority, TicketOwnerID, EscalatedPersonID, FaultOccured, Notes, TransactionBy);
        }
        
        public bool Noctt_EmailAlert(int TicketID, int IsBroadBand, int IsSupport, int IsNOC, int IsOptix, int IsOptixSupport) {
            return base.Channel.Noctt_EmailAlert(TicketID, IsBroadBand, IsSupport, IsNOC, IsOptix, IsOptixSupport);
        }
        
        public System.Data.DataTable Noctt_SearchTickets(string TicketNo, int TicketOwnerID, int IssueOnID, int RegionID, int CityID, int NodeAID, int TicketTypeID, int ModeofTicketID, int TicketStatusID, string Connectivity, int ImpactID, int FaultID, int RFOID, System.DateTime ToDate, System.DateTime FromDate) {
            return base.Channel.Noctt_SearchTickets(TicketNo, TicketOwnerID, IssueOnID, RegionID, CityID, NodeAID, TicketTypeID, ModeofTicketID, TicketStatusID, Connectivity, ImpactID, FaultID, RFOID, ToDate, FromDate);
        }
        
        public System.Data.DataTable GetCircuitforICS(int SignupID, string CMSID, string CircuitName, string GPID, int RegionID, int CityID, int RingID, int NodeID, int CustomerCode, string IPAddress, int StatusID, int InfraID, int ServiceUnitID, int IsGSAC) {
            return base.Channel.GetCircuitforICS(SignupID, CMSID, CircuitName, GPID, RegionID, CityID, RingID, NodeID, CustomerCode, IPAddress, StatusID, InfraID, ServiceUnitID, IsGSAC);
        }
        
        public System.Data.DataTable GetICS_ComplaintType(int ComplaintTypeID, string ComplaintType, int IsActive) {
            return base.Channel.GetICS_ComplaintType(ComplaintTypeID, ComplaintType, IsActive);
        }
        
        public System.Data.DataTable GetICS_ModeofComplain(int ModeofComplaintID, string ModeofComplaint, int IsActive) {
            return base.Channel.GetICS_ModeofComplain(ModeofComplaintID, ModeofComplaint, IsActive);
        }
        
        public System.Data.DataTable GetICS_GetProblemDignoseEnd(int ProblemDignoseEndID, string ProblemDignoseEnd, int IsActive) {
            return base.Channel.GetICS_GetProblemDignoseEnd(ProblemDignoseEndID, ProblemDignoseEnd, IsActive);
        }
        
        public System.Data.DataTable GetICS_GetRFO(int RFOID, string RFO, int IsActive) {
            return base.Channel.GetICS_GetRFO(RFOID, RFO, IsActive);
        }
        
        public System.Data.DataTable GetICS_GetServerityLevel() {
            return base.Channel.GetICS_GetServerityLevel();
        }
        
        public System.Data.DataTable GetICS_ComplainImpact() {
            return base.Channel.GetICS_ComplainImpact();
        }
        
        public System.Data.DataTable GetICS_AssignedDepartment() {
            return base.Channel.GetICS_AssignedDepartment();
        }
        
        public System.Data.DataTable GetICS_GetComplainStatus() {
            return base.Channel.GetICS_GetComplainStatus();
        }
        
        public System.Data.DataTable GetICS_GetComplainOwner() {
            return base.Channel.GetICS_GetComplainOwner();
        }
        
        public System.Data.DataTable GetICS_GetLinkStatus() {
            return base.Channel.GetICS_GetLinkStatus();
        }
        
        public System.Data.DataTable GetICS_GetEmailAddress(int SignupID, int IsActive, int IsPartner) {
            return base.Channel.GetICS_GetEmailAddress(SignupID, IsActive, IsPartner);
        }
        
        public System.Data.DataTable GetICS_LoggedBy() {
            return base.Channel.GetICS_LoggedBy();
        }
        
        public System.Data.DataTable GetICS_ComplainFault() {
            return base.Channel.GetICS_ComplainFault();
        }
        
        public int GetICS_ComplainTicket(string DeptCode, string InfraCode) {
            return base.Channel.GetICS_ComplainTicket(DeptCode, InfraCode);
        }
        
        public string GetICS_TotalHoldDuration(int ComplaintID) {
            return base.Channel.GetICS_TotalHoldDuration(ComplaintID);
        }
        
        public int GetICS_ParentTicket(string DeptCode) {
            return base.Channel.GetICS_ParentTicket(DeptCode);
        }
        
        public int InsertICS_Complain(
                    int ComplaintID, 
                    int SignupID, 
                    string TicketNo, 
                    System.DateTime FaultOccureDateTime, 
                    int ComplaintLoggedByID, 
                    int ComplaintTypeID, 
                    int ModeofComplaintID, 
                    int ImpactID, 
                    int ComplaintStatusID, 
                    int ComplainOwnerID, 
                    int LinkStatusID, 
                    int IsETTR, 
                    System.DateTime ETRR_DateTime, 
                    int IsETA, 
                    System.DateTime ETA_DateTime, 
                    int ServerityLevelID, 
                    string Fault, 
                    string FaultLocation, 
                    int ComplainSolvedByID, 
                    System.DateTime FaultClearedDateTime, 
                    int ProblemDignoseEndID, 
                    int RFOID, 
                    int ComplaintClosedByID, 
                    System.DateTime ComplainCloseDateTime, 
                    string Remarks, 
                    int ForwardToDepartID, 
                    string ParentTicket, 
                    int ModuleDeptID, 
                    int TransactionByID) {
            return base.Channel.InsertICS_Complain(ComplaintID, SignupID, TicketNo, FaultOccureDateTime, ComplaintLoggedByID, ComplaintTypeID, ModeofComplaintID, ImpactID, ComplaintStatusID, ComplainOwnerID, LinkStatusID, IsETTR, ETRR_DateTime, IsETA, ETA_DateTime, ServerityLevelID, Fault, FaultLocation, ComplainSolvedByID, FaultClearedDateTime, ProblemDignoseEndID, RFOID, ComplaintClosedByID, ComplainCloseDateTime, Remarks, ForwardToDepartID, ParentTicket, ModuleDeptID, TransactionByID);
        }
        
        public bool UpdateICS_Complain(
                    int ComplaintID, 
                    System.DateTime FaultOccureDateTime, 
                    int ComplaintTypeID, 
                    int ModeofComplaintID, 
                    int ImpactID, 
                    int ComplaintStatusID, 
                    int ComplainOwnerID, 
                    int LinkStatusID, 
                    int IsETTR, 
                    System.DateTime ETRR_DateTime, 
                    int IsETA, 
                    System.DateTime ETA_DateTime, 
                    int ServerityLevelID, 
                    string Fault, 
                    string FaultLocation, 
                    int ComplainSolvedByID, 
                    System.DateTime FaultClearedDateTime, 
                    int ProblemDignoseEndID, 
                    int RFOID, 
                    int ComplaintClosedByID, 
                    System.DateTime ComplainCloseDateTime, 
                    string Remarks, 
                    int IsHold, 
                    System.DateTime HoldDateTime, 
                    System.DateTime UnHoldDateTime, 
                    string HoldRemarks, 
                    string HoldFlag, 
                    int ForwardToDepartID, 
                    int ForwardByDepartID, 
                    int TransactionByID) {
            return base.Channel.UpdateICS_Complain(ComplaintID, FaultOccureDateTime, ComplaintTypeID, ModeofComplaintID, ImpactID, ComplaintStatusID, ComplainOwnerID, LinkStatusID, IsETTR, ETRR_DateTime, IsETA, ETA_DateTime, ServerityLevelID, Fault, FaultLocation, ComplainSolvedByID, FaultClearedDateTime, ProblemDignoseEndID, RFOID, ComplaintClosedByID, ComplainCloseDateTime, Remarks, IsHold, HoldDateTime, UnHoldDateTime, HoldRemarks, HoldFlag, ForwardToDepartID, ForwardByDepartID, TransactionByID);
        }
        
        public System.Data.DataTable SearchICS_ComplainCircuits(
                    string TicketNo, 
                    int SignupID, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    int CityID, 
                    int OwnerID, 
                    int CustomerCode, 
                    int NodeID, 
                    int ComplainStatusID, 
                    int ComplainTypeID, 
                    int OpenedByID, 
                    int ModeOFComplaintID, 
                    int ComplaintImpactID, 
                    int ProblemDignosedAt, 
                    int AssignedDepartID, 
                    int RFOID, 
                    System.DateTime ToDate, 
                    System.DateTime FromDate, 
                    int Count, 
                    string Flag, 
                    string ParentTicket, 
                    int ModuleDeptID) {
            return base.Channel.SearchICS_ComplainCircuits(TicketNo, SignupID, CMSID, GPID, CircuitName, CityID, OwnerID, CustomerCode, NodeID, ComplainStatusID, ComplainTypeID, OpenedByID, ModeOFComplaintID, ComplaintImpactID, ProblemDignosedAt, AssignedDepartID, RFOID, ToDate, FromDate, Count, Flag, ParentTicket, ModuleDeptID);
        }
        
        public System.Data.DataTable GetICS_ComplainDetails(int ComplaintID) {
            return base.Channel.GetICS_ComplainDetails(ComplaintID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadICS_AttachmentResponse RainMaker.BSS_Service.Service1Soap.UploadICS_Attachment(RainMaker.BSS_Service.UploadICS_AttachmentRequest request) {
            return base.Channel.UploadICS_Attachment(request);
        }
        
        public string UploadICS_Attachment(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadICS_AttachmentRequest inValue = new RainMaker.BSS_Service.UploadICS_AttachmentRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadICS_AttachmentResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadICS_Attachment(inValue);
            return retVal.UploadICS_AttachmentResult;
        }
        
        public System.Data.DataTable GetICS_ComplainHistory(int ComplaintID, int Flag) {
            return base.Channel.GetICS_ComplainHistory(ComplaintID, Flag);
        }
        
        public bool GetICS_InternalEmail(string[] ID, string[] SigID) {
            return base.Channel.GetICS_InternalEmail(ID, SigID);
        }
        
        public bool GetICS_ExternalEmail(int ComplaintID, int IsAttachment, string FileName, string ToEmail) {
            return base.Channel.GetICS_ExternalEmail(ComplaintID, IsAttachment, FileName, ToEmail);
        }
        
        public bool GetICS_ExternalPartnerEmail(int ComplaintID, int IsAttachment, string FileName, string ToEmail) {
            return base.Channel.GetICS_ExternalPartnerEmail(ComplaintID, IsAttachment, FileName, ToEmail);
        }
        
        public System.Data.DataTable ICS_ExtractReport(int CityID, int CustomerCode, int NodeID, int ComplainTypeID, int ModeOFComplaintID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.ICS_ExtractReport(CityID, CustomerCode, NodeID, ComplainTypeID, ModeOFComplaintID, FromDate, ToDate);
        }
        
        public System.Data.DataTable GetCircuitCount(int StatusID, int InfraID) {
            return base.Channel.GetCircuitCount(StatusID, InfraID);
        }
        
        public System.Data.DataTable GetComplainCount(int ComplaintStatusID, int AssignedDeptID) {
            return base.Channel.GetComplainCount(ComplaintStatusID, AssignedDeptID);
        }
        
        public System.Data.DataTable GetDeploymentsCount(System.DateTime dat) {
            return base.Channel.GetDeploymentsCount(dat);
        }
        
        public System.Data.DataTable GetDeploymentsviaInfraMedium(System.DateTime dat) {
            return base.Channel.GetDeploymentsviaInfraMedium(dat);
        }
        
        public System.Data.DataTable GetDeploymentsviaStatus(System.DateTime dat) {
            return base.Channel.GetDeploymentsviaStatus(dat);
        }
        
        public System.Data.DataTable GetDeploymentViaLOB(System.DateTime dat) {
            return base.Channel.GetDeploymentViaLOB(dat);
        }
        
        public object StatusActionByBilling(int SignupID, string LastActionRemarks, int TransactionBy, string Flag) {
            return base.Channel.StatusActionByBilling(SignupID, LastActionRemarks, TransactionBy, Flag);
        }
        
        public bool BillingStatusActionEmail(int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage, string LastActionRemarks, string TransactionByName) {
            return base.Channel.BillingStatusActionEmail(LobID, ServiceUnitID, InfraID, SignupID, StatusFlag, EmailStage, LastActionRemarks, TransactionByName);
        }
        
        public System.Data.DataTable GetVSPackages() {
            return base.Channel.GetVSPackages();
        }
        
        public System.Data.DataTable GetVSATModels(string Flag) {
            return base.Channel.GetVSATModels(Flag);
        }
        
        public System.Data.DataTable GetVSATTypes(int Flag) {
            return base.Channel.GetVSATTypes(Flag);
        }
        
        public int InsertVSATDeployment(
                    int SignupID, 
                    System.DateTime DeploymentDate, 
                    int ModemTypeID, 
                    string ModemSerial, 
                    int ModemModelID, 
                    int BucTypeID, 
                    string BucSerial, 
                    int BucModelID, 
                    int LNBTypeID, 
                    string LNBSerial, 
                    int LNBModelID, 
                    int DishTypeID, 
                    int DishModelID, 
                    int CableTypeID, 
                    string CableLength, 
                    string Stage, 
                    string Notes, 
                    string SvpAttachments, 
                    int TransactionBy, 
                    int CircuitTypeID, 
                    int Pri_NodeID, 
                    int Sec_NodeID) {
            return base.Channel.InsertVSATDeployment(SignupID, DeploymentDate, ModemTypeID, ModemSerial, ModemModelID, BucTypeID, BucSerial, BucModelID, LNBTypeID, LNBSerial, LNBModelID, DishTypeID, DishModelID, CableTypeID, CableLength, Stage, Notes, SvpAttachments, TransactionBy, CircuitTypeID, Pri_NodeID, Sec_NodeID);
        }
        
        public int UpdateVSATDeployment(
                    int DeploymentID, 
                    int SignupID, 
                    System.DateTime DeploymentDate, 
                    int ModemTypeID, 
                    string ModemSerial, 
                    int ModemModelID, 
                    int BucTypeID, 
                    string BucSerial, 
                    int BucModelID, 
                    int LNBTypeID, 
                    string LNBSerial, 
                    int LNBModelID, 
                    int DishTypeID, 
                    int DishModelID, 
                    int CableTypeID, 
                    string CableLength, 
                    string Stage, 
                    string Notes, 
                    string SvpAttachments, 
                    int TransactionBy, 
                    int CircuitTypeID, 
                    int Pri_NodeID, 
                    int Sec_NodeID) {
            return base.Channel.UpdateVSATDeployment(DeploymentID, SignupID, DeploymentDate, ModemTypeID, ModemSerial, ModemModelID, BucTypeID, BucSerial, BucModelID, LNBTypeID, LNBSerial, LNBModelID, DishTypeID, DishModelID, CableTypeID, CableLength, Stage, Notes, SvpAttachments, TransactionBy, CircuitTypeID, Pri_NodeID, Sec_NodeID);
        }
        
        public bool VSAT_InteranlEmail(int DeploymentID, int SignupID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID) {
            return base.Channel.VSAT_InteranlEmail(DeploymentID, SignupID, LOBID, ServcieUnitID, InfraID, Stage, CircuitTypeID);
        }
        
        public System.Data.DataTable GetVSDeploymentDetails(int SignupID) {
            return base.Channel.GetVSDeploymentDetails(SignupID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadVSFileResponse RainMaker.BSS_Service.Service1Soap.UploadVSFile(RainMaker.BSS_Service.UploadVSFileRequest request) {
            return base.Channel.UploadVSFile(request);
        }
        
        public string UploadVSFile(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadVSFileRequest inValue = new RainMaker.BSS_Service.UploadVSFileRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadVSFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadVSFile(inValue);
            return retVal.UploadVSFileResult;
        }
        
        public bool DeleteVSFile(string filename) {
            return base.Channel.DeleteVSFile(filename);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadVSFileResponse RainMaker.BSS_Service.Service1Soap.DownloadVSFile(RainMaker.BSS_Service.DownloadVSFileRequest request) {
            return base.Channel.DownloadVSFile(request);
        }
        
        public byte[] DownloadVSFile(string filename) {
            RainMaker.BSS_Service.DownloadVSFileRequest inValue = new RainMaker.BSS_Service.DownloadVSFileRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadVSFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadVSFile(inValue);
            return retVal.DownloadVSFileResult;
        }
        
        public object StatusActionByVS(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag) {
            return base.Channel.StatusActionByVS(SignupID, ActivationDate, LastActionRemarks, TransactionBy, Flag);
        }
        
        public System.Data.DataTable GetNoticedPeriod() {
            return base.Channel.GetNoticedPeriod();
        }
        
        public System.Data.DataTable GetRequestStatus() {
            return base.Channel.GetRequestStatus();
        }
        
        public System.Data.DataTable GetTerminationReason() {
            return base.Channel.GetTerminationReason();
        }
        
        public System.Data.DataTable GetTerminationSubReason(int TerminationReasonID) {
            return base.Channel.GetTerminationSubReason(TerminationReasonID);
        }
        
        public int InsertCustomerTermination(int TerminationID, int SignupID, System.DateTime CaseReportedAt, string OverallCustomerRevenue, System.DateTime TerminationDate, string NoOfCircuitTerminated, int RequestStatusID, int NoticedPeriodID, int TerminationReasonID, int SubReasonID, string Remarks, string Conclusion, int TransactionBy) {
            return base.Channel.InsertCustomerTermination(TerminationID, SignupID, CaseReportedAt, OverallCustomerRevenue, TerminationDate, NoOfCircuitTerminated, RequestStatusID, NoticedPeriodID, TerminationReasonID, SubReasonID, Remarks, Conclusion, TransactionBy);
        }
        
        public bool UpdateCustomerTermination(int TerminationID, int SignupID, System.DateTime CaseReportedAt, string OverallCustomerRevenue, System.DateTime TerminationDate, string NoOfCircuitTerminated, int RequestStatusID, int NoticedPeriodID, int TerminationReasonID, int SubReasonID, string Remarks, string Conclusion, int TransactionBy) {
            return base.Channel.UpdateCustomerTermination(TerminationID, SignupID, CaseReportedAt, OverallCustomerRevenue, TerminationDate, NoOfCircuitTerminated, RequestStatusID, NoticedPeriodID, TerminationReasonID, SubReasonID, Remarks, Conclusion, TransactionBy);
        }
        
        public bool UpdateSignupDetailsByCTC(int SignupID, System.DateTime MRC_Charges, string RequestStatusID, int TransactionBy) {
            return base.Channel.UpdateSignupDetailsByCTC(SignupID, MRC_Charges, RequestStatusID, TransactionBy);
        }
        
        public System.Data.DataTable GetReportData(
                    string SelectQuery, 
                    int LOBID, 
                    int ServiceUniID, 
                    int InfraID, 
                    int StatusID, 
                    int BusinessTypeID, 
                    int CircuitTypeID, 
                    int CityID, 
                    int Pri_NodeID, 
                    int Pri_OwnerID, 
                    int Pri_ThirdPartyID, 
                    int CustomerCode, 
                    int Sec_NodeID, 
                    int Sec_OwnerID, 
                    int Sec_ThirdPartyID, 
                    int ReportTypeID, 
                    System.DateTime FromDate, 
                    System.DateTime ToDate, 
                    int IsCPMFormate, 
                    int IsNOCFormate) {
            return base.Channel.GetReportData(SelectQuery, LOBID, ServiceUniID, InfraID, StatusID, BusinessTypeID, CircuitTypeID, CityID, Pri_NodeID, Pri_OwnerID, Pri_ThirdPartyID, CustomerCode, Sec_NodeID, Sec_OwnerID, Sec_ThirdPartyID, ReportTypeID, FromDate, ToDate, IsCPMFormate, IsNOCFormate);
        }
        
        public System.Data.DataTable GetReportType() {
            return base.Channel.GetReportType();
        }
        
        public System.Data.DataTable GetROISummary(System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetROISummary(FromDate, ToDate);
        }
        
        public System.Data.DataTable GetComplainsLogs(int LOBID, int ServiceUnitID, int InfraID, int CityID, int CustomerCode, int statusID, int CaseCategoryID, int InitialStatementID, int ComplainTypeID, int AssignedToDepartID, int AssignedByDepartID, System.DateTime ToDate, System.DateTime FromDate) {
            return base.Channel.GetComplainsLogs(LOBID, ServiceUnitID, InfraID, CityID, CustomerCode, statusID, CaseCategoryID, InitialStatementID, ComplainTypeID, AssignedToDepartID, AssignedByDepartID, ToDate, FromDate);
        }
        
        public System.Data.DataTable GetAggerationType() {
            return base.Channel.GetAggerationType();
        }
        
        public System.Data.DataTable GetIPSubnet() {
            return base.Channel.GetIPSubnet();
        }
        
        public System.Data.DataTable GetPABXModel(int ID) {
            return base.Channel.GetPABXModel(ID);
        }
        
        public System.Data.DataTable GetNumberClass() {
            return base.Channel.GetNumberClass();
        }
        
        public System.Data.DataTable GetNumSeries(int CityID, int IsActive) {
            return base.Channel.GetNumSeries(CityID, IsActive);
        }
        
        public System.Data.DataTable GettProductDetails(int IsActive) {
            return base.Channel.GettProductDetails(IsActive);
        }
        
        public System.Data.DataTable GetProductType(int IsActive) {
            return base.Channel.GetProductType(IsActive);
        }
        
        public System.Data.DataTable GetSubRegion(int RegionID, int IsActive) {
            return base.Channel.GetSubRegion(RegionID, IsActive);
        }
        
        public System.Data.DataTable GetRoutingProfile(int IsActive) {
            return base.Channel.GetRoutingProfile(IsActive);
        }
        
        public System.Data.DataTable GetVCVendor(int IsActive) {
            return base.Channel.GetVCVendor(IsActive);
        }
        
        public System.Data.DataTable GetVAServices(int IsActive) {
            return base.Channel.GetVAServices(IsActive);
        }
        
        public bool InsertIPInventory(int NodeID, int SubnetID, string IpAddress, int TransactionBy, int StartOctate) {
            return base.Channel.InsertIPInventory(NodeID, SubnetID, IpAddress, TransactionBy, StartOctate);
        }
        
        public bool InsertVSInventory(int CityID, int SeriesID, int ClassID, int DiDRangeCount, int StartRange, int IsActive, int TransactionBy) {
            return base.Channel.InsertVSInventory(CityID, SeriesID, ClassID, DiDRangeCount, StartRange, IsActive, TransactionBy);
        }
        
        public bool InsertVCInventory(string DeviceType, int VendorID, string PortsE1, string MACAddress, string SerialNumber, int TransactionBy) {
            return base.Channel.InsertVCInventory(DeviceType, VendorID, PortsE1, MACAddress, SerialNumber, TransactionBy);
        }
        
        public System.Data.DataTable SearchIPInventory(int NodeID, int SubnetID, int CityID, int IsFree, int SignupID) {
            return base.Channel.SearchIPInventory(NodeID, SubnetID, CityID, IsFree, SignupID);
        }
        
        public System.Data.DataTable SearchVCInventory(string VCID, string DeviceType, int VendorID, int IsFree) {
            return base.Channel.SearchVCInventory(VCID, DeviceType, VendorID, IsFree);
        }
        
        public System.Data.DataTable SearchVSInventory(int CityID, int SeriesID, string Number, int RegionID, int SubRegionID, int IsFree, int SignupID) {
            return base.Channel.SearchVSInventory(CityID, SeriesID, Number, RegionID, SubRegionID, IsFree, SignupID);
        }
        
        public bool InsertFLLDeployment(
                    int SignupID, 
                    int ActiveID, 
                    int ProductDetailsID, 
                    int ProductTypeID, 
                    string ChannelQuantity, 
                    int IsCPEInstalled, 
                    int Extension, 
                    string AllocatedMasterNumber, 
                    int VASID, 
                    string ForwardingNumber, 
                    int AdHOCQuantity, 
                    int CBQuantity, 
                    int RoutingID, 
                    string IntercnationalSpecific, 
                    int IsPABX, 
                    int PABXModelID, 
                    int IsUAN, 
                    string UANNumber, 
                    string UANBackendNumber, 
                    int IsTFN, 
                    string TFNNumber, 
                    string TFNBackendNumber, 
                    int TransactionBy) {
            return base.Channel.InsertFLLDeployment(SignupID, ActiveID, ProductDetailsID, ProductTypeID, ChannelQuantity, IsCPEInstalled, Extension, AllocatedMasterNumber, VASID, ForwardingNumber, AdHOCQuantity, CBQuantity, RoutingID, IntercnationalSpecific, IsPABX, PABXModelID, IsUAN, UANNumber, UANBackendNumber, IsTFN, TFNNumber, TFNBackendNumber, TransactionBy);
        }
        
        public System.Data.DataTable getCC_DepoymentDetailsbySignupID(int SignupID) {
            return base.Channel.getCC_DepoymentDetailsbySignupID(SignupID);
        }
        
        public System.Data.DataTable GetDCLocation(int IsActive) {
            return base.Channel.GetDCLocation(IsActive);
        }
        
        public System.Data.DataTable GetServerpool(int IsActive) {
            return base.Channel.GetServerpool(IsActive);
        }
        
        public bool InsertOS(string OSName, int IsActive, int TransactionBy) {
            return base.Channel.InsertOS(OSName, IsActive, TransactionBy);
        }
        
        public bool UpdateOS(int OSID, string OSName, int IsActive, int TransactionBy) {
            return base.Channel.UpdateOS(OSID, OSName, IsActive, TransactionBy);
        }
        
        public System.Data.DataTable GetFrequency(int IsActive) {
            return base.Channel.GetFrequency(IsActive);
        }
        
        public bool CC_ActivetConformationMail(int DeploymentID, int SignupID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID) {
            return base.Channel.CC_ActivetConformationMail(DeploymentID, SignupID, LOBID, ServcieUnitID, InfraID, Stage, CircuitTypeID);
        }
        
        public object StatusActionByCC(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag) {
            return base.Channel.StatusActionByCC(SignupID, ActivationDate, LastActionRemarks, TransactionBy, Flag);
        }
        
        public bool StatusActionEmailByCC(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage) {
            return base.Channel.StatusActionEmailByCC(IpProvsionID, LobID, ServiceUnitID, InfraID, SignupID, StatusFlag, EmailStage);
        }
        
        public bool InsertCOA(int SignupID, System.DateTime COADate, System.DateTime BillingDate, string COAAttached, string Notes, int TransactionBy, System.DateTime TransactionDatime, System.DateTime DueDate) {
            return base.Channel.InsertCOA(SignupID, COADate, BillingDate, COAAttached, Notes, TransactionBy, TransactionDatime, DueDate);
        }
        
        public bool UpdateCOA(int COAID, int SignupID, System.DateTime COADate, System.DateTime BillingDate, string COAAttached, string Notes, int TransactionBy, System.DateTime TransactionDatime, System.DateTime DueDate) {
            return base.Channel.UpdateCOA(COAID, SignupID, COADate, BillingDate, COAAttached, Notes, TransactionBy, TransactionDatime, DueDate);
        }
        
        public System.Data.DataTable GetCOADetails(int SignUpID) {
            return base.Channel.GetCOADetails(SignUpID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadCOAFileResponse RainMaker.BSS_Service.Service1Soap.UploadCOAFile(RainMaker.BSS_Service.UploadCOAFileRequest request) {
            return base.Channel.UploadCOAFile(request);
        }
        
        public string UploadCOAFile(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadCOAFileRequest inValue = new RainMaker.BSS_Service.UploadCOAFileRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadCOAFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadCOAFile(inValue);
            return retVal.UploadCOAFileResult;
        }
        
        public bool DeleteCOAFile(string filename) {
            return base.Channel.DeleteCOAFile(filename);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadCOAFileResponse RainMaker.BSS_Service.Service1Soap.DownloadCOAFile(RainMaker.BSS_Service.DownloadCOAFileRequest request) {
            return base.Channel.DownloadCOAFile(request);
        }
        
        public byte[] DownloadCOAFile(string filename) {
            RainMaker.BSS_Service.DownloadCOAFileRequest inValue = new RainMaker.BSS_Service.DownloadCOAFileRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadCOAFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadCOAFile(inValue);
            return retVal.DownloadCOAFileResult;
        }
        
        public bool COAExternalEmail(int SignupID) {
            return base.Channel.COAExternalEmail(SignupID);
        }
        
        public bool COAInternalEmail(int SignupID) {
            return base.Channel.COAInternalEmail(SignupID);
        }
        
        public System.Data.DataTable GetDCStatus() {
            return base.Channel.GetDCStatus();
        }
        
        public System.Data.DataTable GetPDUModels(int IsActive) {
            return base.Channel.GetPDUModels(IsActive);
        }
        
        public System.Data.DataTable GetPDUCapacity(int IsActive) {
            return base.Channel.GetPDUCapacity(IsActive);
        }
        
        public bool InsertPDU(int PDUModelID, int PDUCapacityID, int RackID, string PDUName, int IsActive, int TransactionBy) {
            return base.Channel.InsertPDU(PDUModelID, PDUCapacityID, RackID, PDUName, IsActive, TransactionBy);
        }
        
        public bool UpdatePDU(int PDUID, string PDUName, int PDUModelID, int RackID, int IsActive, int TransactionBy) {
            return base.Channel.UpdatePDU(PDUID, PDUName, PDUModelID, RackID, IsActive, TransactionBy);
        }
        
        public bool UpdatePDUPort(int PDUPortID, int StatusID, int SignupID, int TransactionBy) {
            return base.Channel.UpdatePDUPort(PDUPortID, StatusID, SignupID, TransactionBy);
        }
        
        public System.Data.DataTable GetPDUPorts(int PDUID, int StatusID, int SignupID) {
            return base.Channel.GetPDUPorts(PDUID, StatusID, SignupID);
        }
        
        public System.Data.DataTable SearchPDU(string PDUName, int PDUCapacityID, int PDUModelID, int RackID, int IsActive) {
            return base.Channel.SearchPDU(PDUName, PDUCapacityID, PDUModelID, RackID, IsActive);
        }
        
        public System.Data.DataTable GetRackModels(int IsActive) {
            return base.Channel.GetRackModels(IsActive);
        }
        
        public System.Data.DataTable GetRackCapacity(int IsActive) {
            return base.Channel.GetRackCapacity(IsActive);
        }
        
        public System.Data.DataTable GetRackMeasuringUnit(int IsActive) {
            return base.Channel.GetRackMeasuringUnit(IsActive);
        }
        
        public System.Data.DataTable GetRackPowerFeed(int IsActive) {
            return base.Channel.GetRackPowerFeed(IsActive);
        }
        
        public bool InsertRacks(string RackName, int RackModelID, string Dimension, int RackCapacityID, int PowerFeedID, bool IsSinglePhase, int IsDualPhase, int Is32BreakerRating, int Is64BreakerRating, int ISACPowerSupply, int IsDCPowerSupply, int PowerMeasuringID, int IsActive, string Remarks, int TransactionBy) {
            return base.Channel.InsertRacks(RackName, RackModelID, Dimension, RackCapacityID, PowerFeedID, IsSinglePhase, IsDualPhase, Is32BreakerRating, Is64BreakerRating, ISACPowerSupply, IsDCPowerSupply, PowerMeasuringID, IsActive, Remarks, TransactionBy);
        }
        
        public object UpdateRack(int RackID, string RackName, int RackModelID, string Dimension, string PowerFeedID, bool IsSinglePhase, int IsDualPhase, int Is32BreakerRating, int Is64BreakerRating, int ISACPowerSupply, int IsDCPowerSupply, string PowerMeasuringID, int IsActive, string Remarks, int TransactionBy) {
            return base.Channel.UpdateRack(RackID, RackName, RackModelID, Dimension, PowerFeedID, IsSinglePhase, IsDualPhase, Is32BreakerRating, Is64BreakerRating, ISACPowerSupply, IsDCPowerSupply, PowerMeasuringID, IsActive, Remarks, TransactionBy);
        }
        
        public System.Data.DataTable GetRackUs(int RackID, int StatusID, int SignupID) {
            return base.Channel.GetRackUs(RackID, StatusID, SignupID);
        }
        
        public System.Data.DataTable SearchRack(int RackID, string RackName, int RackModelID, int RackCapacityID, int IsActive) {
            return base.Channel.SearchRack(RackID, RackName, RackModelID, RackCapacityID, IsActive);
        }
        
        public bool UpdateRackUs(int NoOfUID, int StatusID, int SignupID, int TransactionBy) {
            return base.Channel.UpdateRackUs(NoOfUID, StatusID, SignupID, TransactionBy);
        }
        
        public bool InsertPatching(int SignupID, int NoofUs, string ModeofBilling, int DCLocID, System.DateTime ActivationDate, int Internet_SignupID, int MPLSLayer3_SignupID, int MPLSLayer2_SignupID, int FLL_SignupID, int Transit_SignupID, int layer2VPN_SignupID, string Remarks, int TransactionBy) {
            return base.Channel.InsertPatching(SignupID, NoofUs, ModeofBilling, DCLocID, ActivationDate, Internet_SignupID, MPLSLayer3_SignupID, MPLSLayer2_SignupID, FLL_SignupID, Transit_SignupID, layer2VPN_SignupID, Remarks, TransactionBy);
        }
        
        public bool UpdatePatching(int DCPatchingID, int SignupID, int NoofUs, string ModeofBilling, int DCLocID, System.DateTime ActivationDate, int Internet_SignupID, int MPLSLayer3_SignupID, int MPLSLayer2_SignupID, int FLL_SignupID, int Transit_SignupID, int layer2VPN_SignupID, string Remarks, int TransactionBy, int Flag) {
            return base.Channel.UpdatePatching(DCPatchingID, SignupID, NoofUs, ModeofBilling, DCLocID, ActivationDate, Internet_SignupID, MPLSLayer3_SignupID, MPLSLayer2_SignupID, FLL_SignupID, Transit_SignupID, layer2VPN_SignupID, Remarks, TransactionBy, Flag);
        }
        
        public System.Data.DataTable GetDC_PatchingBySignUpID(int SignUpID) {
            return base.Channel.GetDC_PatchingBySignUpID(SignUpID);
        }
        
        public bool DC_ActivetConformationMail(int SignupID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID) {
            return base.Channel.DC_ActivetConformationMail(SignupID, LOBID, ServcieUnitID, InfraID, Stage, CircuitTypeID);
        }
        
        public System.Data.DataTable GetMultiplesDetails(int SignUpID, int RackCount, int RackUsCount, int RackNeed, int RackUNeed, int RackID) {
            return base.Channel.GetMultiplesDetails(SignUpID, RackCount, RackUsCount, RackNeed, RackUNeed, RackID);
        }
        
        public bool UpdateODFPortsByDC(int SignupID, int ODFID, int ODFPortID, string ODFTray, int TransactionBy) {
            return base.Channel.UpdateODFPortsByDC(SignupID, ODFID, ODFPortID, ODFTray, TransactionBy);
        }
        
        public System.Data.DataTable GetTicketType() {
            return base.Channel.GetTicketType();
        }
        
        public System.Data.DataTable GetAssignedDepartment(string Flag) {
            return base.Channel.GetAssignedDepartment(Flag);
        }
        
        public System.Data.DataTable GetProblemDignosedAt(int AssignDeptID) {
            return base.Channel.GetProblemDignosedAt(AssignDeptID);
        }
        
        public System.Data.DataTable GetCaseCategory() {
            return base.Channel.GetCaseCategory();
        }
        
        public System.Data.DataTable GetComplainStatus(string Flag) {
            return base.Channel.GetComplainStatus(Flag);
        }
        
        public System.Data.DataTable GetComplaintReportedVia() {
            return base.Channel.GetComplaintReportedVia();
        }
        
        public System.Data.DataTable GetComplainType() {
            return base.Channel.GetComplainType();
        }
        
        public System.Data.DataTable GetInitialStatement() {
            return base.Channel.GetInitialStatement();
        }
        
        public System.Data.DataTable GetPocStatus() {
            return base.Channel.GetPocStatus();
        }
        
        public System.Data.DataTable GetCustBandwidthIssue() {
            return base.Channel.GetCustBandwidthIssue();
        }
        
        public int GetComplainTicket(string InfraCode, string CircuitCode, string TicketTypeCode) {
            return base.Channel.GetComplainTicket(InfraCode, CircuitCode, TicketTypeCode);
        }
        
        public string GetComplainParentTicket(string CircuitCode, string TicketTypeCode) {
            return base.Channel.GetComplainParentTicket(CircuitCode, TicketTypeCode);
        }
        
        public System.Data.DataTable GetDignosesOptionValues(int IsActive, string OptionType) {
            return base.Channel.GetDignosesOptionValues(IsActive, OptionType);
        }
        
        public System.Data.DataTable GetCircuitCompleteDetail(int SignupID) {
            return base.Channel.GetCircuitCompleteDetail(SignupID);
        }
        
        public System.Data.DataTable GetCircuitforOTS(int SignupID, string CMSID, string CircuitName, string GPID, int RegionID, int CityID, int RingID, int NodeID, int CustomerCode, string IPAddress, int StatusID, int InfraID, int ServiceUnitID, string Primary_CPE_IpAddress) {
            return base.Channel.GetCircuitforOTS(SignupID, CMSID, CircuitName, GPID, RegionID, CityID, RingID, NodeID, CustomerCode, IPAddress, StatusID, InfraID, ServiceUnitID, Primary_CPE_IpAddress);
        }
        
        public int InsertComplain(
                    int SignupID, 
                    string TicketNo, 
                    int InitailStatementID, 
                    int ComplaintTypeID, 
                    int TicketTypeID, 
                    int ComplaintStatusID, 
                    int ProblemDignoseEndID, 
                    string LoggedBy, 
                    int ComplaintReportedviaId, 
                    System.DateTime ComplaintReceivedDate, 
                    string PersonSolving, 
                    int CaseCategoryID, 
                    string CallerName, 
                    string CallerNumber, 
                    string PoCName, 
                    string PoCNumber, 
                    int PoCStatusID, 
                    int AssignedToDeptID, 
                    int AssignedByDeptID, 
                    string FCR, 
                    System.DateTime Hold_UnHoldTime, 
                    string RCA, 
                    string Partner, 
                    int LinkStatusID, 
                    string Location, 
                    string Fault, 
                    string TxnOwner, 
                    System.DateTime ETA, 
                    System.DateTime ETTR, 
                    string PersonGivenETA, 
                    string Remarks, 
                    string QueryResponse, 
                    string IPOpsComments, 
                    string AssignedPersonName, 
                    int TransactionBy) {
            return base.Channel.InsertComplain(SignupID, TicketNo, InitailStatementID, ComplaintTypeID, TicketTypeID, ComplaintStatusID, ProblemDignoseEndID, LoggedBy, ComplaintReportedviaId, ComplaintReceivedDate, PersonSolving, CaseCategoryID, CallerName, CallerNumber, PoCName, PoCNumber, PoCStatusID, AssignedToDeptID, AssignedByDeptID, FCR, Hold_UnHoldTime, RCA, Partner, LinkStatusID, Location, Fault, TxnOwner, ETA, ETTR, PersonGivenETA, Remarks, QueryResponse, IPOpsComments, AssignedPersonName, TransactionBy);
        }
        
        public bool InsertComplainTroubleshooting(
                    string ComplainID, 
                    string NodePortStatus, 
                    string NodePortTrafficStatus, 
                    string NodePortTrafficUtilization, 
                    string NodePortErrDiscard, 
                    string STGTrafficUtilization, 
                    string CTGTrafficUtilization, 
                    string LastMilePowerStatus, 
                    string FiberLEDStatus, 
                    string CPEStaus, 
                    string CEInterfaceStatus, 
                    string CETrafficStatus, 
                    string BandwidthUtilization, 
                    string DeviceRebooted, 
                    string CustomerIPResponses, 
                    string CustomerBandwidthIssue, 
                    string GatewayResponses, 
                    string AssignedDNS, 
                    string DNSResponding, 
                    string IsIPBlockedbyPTA, 
                    string EmailIssueIn, 
                    string EmailDomain, 
                    string MPPLSMTP_POPResponse, 
                    string MPPLSMTP_POPTelnet, 
                    string EmailIssueOn, 
                    string FacingEmailIssueAt, 
                    string ISIPBlackListed, 
                    string ISWebsiteReachable, 
                    string CustomerQuery, 
                    string Remarks) {
            return base.Channel.InsertComplainTroubleshooting(ComplainID, NodePortStatus, NodePortTrafficStatus, NodePortTrafficUtilization, NodePortErrDiscard, STGTrafficUtilization, CTGTrafficUtilization, LastMilePowerStatus, FiberLEDStatus, CPEStaus, CEInterfaceStatus, CETrafficStatus, BandwidthUtilization, DeviceRebooted, CustomerIPResponses, CustomerBandwidthIssue, GatewayResponses, AssignedDNS, DNSResponding, IsIPBlockedbyPTA, EmailIssueIn, EmailDomain, MPPLSMTP_POPResponse, MPPLSMTP_POPTelnet, EmailIssueOn, FacingEmailIssueAt, ISIPBlackListed, ISWebsiteReachable, CustomerQuery, Remarks);
        }
        
        public System.Data.DataTable SearchComplainCircuits(
                    string TicketNo, 
                    int SignupID, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    string TicketType, 
                    int ComplainStatusID, 
                    int CityID, 
                    int OwnerID, 
                    string LoggedBy, 
                    int CaseCategoryID, 
                    int InitialStatementID, 
                    int ProblemDignosedAt, 
                    int ReasonOutageID, 
                    System.DateTime ToDate, 
                    System.DateTime FromDate, 
                    int CustomerCode, 
                    int AssignedDepartID, 
                    int NodeID, 
                    int Count, 
                    string Flag, 
                    int IsFollow, 
                    int ComplaintReportedViaID, 
                    int FwdToDept, 
                    int FwdByDept, 
                    int FwdStatus) {
            return base.Channel.SearchComplainCircuits(TicketNo, SignupID, CMSID, GPID, CircuitName, TicketType, ComplainStatusID, CityID, OwnerID, LoggedBy, CaseCategoryID, InitialStatementID, ProblemDignosedAt, ReasonOutageID, ToDate, FromDate, CustomerCode, AssignedDepartID, NodeID, Count, Flag, IsFollow, ComplaintReportedViaID, FwdToDept, FwdByDept, FwdStatus);
        }
        
        public System.Data.DataTable GetComplainDetailByComplainID(int ComplaintID) {
            return base.Channel.GetComplainDetailByComplainID(ComplaintID);
        }
        
        public System.Data.DataTable GetComplainTroubleShooting_ByComplainID(int ComplaintID) {
            return base.Channel.GetComplainTroubleShooting_ByComplainID(ComplaintID);
        }
        
        public System.Data.DataTable GetReasonOfOutage(int ProblemDignosedAtID, int InfraID, int DepartmentID, int IsActive, int TransactionBy) {
            return base.Channel.GetReasonOfOutage(ProblemDignosedAtID, InfraID, DepartmentID, IsActive, TransactionBy);
        }
        
        public System.Data.DataTable GetcountofCircuits(int SignupID, string CMSID, string GPID, int RegionID, int StatusID, string CustName, int CustomerCode, string Primary_IpAddres, int IsExtraIP, string ExtraIPPool, int InfraID, int ServiceUnitID, string FLAG) {
            return base.Channel.GetcountofCircuits(SignupID, CMSID, GPID, RegionID, StatusID, CustName, CustomerCode, Primary_IpAddres, IsExtraIP, ExtraIPPool, InfraID, ServiceUnitID, FLAG);
        }
        
        public System.Data.DataTable GetComplainHistory(int ComplaintID, int FLAG) {
            return base.Channel.GetComplainHistory(ComplaintID, FLAG);
        }
        
        public System.Data.DataTable GetCustomerSLA(int CustomerCode, int RegionID, string StatusID, System.DateTime SLADate) {
            return base.Channel.GetCustomerSLA(CustomerCode, RegionID, StatusID, SLADate);
        }
        
        public System.Data.DataTable GetCustomerComplainHistroy(int SignupID, string CMSID) {
            return base.Channel.GetCustomerComplainHistroy(SignupID, CMSID);
        }
        
        public bool UpdateComplain(
                    int ComplainID, 
                    string TicketNo, 
                    int ComplaintStatusID, 
                    int AssignedByDeptID, 
                    int AssignedToDeptID, 
                    string AssignedToPersonName, 
                    string AssignedByPersonName, 
                    System.DateTime LastUpdatedDate, 
                    System.DateTime ETA, 
                    string PersonGivenETA, 
                    System.DateTime ETTR, 
                    string PersonSolving, 
                    System.DateTime ComplainSolvingDate, 
                    string FCR, 
                    int ProblemDignoseEndID, 
                    int ReasonOutageID, 
                    string Dignose_Causes, 
                    string Dignose_RootCauseAnalysis, 
                    string Dignose_PreventativeMeasureTake, 
                    int LastMileInfraID, 
                    string CustomerFeedBack, 
                    string FurtherAction, 
                    string NewComplainRef, 
                    string QueryResponses, 
                    string Remarks, 
                    string RequestTypeAtNE, 
                    string Picture1, 
                    string Picture2, 
                    int TeamID, 
                    int TeamPriority, 
                    int TransactionBy) {
            return base.Channel.UpdateComplain(ComplainID, TicketNo, ComplaintStatusID, AssignedByDeptID, AssignedToDeptID, AssignedToPersonName, AssignedByPersonName, LastUpdatedDate, ETA, PersonGivenETA, ETTR, PersonSolving, ComplainSolvingDate, FCR, ProblemDignoseEndID, ReasonOutageID, Dignose_Causes, Dignose_RootCauseAnalysis, Dignose_PreventativeMeasureTake, LastMileInfraID, CustomerFeedBack, FurtherAction, NewComplainRef, QueryResponses, Remarks, RequestTypeAtNE, Picture1, Picture2, TeamID, TeamPriority, TransactionBy);
        }
        
        public bool CustomerExternalEmail(int TicketTypeID, int CaseCategoryID, string Stage, int ComplaintID) {
            return base.Channel.CustomerExternalEmail(TicketTypeID, CaseCategoryID, Stage, ComplaintID);
        }
        
        public bool ComplainInternalEmail(int ComplaintID, int TicketTypeID, int AssignedtoDepartID, int AssignedByDepartID, int ComplainStatusID, int CaseCategory) {
            return base.Channel.ComplainInternalEmail(ComplaintID, TicketTypeID, AssignedtoDepartID, AssignedByDepartID, ComplainStatusID, CaseCategory);
        }
        
        public System.Data.DataTable GetLoggedBy() {
            return base.Channel.GetLoggedBy();
        }
        
        public System.Data.DataTable GetComplainFollowHis(int ComplaintID) {
            return base.Channel.GetComplainFollowHis(ComplaintID);
        }
        
        public System.Data.DataTable checkComplainBySignupID(int SignupID) {
            return base.Channel.checkComplainBySignupID(SignupID);
        }
        
        public bool UpdateComplainFollow(int ComplaintID, int IsFollow, int TransactionByID, string TransactionByName) {
            return base.Channel.UpdateComplainFollow(ComplaintID, IsFollow, TransactionByID, TransactionByName);
        }
        
        public bool AssignedComplainsToTeam(int ComplaintID, int TeamID, int Priority, string Remarks, int AssignedByDeptID, string AssignedByPersonName, int TransactionBy) {
            return base.Channel.AssignedComplainsToTeam(ComplaintID, TeamID, Priority, Remarks, AssignedByDeptID, AssignedByPersonName, TransactionBy);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadOTS_AttachmentResponse RainMaker.BSS_Service.Service1Soap.UploadOTS_Attachment(RainMaker.BSS_Service.UploadOTS_AttachmentRequest request) {
            return base.Channel.UploadOTS_Attachment(request);
        }
        
        public string UploadOTS_Attachment(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadOTS_AttachmentRequest inValue = new RainMaker.BSS_Service.UploadOTS_AttachmentRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadOTS_AttachmentResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadOTS_Attachment(inValue);
            return retVal.UploadOTS_AttachmentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadOTSFileResponse RainMaker.BSS_Service.Service1Soap.DownloadOTSFile(RainMaker.BSS_Service.DownloadOTSFileRequest request) {
            return base.Channel.DownloadOTSFile(request);
        }
        
        public byte[] DownloadOTSFile(string filename) {
            RainMaker.BSS_Service.DownloadOTSFileRequest inValue = new RainMaker.BSS_Service.DownloadOTSFileRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadOTSFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadOTSFile(inValue);
            return retVal.DownloadOTSFileResult;
        }
        
        public bool UpdateFiberDetails(int SignupID, string JoinName, string TubeNameFromCustomer, string CoreColorFromCustomer, string TubeNameFromNode, string CoreColorFromNode, string CutDistance, int TransactionBy) {
            return base.Channel.UpdateFiberDetails(SignupID, JoinName, TubeNameFromCustomer, CoreColorFromCustomer, TubeNameFromNode, CoreColorFromNode, CutDistance, TransactionBy);
        }
        
        public System.Data.DataTable GetTeamPrioirty() {
            return base.Channel.GetTeamPrioirty();
        }
        
        public System.Data.DataTable GetTeamList() {
            return base.Channel.GetTeamList();
        }
        
        public System.Data.DataTable Noctt_GetFault(int FaultID, int IsActive) {
            return base.Channel.Noctt_GetFault(FaultID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetImpact(int ImpactID, int IsActive) {
            return base.Channel.Noctt_GetImpact(ImpactID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetIssueOn(int IssueOnID, int IsActive) {
            return base.Channel.Noctt_GetIssueOn(IssueOnID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetEscalatedPerson(int EscalatedPersonID, int RegionID, int IsActive) {
            return base.Channel.Noctt_GetEscalatedPerson(EscalatedPersonID, RegionID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetModeofTicket(int ModeofTicketID, int IsActive) {
            return base.Channel.Noctt_GetModeofTicket(ModeofTicketID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetRFO(int RFOID, int IsActive) {
            return base.Channel.Noctt_GetRFO(RFOID, IsActive);
        }
        
        public System.Data.DataTable Noctt_GetTicketType(int TicketTypeID, int IsActive) {
            return base.Channel.Noctt_GetTicketType(TicketTypeID, IsActive);
        }
        
        public int InsertModel(string ModelType, string ModelName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.InsertModel(ModelType, ModelName, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public int InsertOperation(string OperationName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.InsertOperation(OperationName, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public int InsertRouter(int RotuerTypeID, string RouterName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.InsertRouter(RotuerTypeID, RouterName, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public bool InsertExtraIP(int SignupID, int IpProvisionID, string Section, string ExtraIp_NetworkIP, string ExtraIP_BroadCast, string ExtraIp_SubnetMask, string ExtraIp_IpRange, int TransactionBy) {
            return base.Channel.InsertExtraIP(SignupID, IpProvisionID, Section, ExtraIp_NetworkIP, ExtraIP_BroadCast, ExtraIp_SubnetMask, ExtraIp_IpRange, TransactionBy);
        }
        
        public int InsertVRF(string VRFName, string RD, int ServiceUnitID, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.InsertVRF(VRFName, RD, ServiceUnitID, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public int UpdateModel(int ModelID, string ModelType, string ModelName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.UpdateModel(ModelID, ModelType, ModelName, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public int UpdateOperation(int OperationID, string OperationName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.UpdateOperation(OperationID, OperationName, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public int UpdateRouter(int RouterID, int RotuerTypeID, string RouterName, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.UpdateRouter(RouterID, RotuerTypeID, RouterName, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public int UpdateVRF(int VRFID, string VRFName, string RD, int ServiceUnitID, int IsActive, int TransactionBy, System.DateTime TransactionDateTime) {
            return base.Channel.UpdateVRF(VRFID, VRFName, RD, ServiceUnitID, IsActive, TransactionBy, TransactionDateTime);
        }
        
        public System.Data.DataTable GetNode(int NodeID, int CityID, int RingID, int IsActive, string Node) {
            return base.Channel.GetNode(NodeID, CityID, RingID, IsActive, Node);
        }
        
        public bool InsertNode(string Node, int CityID, int RingID, int IsActive, int TranBy) {
            return base.Channel.InsertNode(Node, CityID, RingID, IsActive, TranBy);
        }
        
        public bool UpdateNode(string NodeID, string Node, int CityID, int RingID, int IsActive, int TranBy) {
            return base.Channel.UpdateNode(NodeID, Node, CityID, RingID, IsActive, TranBy);
        }
        
        public System.Data.DataTable GetFieldforNOC(int ServiceUnitID) {
            return base.Channel.GetFieldforNOC(ServiceUnitID);
        }
        
        public System.Data.DataTable GetIPStatus() {
            return base.Channel.GetIPStatus();
        }
        
        public System.Data.DataTable GetTopology() {
            return base.Channel.GetTopology();
        }
        
        public System.Data.DataTable GetODUMount() {
            return base.Channel.GetODUMount();
        }
        
        public System.Data.DataTable GetNetwork(int RegionID, int CityID, int IsVoip, int StatusID, string IpAddress) {
            return base.Channel.GetNetwork(RegionID, CityID, IsVoip, StatusID, IpAddress);
        }
        
        public bool InsertNetwork(int RegionID, int CityID, string IpAddress, int IsVoip, int StatusID, int TransactionBy) {
            return base.Channel.InsertNetwork(RegionID, CityID, IpAddress, IsVoip, StatusID, TransactionBy);
        }
        
        public bool UpdateNetwork(int seq, int StatusID, int TransactionBy) {
            return base.Channel.UpdateNetwork(seq, StatusID, TransactionBy);
        }
        
        public System.Data.DataTable VerifyIpAddress(string IpAddress1, string IpAddress2) {
            return base.Channel.VerifyIpAddress(IpAddress1, IpAddress2);
        }
        
        public System.Data.DataTable GetCPEModel(int CPETypeID, string CPEModel, int IsActive, string Flag) {
            return base.Channel.GetCPEModel(CPETypeID, CPEModel, IsActive, Flag);
        }
        
        public int InsertCPEModel(int CPETypeID, string CPEModel, int IsActive, int TransactionBy) {
            return base.Channel.InsertCPEModel(CPETypeID, CPEModel, IsActive, TransactionBy);
        }
        
        public int UpdateCPEModel(int CPEModelID, int CPETypeID, string CPEModel, int IsActive, int TransactionBy) {
            return base.Channel.UpdateCPEModel(CPEModelID, CPETypeID, CPEModel, IsActive, TransactionBy);
        }
        
        public int InsertIpProvisioning(
                    int IpProvsionID, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime ConfigurationDate, 
                    string MRTGlink, 
                    int PortalAcessesGranted, 
                    string PortalUserID, 
                    string PortalPassword, 
                    string Documents, 
                    string NetworkDiagram, 
                    string Notes, 
                    int Primary_SwitchID, 
                    int Primary_SwitchPortID, 
                    int Primary_OLTID, 
                    string Primary_OLTPonPort, 
                    string Primary_OLTIpAddress, 
                    int Primary_CPE_ModelID, 
                    int Primary_CPE_WavelengthID, 
                    string Primary_CPE_UplinkPort, 
                    string Primary_CPE_IpAddress, 
                    string Primary_CPE_PortNo, 
                    string Primary_CPE_SFPSN, 
                    string Primary_CPE_SerialNo, 
                    int Primary_ODU_ModelID, 
                    int Primary_ODU_LinkSenerioID, 
                    int Primary_ODU_MountOnID, 
                    string Primary_ODU_Frequency, 
                    string Primary_ODU_RootIP, 
                    string Primary_ODU_RemoteIP, 
                    string Primary_ODU_AssetNo, 
                    string Primary_ODU_AerialDistance, 
                    string Primary_IpAddres, 
                    string Primary_SubnetMask, 
                    string Primary_NetworkIP, 
                    string Primary_BroadCastIP, 
                    string Primary_Gateway, 
                    string Primary_IPRange, 
                    string Primary_VLAN, 
                    string Primary_VLAN_B, 
                    int Primary_CircuitModeID, 
                    int Primary_VRFID, 
                    string Primary_IPME, 
                    string Primary_IPCE, 
                    int Primary_RouterID, 
                    string Primary_RouterInterface, 
                    int Primary_Router_BID, 
                    string Primary_RouterInterface_B, 
                    int Primary_OperationID, 
                    int Primary_TopologyID, 
                    int Primary_FeedTypeID, 
                    string Primary_IsSiteB, 
                    int Primary_SiteBClientID, 
                    string Primary_AsNumber, 
                    int Primary_IsTagged, 
                    int Secondary_SwitchID, 
                    int Secondary_SwitchPortID, 
                    int Secondary_OLTID, 
                    string Secondary_OLTPonPort, 
                    string Secondary_OLTIpAddress, 
                    string Secondary_CPE_ModelID, 
                    int Secondary_CPE_WavelengthID, 
                    string Secondary_CPE_UplinkPort, 
                    string Secondary_CPE_IpAddress, 
                    string Secondary_CPE_PortNo, 
                    string Secondary_CPE_SFPSN, 
                    string Secondary_CPE_SerialNo, 
                    int Secondary_ODU_ModelID, 
                    int Secondary_ODU_LinkSenerioID, 
                    int Secondary_ODU_MountOnID, 
                    string Secondary_ODU_Frequency, 
                    string Secondary_ODU_RootIP, 
                    string Secondary_ODU_RemoteIP, 
                    string Secondary_ODU_AssetNo, 
                    string Secondary_ODU_AerialDistance, 
                    int TransactionBy) {
            return base.Channel.InsertIpProvisioning(IpProvsionID, SignupID, DeploymentID, ConfigurationDate, MRTGlink, PortalAcessesGranted, PortalUserID, PortalPassword, Documents, NetworkDiagram, Notes, Primary_SwitchID, Primary_SwitchPortID, Primary_OLTID, Primary_OLTPonPort, Primary_OLTIpAddress, Primary_CPE_ModelID, Primary_CPE_WavelengthID, Primary_CPE_UplinkPort, Primary_CPE_IpAddress, Primary_CPE_PortNo, Primary_CPE_SFPSN, Primary_CPE_SerialNo, Primary_ODU_ModelID, Primary_ODU_LinkSenerioID, Primary_ODU_MountOnID, Primary_ODU_Frequency, Primary_ODU_RootIP, Primary_ODU_RemoteIP, Primary_ODU_AssetNo, Primary_ODU_AerialDistance, Primary_IpAddres, Primary_SubnetMask, Primary_NetworkIP, Primary_BroadCastIP, Primary_Gateway, Primary_IPRange, Primary_VLAN, Primary_VLAN_B, Primary_CircuitModeID, Primary_VRFID, Primary_IPME, Primary_IPCE, Primary_RouterID, Primary_RouterInterface, Primary_Router_BID, Primary_RouterInterface_B, Primary_OperationID, Primary_TopologyID, Primary_FeedTypeID, Primary_IsSiteB, Primary_SiteBClientID, Primary_AsNumber, Primary_IsTagged, Secondary_SwitchID, Secondary_SwitchPortID, Secondary_OLTID, Secondary_OLTPonPort, Secondary_OLTIpAddress, Secondary_CPE_ModelID, Secondary_CPE_WavelengthID, Secondary_CPE_UplinkPort, Secondary_CPE_IpAddress, Secondary_CPE_PortNo, Secondary_CPE_SFPSN, Secondary_CPE_SerialNo, Secondary_ODU_ModelID, Secondary_ODU_LinkSenerioID, Secondary_ODU_MountOnID, Secondary_ODU_Frequency, Secondary_ODU_RootIP, Secondary_ODU_RemoteIP, Secondary_ODU_AssetNo, Secondary_ODU_AerialDistance, TransactionBy);
        }
        
        public bool UpdateIpProvisioning(
                    int IpProvsionID, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime ConfigurationDate, 
                    string MRTGlink, 
                    int PortalAcessesGranted, 
                    string PortalUserID, 
                    string PortalPassword, 
                    string Documents, 
                    string NetworkDiagram, 
                    string Notes, 
                    int Primary_SwitchID, 
                    int Primary_SwitchPortID, 
                    int Primary_OLTID, 
                    string Primary_OLTPonPort, 
                    string Primary_OLTIpAddress, 
                    int Primary_CPE_ModelID, 
                    int Primary_CPE_WavelengthID, 
                    string Primary_CPE_UplinkPort, 
                    string Primary_CPE_IpAddress, 
                    string Primary_CPE_PortNo, 
                    string Primary_CPE_SFPSN, 
                    string Primary_CPE_SerialNo, 
                    int Primary_ODU_ModelID, 
                    int Primary_ODU_LinkSenerioID, 
                    int Primary_ODU_MountOnID, 
                    string Primary_ODU_Frequency, 
                    string Primary_ODU_RootIP, 
                    string Primary_ODU_RemoteIP, 
                    string Primary_ODU_AssetNo, 
                    string Primary_ODU_AerialDistance, 
                    string Primary_IpAddres, 
                    string Primary_SubnetMask, 
                    string Primary_NetworkIP, 
                    string Primary_BroadCastIP, 
                    string Primary_Gateway, 
                    string Primary_IPRange, 
                    string Primary_VLAN, 
                    string Primary_VLAN_B, 
                    int Primary_CircuitModeID, 
                    int Primary_VRFID, 
                    string Primary_IPME, 
                    string Primary_IPCE, 
                    int Primary_RouterID, 
                    string Primary_RouterInterface, 
                    int Primary_Router_BID, 
                    string Primary_RouterInterface_B, 
                    int Primary_OperationID, 
                    int Primary_TopologyID, 
                    int Primary_FeedTypeID, 
                    string Primary_IsSiteB, 
                    int Primary_SiteBClientID, 
                    string Primary_AsNumber, 
                    int Primary_IsTagged, 
                    int Secondary_SwitchID, 
                    int Secondary_SwitchPortID, 
                    int Secondary_OLTID, 
                    string Secondary_OLTPonPort, 
                    string Secondary_OLTIpAddress, 
                    int Secondary_CPE_ModelID, 
                    int Secondary_CPE_WavelengthID, 
                    string Secondary_CPE_UplinkPort, 
                    string Secondary_CPE_IpAddress, 
                    string Secondary_CPE_PortNo, 
                    string Secondary_CPE_SFPSN, 
                    string Secondary_CPE_SerialNo, 
                    int Secondary_ODU_ModelID, 
                    int Secondary_ODU_LinkSenerioID, 
                    int Secondary_ODU_MountOnID, 
                    string Secondary_ODU_Frequency, 
                    string Secondary_ODU_RootIP, 
                    string Secondary_ODU_RemoteIP, 
                    string Secondary_ODU_AssetNo, 
                    string Secondary_ODU_AerialDistance, 
                    int TransactionBy, 
                    int Flag) {
            return base.Channel.UpdateIpProvisioning(IpProvsionID, SignupID, DeploymentID, ConfigurationDate, MRTGlink, PortalAcessesGranted, PortalUserID, PortalPassword, Documents, NetworkDiagram, Notes, Primary_SwitchID, Primary_SwitchPortID, Primary_OLTID, Primary_OLTPonPort, Primary_OLTIpAddress, Primary_CPE_ModelID, Primary_CPE_WavelengthID, Primary_CPE_UplinkPort, Primary_CPE_IpAddress, Primary_CPE_PortNo, Primary_CPE_SFPSN, Primary_CPE_SerialNo, Primary_ODU_ModelID, Primary_ODU_LinkSenerioID, Primary_ODU_MountOnID, Primary_ODU_Frequency, Primary_ODU_RootIP, Primary_ODU_RemoteIP, Primary_ODU_AssetNo, Primary_ODU_AerialDistance, Primary_IpAddres, Primary_SubnetMask, Primary_NetworkIP, Primary_BroadCastIP, Primary_Gateway, Primary_IPRange, Primary_VLAN, Primary_VLAN_B, Primary_CircuitModeID, Primary_VRFID, Primary_IPME, Primary_IPCE, Primary_RouterID, Primary_RouterInterface, Primary_Router_BID, Primary_RouterInterface_B, Primary_OperationID, Primary_TopologyID, Primary_FeedTypeID, Primary_IsSiteB, Primary_SiteBClientID, Primary_AsNumber, Primary_IsTagged, Secondary_SwitchID, Secondary_SwitchPortID, Secondary_OLTID, Secondary_OLTPonPort, Secondary_OLTIpAddress, Secondary_CPE_ModelID, Secondary_CPE_WavelengthID, Secondary_CPE_UplinkPort, Secondary_CPE_IpAddress, Secondary_CPE_PortNo, Secondary_CPE_SFPSN, Secondary_CPE_SerialNo, Secondary_ODU_ModelID, Secondary_ODU_LinkSenerioID, Secondary_ODU_MountOnID, Secondary_ODU_Frequency, Secondary_ODU_RootIP, Secondary_ODU_RemoteIP, Secondary_ODU_AssetNo, Secondary_ODU_AerialDistance, TransactionBy, Flag);
        }
        
        public bool UpdateCustomerDetailsByIP(int SignupID, int NodeID, int BkNodeID, int VOIP, int VC, string VPN, int ExtraIP, string BandwidthID, int TransactionBy) {
            return base.Channel.UpdateCustomerDetailsByIP(SignupID, NodeID, BkNodeID, VOIP, VC, VPN, ExtraIP, BandwidthID, TransactionBy);
        }
        
        public bool IpConfigurationConfirmationMail(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int CircuitTypeID) {
            return base.Channel.IpConfigurationConfirmationMail(IpProvsionID, LobID, ServiceUnitID, InfraID, CircuitTypeID);
        }
        
        public object StatusActionByNOC(int SignupID, System.DateTime ActivationDate, string LastActionRemarks, int TransactionBy, string Flag) {
            return base.Channel.StatusActionByNOC(SignupID, ActivationDate, LastActionRemarks, TransactionBy, Flag);
        }
        
        public object StatusActionByTXN(int SignupID, string LastActionRemarks, int TransactionBy, string Flag) {
            return base.Channel.StatusActionByTXN(SignupID, LastActionRemarks, TransactionBy, Flag);
        }
        
        public bool IpStatusActionEmail(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage) {
            return base.Channel.IpStatusActionEmail(IpProvsionID, LobID, ServiceUnitID, InfraID, SignupID, StatusFlag, EmailStage);
        }
        
        public System.Data.DataTable GetIpProviosnDetail(int SignupID) {
            return base.Channel.GetIpProviosnDetail(SignupID);
        }
        
        public System.Data.DataTable SearchActiveCricuits(
                    int SignupID, 
                    string BSSCODE, 
                    string CMSID, 
                    string GPID, 
                    string CircuitName, 
                    int CircuitTypeID, 
                    int CityID, 
                    int InfraID, 
                    int ServiceUnitID, 
                    int CircuitOwnerID, 
                    int CircuitStatusID, 
                    int CustomerCode, 
                    int NodeID, 
                    int Primary_RingID, 
                    int Primary_SwitchID, 
                    int Primary_SwitchPortID, 
                    string Primary_IpAddres, 
                    string Primary_CPE_IpAddress, 
                    string ExtraIP, 
                    int IsExtraIP) {
            return base.Channel.SearchActiveCricuits(SignupID, BSSCODE, CMSID, GPID, CircuitName, CircuitTypeID, CityID, InfraID, ServiceUnitID, CircuitOwnerID, CircuitStatusID, CustomerCode, NodeID, Primary_RingID, Primary_SwitchID, Primary_SwitchPortID, Primary_IpAddres, Primary_CPE_IpAddress, ExtraIP, IsExtraIP);
        }
        
        public System.Data.DataTable GetSiteB_IpProvisionDetails(int SignupID) {
            return base.Channel.GetSiteB_IpProvisionDetails(SignupID);
        }
        
        public bool DelExtraIP(int Seq, int TransactionBy) {
            return base.Channel.DelExtraIP(Seq, TransactionBy);
        }
        
        public System.Data.DataTable GetDuplexMode() {
            return base.Channel.GetDuplexMode();
        }
        
        public System.Data.DataTable GetPortType() {
            return base.Channel.GetPortType();
        }
        
        public System.Data.DataTable GetSDH() {
            return base.Channel.GetSDH();
        }
        
        public System.Data.DataTable GetLMMediaInfo() {
            return base.Channel.GetLMMediaInfo();
        }
        
        public System.Data.DataTable GetTxnInterface() {
            return base.Channel.GetTxnInterface();
        }
        
        public System.Data.DataTable GetStatus() {
            return base.Channel.GetStatus();
        }
        
        public System.Data.DataTable GetPortSpeed(int PortSpeedID, int IsActive) {
            return base.Channel.GetPortSpeed(PortSpeedID, IsActive);
        }
        
        public System.Data.DataTable GetEquipment(int EquipmentID, int IsActive) {
            return base.Channel.GetEquipment(EquipmentID, IsActive);
        }
        
        public System.Data.DataTable GetCapacity(int CapacityID, int IsActive) {
            return base.Channel.GetCapacity(CapacityID, IsActive);
        }
        
        public System.Data.DataTable GetODFPortsDetails(int SignupID) {
            return base.Channel.GetODFPortsDetails(SignupID);
        }
        
        public System.Data.DataTable GetCircuitProvisionDetails(int SignupID) {
            return base.Channel.GetCircuitProvisionDetails(SignupID);
        }
        
        public System.Data.DataTable GetCircuitConfigurationDetails(int TxnProvisionID) {
            return base.Channel.GetCircuitConfigurationDetails(TxnProvisionID);
        }
        
        public System.Data.DataTable GetOFCDetails(int OFCDetailsID) {
            return base.Channel.GetOFCDetails(OFCDetailsID);
        }
        
        public System.Data.DataTable GetEquipmetDetails(int EqiupmentEndID) {
            return base.Channel.GetEquipmetDetails(EqiupmentEndID);
        }
        
        public int InsertOLT(string OLT, int IsActive, int TransactionBy) {
            return base.Channel.InsertOLT(OLT, IsActive, TransactionBy);
        }
        
        public int InsertPortSpeed(string PortSpeed, int IsActive, int TransactionBy) {
            return base.Channel.InsertPortSpeed(PortSpeed, IsActive, TransactionBy);
        }
        
        public int InsertEquipment(string Equipment, int IsActive, int TransactionBy) {
            return base.Channel.InsertEquipment(Equipment, IsActive, TransactionBy);
        }
        
        public int InsertCapacity(string Capacity, int IsActive, int TransactionBy) {
            return base.Channel.InsertCapacity(Capacity, IsActive, TransactionBy);
        }
        
        public int UpdateOLT(int OLTID, string OLT, int IsActive, int TransactionBy) {
            return base.Channel.UpdateOLT(OLTID, OLT, IsActive, TransactionBy);
        }
        
        public int UpdatePortSpeed(int PortSpeedID, string PortSpeed, int IsActive, int TransactionBy) {
            return base.Channel.UpdatePortSpeed(PortSpeedID, PortSpeed, IsActive, TransactionBy);
        }
        
        public int UpdateEquipment(int EquipmentID, string Equipment, int IsActive, int TransactionBy) {
            return base.Channel.UpdateEquipment(EquipmentID, Equipment, IsActive, TransactionBy);
        }
        
        public int UpdateCapacity(int CapacityID, string Capacity, int IsActive, int TransactionBy) {
            return base.Channel.UpdateCapacity(CapacityID, Capacity, IsActive, TransactionBy);
        }
        
        public int Insert_txnMainDetails(
                    int TxnProvisionID, 
                    System.DateTime DateofVisit, 
                    System.DateTime HandoverDate, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime RevisionDate, 
                    string CustomerPoC_Name, 
                    string CustomerPoC_Contact1, 
                    string CustomerPoC_Contact2, 
                    string CustomerPoC_Email1, 
                    string CustomerPoC_Email2, 
                    string LocalPoC_Name, 
                    string LocalPoC_Contact1, 
                    string LocalPoC_Contact2, 
                    string LocalPoC_Email1, 
                    string LocalPoC_Email2, 
                    string CPSiteAddress1, 
                    string CPSiteAddress2, 
                    string DemarcationEndA, 
                    string DemarcationEndB, 
                    string PartnerName, 
                    string PartnerContact, 
                    string PartnerClientID, 
                    string PartnerEmailAddress, 
                    string PartnerName2, 
                    string PartnerContact2, 
                    string PartnerClientID2, 
                    string PartnerEmailAddress2, 
                    string PartnerName3, 
                    string PartnerContact3, 
                    string PartnerClientID3, 
                    string PartnerEmailAddress3, 
                    string ServiceCapacity, 
                    string ServiceEmailAddress, 
                    string ServiceCustomerID, 
                    string ServiceBearerID, 
                    string OtherServiceInformation, 
                    string EndAName, 
                    string EndBName, 
                    string EndCName, 
                    string EndDName, 
                    string CustomerAcceptance, 
                    string SLD, 
                    string TestResult, 
                    string Comments, 
                    string TransactionBy) {
            return base.Channel.Insert_txnMainDetails(TxnProvisionID, DateofVisit, HandoverDate, SignupID, DeploymentID, RevisionDate, CustomerPoC_Name, CustomerPoC_Contact1, CustomerPoC_Contact2, CustomerPoC_Email1, CustomerPoC_Email2, LocalPoC_Name, LocalPoC_Contact1, LocalPoC_Contact2, LocalPoC_Email1, LocalPoC_Email2, CPSiteAddress1, CPSiteAddress2, DemarcationEndA, DemarcationEndB, PartnerName, PartnerContact, PartnerClientID, PartnerEmailAddress, PartnerName2, PartnerContact2, PartnerClientID2, PartnerEmailAddress2, PartnerName3, PartnerContact3, PartnerClientID3, PartnerEmailAddress3, ServiceCapacity, ServiceEmailAddress, ServiceCustomerID, ServiceBearerID, OtherServiceInformation, EndAName, EndBName, EndCName, EndDName, CustomerAcceptance, SLD, TestResult, Comments, TransactionBy);
        }
        
        public bool InsertEquimetDetails(
                    int EqiupmentEndID, 
                    int TxnProvisionID, 
                    string EquipmentID1, 
                    int InterfaceID1, 
                    string PatchCableCord1, 
                    string Attenuator1, 
                    string SlotPort1, 
                    string ODFDDFlocation1, 
                    string EquipmentID2, 
                    int InterfaceID2, 
                    string PatchCableCord2, 
                    string Attenuator2, 
                    string SlotPort2, 
                    string ODFDDFlocation2, 
                    string EquipmentID3, 
                    int InterfaceID3, 
                    string PatchCableCord3, 
                    string Attenuator3, 
                    string SlotPort3, 
                    string ODFDDFlocation3, 
                    string EndFlag) {
            return base.Channel.InsertEquimetDetails(EqiupmentEndID, TxnProvisionID, EquipmentID1, InterfaceID1, PatchCableCord1, Attenuator1, SlotPort1, ODFDDFlocation1, EquipmentID2, InterfaceID2, PatchCableCord2, Attenuator2, SlotPort2, ODFDDFlocation2, EquipmentID3, InterfaceID3, PatchCableCord3, Attenuator3, SlotPort3, ODFDDFlocation3, EndFlag);
        }
        
        public bool InsertCircuitConfiqDetails(
                    int TxnProvisionID, 
                    int Near_PortTypeID_End1, 
                    string Near_Location_End1, 
                    int Near_PortSpeedID_End1, 
                    string Near_VLAN_End1, 
                    string Near_LCAS_End1, 
                    int Near_DuplexModeID_End1, 
                    string Near_AutoNegotiation_End1, 
                    string Near_MTUSize_End1, 
                    int Far_PortTypeID_End1, 
                    string Far_Location_End1, 
                    int Far_PortSpeedID_End1, 
                    string Far_VLAN_End1, 
                    string Far_LCAS_End1, 
                    int Far_DuplexModeID_End1, 
                    string Far_AutoNegotiation_End1, 
                    string Far_MTUSize_End1, 
                    int Near_PortTypeID_End2, 
                    string Near_Location_End2, 
                    int Near_PortSpeedID_End2, 
                    string Near_VLAN_End2, 
                    string Near_LCAS_End2, 
                    int Near_DuplexModeID_End2, 
                    string Near_AutoNegotiation_End2, 
                    string Near_MTUSize_End2, 
                    int Far_PortTypeID_End2, 
                    string Far_Location_End2, 
                    int Far_PortSpeedID_End2, 
                    string Far_VLAN_End2, 
                    string Far_LCAS_End2, 
                    int Far_DuplexModeID_End2, 
                    string Far_AutoNegotiation_End2, 
                    string Far_MTUSize_End2) {
            return base.Channel.InsertCircuitConfiqDetails(TxnProvisionID, Near_PortTypeID_End1, Near_Location_End1, Near_PortSpeedID_End1, Near_VLAN_End1, Near_LCAS_End1, Near_DuplexModeID_End1, Near_AutoNegotiation_End1, Near_MTUSize_End1, Far_PortTypeID_End1, Far_Location_End1, Far_PortSpeedID_End1, Far_VLAN_End1, Far_LCAS_End1, Far_DuplexModeID_End1, Far_AutoNegotiation_End1, Far_MTUSize_End1, Near_PortTypeID_End2, Near_Location_End2, Near_PortSpeedID_End2, Near_VLAN_End2, Near_LCAS_End2, Near_DuplexModeID_End2, Near_AutoNegotiation_End2, Near_MTUSize_End2, Far_PortTypeID_End2, Far_Location_End2, Far_PortSpeedID_End2, Far_VLAN_End2, Far_LCAS_End2, Far_DuplexModeID_End2, Far_AutoNegotiation_End2, Far_MTUSize_End2);
        }
        
        public bool InsertOFCDetails(
                    int TxnProvisionID, 
                    string OFCRegion, 
                    int LM_MediaID, 
                    string Spur_OFCType, 
                    string Spur_Route, 
                    string Spur_TXNODF, 
                    string Spur_Optical_TestPointA, 
                    string Spur_Optical_TestPointB, 
                    string Spur_Optical_Port, 
                    string Spur_Optical_TotalLoss, 
                    string Spur_Optical_AverageLoss, 
                    string Spur_Optical_OPMReading, 
                    string Spur_EE_TestPointA, 
                    string Spur_EE_TestPointB, 
                    string Spur_EE_TestType, 
                    string Spur_EE_Duration, 
                    string Spur_EE_Availablity, 
                    string Pro_OFCType, 
                    string Pro_Route, 
                    string Pro_TXNODF, 
                    string Pro_Optical_TestPointA, 
                    string Pro_Optical_TestPointB, 
                    string Pro_Optical_Port, 
                    string Pro_Optical_TotalLoss, 
                    string Pro_Optical_AverageLoss, 
                    string Pro_Optical_OPMReading, 
                    string Pro_EE_TestPointA, 
                    string Pro_EE_TestPointB, 
                    string Pro_EE_TestType, 
                    string Pro_EE_Duration, 
                    string Pro_EE_Availablity, 
                    string OFCFlag) {
            return base.Channel.InsertOFCDetails(TxnProvisionID, OFCRegion, LM_MediaID, Spur_OFCType, Spur_Route, Spur_TXNODF, Spur_Optical_TestPointA, Spur_Optical_TestPointB, Spur_Optical_Port, Spur_Optical_TotalLoss, Spur_Optical_AverageLoss, Spur_Optical_OPMReading, Spur_EE_TestPointA, Spur_EE_TestPointB, Spur_EE_TestType, Spur_EE_Duration, Spur_EE_Availablity, Pro_OFCType, Pro_Route, Pro_TXNODF, Pro_Optical_TestPointA, Pro_Optical_TestPointB, Pro_Optical_Port, Pro_Optical_TotalLoss, Pro_Optical_AverageLoss, Pro_Optical_OPMReading, Pro_EE_TestPointA, Pro_EE_TestPointB, Pro_EE_TestType, Pro_EE_Duration, Pro_EE_Availablity, OFCFlag);
        }
        
        public bool Update_txnMainDetails(
                    int TxnProvisionID, 
                    System.DateTime DateofVisit, 
                    System.DateTime HandoverDate, 
                    int SignupID, 
                    int DeploymentID, 
                    System.DateTime RevisionDate, 
                    string CustomerPoC_Name, 
                    string CustomerPoC_Contact1, 
                    string CustomerPoC_Contact2, 
                    string CustomerPoC_Email1, 
                    string CustomerPoC_Email2, 
                    string LocalPoC_Name, 
                    string LocalPoC_Contact1, 
                    string LocalPoC_Contact2, 
                    string LocalPoC_Email1, 
                    string LocalPoC_Email2, 
                    string CPSiteAddress1, 
                    string CPSiteAddress2, 
                    string DemarcationEndA, 
                    string DemarcationEndB, 
                    string PartnerName, 
                    string PartnerContact, 
                    string PartnerClientID, 
                    string PartnerEmailAddress, 
                    string PartnerName2, 
                    string PartnerContact2, 
                    string PartnerClientID2, 
                    string PartnerEmailAddress2, 
                    string PartnerName3, 
                    string PartnerContact3, 
                    string PartnerClientID3, 
                    string PartnerEmailAddress3, 
                    string ServiceCapacity, 
                    string ServiceEmailAddress, 
                    string ServiceCustomerID, 
                    string ServiceBearerID, 
                    string OtherServiceInformation, 
                    string EndAName, 
                    string EndBName, 
                    string EndCName, 
                    string EndDName, 
                    string CustomerAcceptance, 
                    string SLD, 
                    string TestResult, 
                    string Comments, 
                    string TransactionBy) {
            return base.Channel.Update_txnMainDetails(TxnProvisionID, DateofVisit, HandoverDate, SignupID, DeploymentID, RevisionDate, CustomerPoC_Name, CustomerPoC_Contact1, CustomerPoC_Contact2, CustomerPoC_Email1, CustomerPoC_Email2, LocalPoC_Name, LocalPoC_Contact1, LocalPoC_Contact2, LocalPoC_Email1, LocalPoC_Email2, CPSiteAddress1, CPSiteAddress2, DemarcationEndA, DemarcationEndB, PartnerName, PartnerContact, PartnerClientID, PartnerEmailAddress, PartnerName2, PartnerContact2, PartnerClientID2, PartnerEmailAddress2, PartnerName3, PartnerContact3, PartnerClientID3, PartnerEmailAddress3, ServiceCapacity, ServiceEmailAddress, ServiceCustomerID, ServiceBearerID, OtherServiceInformation, EndAName, EndBName, EndCName, EndDName, CustomerAcceptance, SLD, TestResult, Comments, TransactionBy);
        }
        
        public bool UpdateEquimetDetails(
                    int EqiupmentEndID, 
                    int TxnProvisionID, 
                    string EquipmentID1, 
                    int InterfaceID1, 
                    string PatchCableCord1, 
                    string Attenuator1, 
                    string SlotPort1, 
                    string ODFDDFlocation1, 
                    string EquipmentID2, 
                    int InterfaceID2, 
                    string PatchCableCord2, 
                    string Attenuator2, 
                    string SlotPort2, 
                    string ODFDDFlocation2, 
                    string EquipmentID3, 
                    int InterfaceID3, 
                    string PatchCableCord3, 
                    string Attenuator3, 
                    string SlotPort3, 
                    string ODFDDFlocation3, 
                    string EndFlag) {
            return base.Channel.UpdateEquimetDetails(EqiupmentEndID, TxnProvisionID, EquipmentID1, InterfaceID1, PatchCableCord1, Attenuator1, SlotPort1, ODFDDFlocation1, EquipmentID2, InterfaceID2, PatchCableCord2, Attenuator2, SlotPort2, ODFDDFlocation2, EquipmentID3, InterfaceID3, PatchCableCord3, Attenuator3, SlotPort3, ODFDDFlocation3, EndFlag);
        }
        
        public bool UpdateCircuitConfiqDetails(
                    int CircuitConfigID, 
                    int TxnProvisionID, 
                    int Near_PortTypeID_End1, 
                    string Near_Location_End1, 
                    int Near_PortSpeedID_End1, 
                    string Near_VLAN_End1, 
                    string Near_LCAS_End1, 
                    int Near_DuplexModeID_End1, 
                    string Near_AutoNegotiation_End1, 
                    string Near_MTUSize_End1, 
                    int Far_PortTypeID_End1, 
                    string Far_Location_End1, 
                    int Far_PortSpeedID_End1, 
                    string Far_VLAN_End1, 
                    string Far_LCAS_End1, 
                    int Far_DuplexModeID_End1, 
                    string Far_AutoNegotiation_End1, 
                    string Far_MTUSize_End1, 
                    int Near_PortTypeID_End2, 
                    string Near_Location_End2, 
                    int Near_PortSpeedID_End2, 
                    string Near_VLAN_End2, 
                    string Near_LCAS_End2, 
                    int Near_DuplexModeID_End2, 
                    string Near_AutoNegotiation_End2, 
                    string Near_MTUSize_End2, 
                    int Far_PortTypeID_End2, 
                    string Far_Location_End2, 
                    int Far_PortSpeedID_End2, 
                    string Far_VLAN_End2, 
                    string Far_LCAS_End2, 
                    int Far_DuplexModeID_End2, 
                    string Far_AutoNegotiation_End2, 
                    string Far_MTUSize_End2) {
            return base.Channel.UpdateCircuitConfiqDetails(CircuitConfigID, TxnProvisionID, Near_PortTypeID_End1, Near_Location_End1, Near_PortSpeedID_End1, Near_VLAN_End1, Near_LCAS_End1, Near_DuplexModeID_End1, Near_AutoNegotiation_End1, Near_MTUSize_End1, Far_PortTypeID_End1, Far_Location_End1, Far_PortSpeedID_End1, Far_VLAN_End1, Far_LCAS_End1, Far_DuplexModeID_End1, Far_AutoNegotiation_End1, Far_MTUSize_End1, Near_PortTypeID_End2, Near_Location_End2, Near_PortSpeedID_End2, Near_VLAN_End2, Near_LCAS_End2, Near_DuplexModeID_End2, Near_AutoNegotiation_End2, Near_MTUSize_End2, Far_PortTypeID_End2, Far_Location_End2, Far_PortSpeedID_End2, Far_VLAN_End2, Far_LCAS_End2, Far_DuplexModeID_End2, Far_AutoNegotiation_End2, Far_MTUSize_End2);
        }
        
        public bool UpdateOFCDetails(
                    int OFCDetailsID, 
                    int TxnProvisionID, 
                    string OFCRegion, 
                    int LM_MediaID, 
                    string Spur_OFCType, 
                    string Spur_Route, 
                    string Spur_TXNODF, 
                    string Spur_Optical_TestPointA, 
                    string Spur_Optical_TestPointB, 
                    string Spur_Optical_Port, 
                    string Spur_Optical_TotalLoss, 
                    string Spur_Optical_AverageLoss, 
                    string Spur_Optical_OPMReading, 
                    string Spur_EE_TestPointA, 
                    string Spur_EE_TestPointB, 
                    string Spur_EE_TestType, 
                    string Spur_EE_Duration, 
                    string Spur_EE_Availablity, 
                    string Pro_OFCType, 
                    string Pro_Route, 
                    string Pro_TXNODF, 
                    string Pro_Optical_TestPointA, 
                    string Pro_Optical_TestPointB, 
                    string Pro_Optical_Port, 
                    string Pro_Optical_TotalLoss, 
                    string Pro_Optical_AverageLoss, 
                    string Pro_Optical_OPMReading, 
                    string Pro_EE_TestPointA, 
                    string Pro_EE_TestPointB, 
                    string Pro_EE_TestType, 
                    string Pro_EE_Duration, 
                    string Pro_EE_Availablity, 
                    string OFCFlag) {
            return base.Channel.UpdateOFCDetails(OFCDetailsID, TxnProvisionID, OFCRegion, LM_MediaID, Spur_OFCType, Spur_Route, Spur_TXNODF, Spur_Optical_TestPointA, Spur_Optical_TestPointB, Spur_Optical_Port, Spur_Optical_TotalLoss, Spur_Optical_AverageLoss, Spur_Optical_OPMReading, Spur_EE_TestPointA, Spur_EE_TestPointB, Spur_EE_TestType, Spur_EE_Duration, Spur_EE_Availablity, Pro_OFCType, Pro_Route, Pro_TXNODF, Pro_Optical_TestPointA, Pro_Optical_TestPointB, Pro_Optical_Port, Pro_Optical_TotalLoss, Pro_Optical_AverageLoss, Pro_Optical_OPMReading, Pro_EE_TestPointA, Pro_EE_TestPointB, Pro_EE_TestType, Pro_EE_Duration, Pro_EE_Availablity, OFCFlag);
        }
        
        public int UpdateODFPortsByTXN(int SignupID, int IsEnd1_Protected, int End1_Protected_ODFID, int End1_Protected_ODFPortID, string End1_Protected_ODFTray, int IsEnd2_Spur, int IsEnd2_Spur_ODFID, int IsEnd2_Spur_ODFPortID, string IsEnd2_Spur_ODFTray, int IsEnd2_Protected, int IsEnd2_Protected_ODFID, int IsEnd2_Protected_ODFPortID, string IsEnd2_Protected_ODFTray, string TransactionBy) {
            return base.Channel.UpdateODFPortsByTXN(SignupID, IsEnd1_Protected, End1_Protected_ODFID, End1_Protected_ODFPortID, End1_Protected_ODFTray, IsEnd2_Spur, IsEnd2_Spur_ODFID, IsEnd2_Spur_ODFPortID, IsEnd2_Spur_ODFTray, IsEnd2_Protected, IsEnd2_Protected_ODFID, IsEnd2_Protected_ODFPortID, IsEnd2_Protected_ODFTray, TransactionBy);
        }
        
        public bool UpdateDetailsofOther(int TxnProvisionID, int SignupID, int DeploymentID, int Pri_SLAID, string TDMCircuitID, int TransactionBy) {
            return base.Channel.UpdateDetailsofOther(TxnProvisionID, SignupID, DeploymentID, Pri_SLAID, TDMCircuitID, TransactionBy);
        }
        
        public bool InsertOtherDocuments(int SignupID, string OtherDocumentsName, int TransactionBy) {
            return base.Channel.InsertOtherDocuments(SignupID, OtherDocumentsName, TransactionBy);
        }
        
        public bool UpdateOtherDocuments(int seqID, int SignupID, string OtherDocumentsName, int TransactionBy) {
            return base.Channel.UpdateOtherDocuments(seqID, SignupID, OtherDocumentsName, TransactionBy);
        }
        
        public System.Data.DataTable GetOtherDocuments(int SignupID) {
            return base.Channel.GetOtherDocuments(SignupID);
        }
        
        public bool UpdateTxnInternalStatus(int SignupID, string Status, string Remarks, int TransactionBy) {
            return base.Channel.UpdateTxnInternalStatus(SignupID, Status, Remarks, TransactionBy);
        }
        
        public System.Data.DataTable GetInternalStatusHist(int SignupID) {
            return base.Channel.GetInternalStatusHist(SignupID);
        }
        
        public bool TxnInternalEmail(int SignupID, string Status, string Remarks, int TransactionBy) {
            return base.Channel.TxnInternalEmail(SignupID, Status, Remarks, TransactionBy);
        }
        
        public bool TXNStatusActionEmail(int IpProvsionID, int LobID, int ServiceUnitID, int InfraID, int SignupID, string StatusFlag, string EmailStage) {
            return base.Channel.TXNStatusActionEmail(IpProvsionID, LobID, ServiceUnitID, InfraID, SignupID, StatusFlag, EmailStage);
        }
        
        public System.Data.DataTable GetRAM(int IsActive) {
            return base.Channel.GetRAM(IsActive);
        }
        
        public System.Data.DataTable GetCloudType(int IsActive) {
            return base.Channel.GetCloudType(IsActive);
        }
        
        public System.Data.DataTable GetOS(int IsActive) {
            return base.Channel.GetOS(IsActive);
        }
        
        public System.Data.DataTable GetProcessorSpeed(int IsActive) {
            return base.Channel.GetProcessorSpeed(IsActive);
        }
        
        public System.Data.DataTable GetPackageType(int IsActive) {
            return base.Channel.GetPackageType(IsActive);
        }
        
        public System.Data.DataTable GetSoftware(string SWType, int IsActive) {
            return base.Channel.GetSoftware(SWType, IsActive);
        }
        
        public System.Data.DataTable GetStorageType(int IsActive) {
            return base.Channel.GetStorageType(IsActive);
        }
        
        public System.Data.DataTable GetVMHost(int IsActive) {
            return base.Channel.GetVMHost(IsActive);
        }
        
        public bool InsertRAM(string RAM, int IsActive, int TransactionBy) {
            return base.Channel.InsertRAM(RAM, IsActive, TransactionBy);
        }
        
        public bool UpdateRAM(string RAM, int IsActive, int TransactionBy) {
            return base.Channel.UpdateRAM(RAM, IsActive, TransactionBy);
        }
        
        public int InsertCloudDepolyment(
                    int DeploymentID, 
                    int SignupID, 
                    int CloudTypeID, 
                    int NoofVM, 
                    int PackageTypeID, 
                    int HighAvalibility, 
                    int ProcessorSpeedID, 
                    int NoofCores, 
                    int RAMID, 
                    int StorageTypeID, 
                    string StorageCapacity, 
                    int NoofNIC, 
                    int NoofPublicIPs, 
                    string PriIPAddress, 
                    string PriVLAN, 
                    string SecIPAddress, 
                    string SecVLAN, 
                    string PriServerLoc, 
                    string PriServerPool, 
                    int PriVMHostID, 
                    string SecServerLoc, 
                    string SecServerPool, 
                    int SecVMHostID, 
                    string OSName, 
                    int ExchangeRequired, 
                    string ExchangeName, 
                    int NoofExchangeCALs, 
                    int DtabaseRequired, 
                    string DatabaseName, 
                    int RemoteAccessRequired, 
                    int NoofRemoteCALs, 
                    int VPNRequired, 
                    int NoofVPNUsers, 
                    string VPNUserID, 
                    string VPNPassword, 
                    int PortalAccessRequired, 
                    string PortalUserID, 
                    string PortalPassword, 
                    int VMSnapshotRequired, 
                    string VMSnapshotFrequency, 
                    string VMSnapshotPath, 
                    string Remarks, 
                    int Internet_SignupID, 
                    int MPLSLayer3_SignupID, 
                    int MPLSLayer2_SignupID, 
                    int FLL_SignupID, 
                    int Transit_SignupID, 
                    int layer2VPN_SignupID, 
                    int TransactionBy) {
            return base.Channel.InsertCloudDepolyment(DeploymentID, SignupID, CloudTypeID, NoofVM, PackageTypeID, HighAvalibility, ProcessorSpeedID, NoofCores, RAMID, StorageTypeID, StorageCapacity, NoofNIC, NoofPublicIPs, PriIPAddress, PriVLAN, SecIPAddress, SecVLAN, PriServerLoc, PriServerPool, PriVMHostID, SecServerLoc, SecServerPool, SecVMHostID, OSName, ExchangeRequired, ExchangeName, NoofExchangeCALs, DtabaseRequired, DatabaseName, RemoteAccessRequired, NoofRemoteCALs, VPNRequired, NoofVPNUsers, VPNUserID, VPNPassword, PortalAccessRequired, PortalUserID, PortalPassword, VMSnapshotRequired, VMSnapshotFrequency, VMSnapshotPath, Remarks, Internet_SignupID, MPLSLayer3_SignupID, MPLSLayer2_SignupID, FLL_SignupID, Transit_SignupID, layer2VPN_SignupID, TransactionBy);
        }
        
        public bool UpdateCloudDelpoyment(
                    int DeploymentID, 
                    int SignupID, 
                    int CloudTypeID, 
                    int NoofVM, 
                    int PackageTypeID, 
                    int HighAvalibility, 
                    int ProcessorSpeedID, 
                    int NoofCores, 
                    int RAMID, 
                    int StorageTypeID, 
                    string StorageCapacity, 
                    int NoofNIC, 
                    int NoofPublicIPs, 
                    string PriIPAddress, 
                    string PriVLAN, 
                    string SecIPAddress, 
                    string SecVLAN, 
                    string PriServerLoc, 
                    string PriServerPool, 
                    int PriVMHostID, 
                    string SecServerLoc, 
                    string SecServerPool, 
                    int SecVMHostID, 
                    string OSName, 
                    int ExchangeRequired, 
                    string ExchangeName, 
                    int NoofExchangeCALs, 
                    int DtabaseRequired, 
                    string DatabaseName, 
                    int RemoteAccessRequired, 
                    int NoofRemoteCALs, 
                    int VPNRequired, 
                    int NoofVPNUsers, 
                    string VPNUserID, 
                    string VPNPassword, 
                    int PortalAccessRequired, 
                    string PortalUserID, 
                    string PortalPassword, 
                    int VMSnapshotRequired, 
                    string VMSnapshotFrequency, 
                    string VMSnapshotPath, 
                    System.DateTime DeploymentDate, 
                    System.DateTime ActivationDate, 
                    string Remarks, 
                    int Internet_SignupID, 
                    int MPLSLayer3_SignupID, 
                    int MPLSLayer2_SignupID, 
                    int FLL_SignupID, 
                    int Transit_SignupID, 
                    int layer2VPN_SignupID, 
                    int TransactionBy, 
                    int Mark) {
            return base.Channel.UpdateCloudDelpoyment(DeploymentID, SignupID, CloudTypeID, NoofVM, PackageTypeID, HighAvalibility, ProcessorSpeedID, NoofCores, RAMID, StorageTypeID, StorageCapacity, NoofNIC, NoofPublicIPs, PriIPAddress, PriVLAN, SecIPAddress, SecVLAN, PriServerLoc, PriServerPool, PriVMHostID, SecServerLoc, SecServerPool, SecVMHostID, OSName, ExchangeRequired, ExchangeName, NoofExchangeCALs, DtabaseRequired, DatabaseName, RemoteAccessRequired, NoofRemoteCALs, VPNRequired, NoofVPNUsers, VPNUserID, VPNPassword, PortalAccessRequired, PortalUserID, PortalPassword, VMSnapshotRequired, VMSnapshotFrequency, VMSnapshotPath, DeploymentDate, ActivationDate, Remarks, Internet_SignupID, MPLSLayer3_SignupID, MPLSLayer2_SignupID, FLL_SignupID, Transit_SignupID, layer2VPN_SignupID, TransactionBy, Mark);
        }
        
        public System.Data.DataTable GetSalesPersonsbyInfraID(int InfraID) {
            return base.Channel.GetSalesPersonsbyInfraID(InfraID);
        }
        
        public bool InsertBusinessType(string BusinessType, int Isvalid) {
            return base.Channel.InsertBusinessType(BusinessType, Isvalid);
        }
        
        public bool InsertBandwith(string Bandwidth, int ServiceID) {
            return base.Channel.InsertBandwith(Bandwidth, ServiceID);
        }
        
        public int InsertMasterCustomer(int CustomerCode, string Customer, string Logo, string Country, string State, string City, string EmailAddress, string Phone, string Remarks, int IsActive, int TransactionBy) {
            return base.Channel.InsertMasterCustomer(CustomerCode, Customer, Logo, Country, State, City, EmailAddress, Phone, Remarks, IsActive, TransactionBy);
        }
        
        public bool UpdateMasterCustomer(int CustomerCode, string Customer, string Logo, string Country, string State, string City, string EmailAddress, string Phone, string Remarks, int IsActive, int TransactionBy) {
            return base.Channel.UpdateMasterCustomer(CustomerCode, Customer, Logo, Country, State, City, EmailAddress, Phone, Remarks, IsActive, TransactionBy);
        }
        
        public System.Data.DataTable SearchMasterCustomer(int CustomerCode, string CustomerName, int IsActive) {
            return base.Channel.SearchMasterCustomer(CustomerCode, CustomerName, IsActive);
        }
        
        public System.Data.DataTable GetMasterCustomer() {
            return base.Channel.GetMasterCustomer();
        }
        
        public bool InsertProjects(int CustomerCode, int ProjectCode, string Project, string PO, string Description, int TransactionBy) {
            return base.Channel.InsertProjects(CustomerCode, ProjectCode, Project, PO, Description, TransactionBy);
        }
        
        public System.Data.DataTable GetProjectsByCustomerCode(long CustomerCode) {
            return base.Channel.GetProjectsByCustomerCode(CustomerCode);
        }
        
        public bool InsertLocation(int LocationCode, int CityID, string Location, string Remarks, int TransactionBy) {
            return base.Channel.InsertLocation(LocationCode, CityID, Location, Remarks, TransactionBy);
        }
        
        public string UpdateLocation(int LocationCode, string Location, string Remarks, int TransactionBy) {
            return base.Channel.UpdateLocation(LocationCode, Location, Remarks, TransactionBy);
        }
        
        public System.Data.DataTable GetLocations(int CityID, int locCode, string Flag) {
            return base.Channel.GetLocations(CityID, locCode, Flag);
        }
        
        public int InsertCity(string CityName, int CityCode, int Region, int IsActive) {
            return base.Channel.InsertCity(CityName, CityCode, Region, IsActive);
        }
        
        public int InsertInternationCity(string CityName, int CountryID, int IsActive) {
            return base.Channel.InsertInternationCity(CityName, CountryID, IsActive);
        }
        
        public bool UpdateCity(string CityID, string CityName, int CityCode, int Region, int IsActive) {
            return base.Channel.UpdateCity(CityID, CityName, CityCode, Region, IsActive);
        }
        
        public System.Data.DataTable GetCustomerIdentification() {
            return base.Channel.GetCustomerIdentification();
        }
        
        public System.Data.DataTable GetCustomersList() {
            return base.Channel.GetCustomersList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadFileSLAResponse RainMaker.BSS_Service.Service1Soap.UploadFileSLA(RainMaker.BSS_Service.UploadFileSLARequest request) {
            return base.Channel.UploadFileSLA(request);
        }
        
        public string UploadFileSLA(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadFileSLARequest inValue = new RainMaker.BSS_Service.UploadFileSLARequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadFileSLAResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadFileSLA(inValue);
            return retVal.UploadFileSLAResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadFileBOGResponse RainMaker.BSS_Service.Service1Soap.UploadFileBOG(RainMaker.BSS_Service.UploadFileBOGRequest request) {
            return base.Channel.UploadFileBOG(request);
        }
        
        public string UploadFileBOG(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadFileBOGRequest inValue = new RainMaker.BSS_Service.UploadFileBOGRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadFileBOGResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadFileBOG(inValue);
            return retVal.UploadFileBOGResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadFileSignupResponse RainMaker.BSS_Service.Service1Soap.UploadFileSignup(RainMaker.BSS_Service.UploadFileSignupRequest request) {
            return base.Channel.UploadFileSignup(request);
        }
        
        public string UploadFileSignup(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadFileSignupRequest inValue = new RainMaker.BSS_Service.UploadFileSignupRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadFileSignupResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadFileSignup(inValue);
            return retVal.UploadFileSignupResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadFileMSCResponse RainMaker.BSS_Service.Service1Soap.UploadFileMSC(RainMaker.BSS_Service.UploadFileMSCRequest request) {
            return base.Channel.UploadFileMSC(request);
        }
        
        public string UploadFileMSC(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadFileMSCRequest inValue = new RainMaker.BSS_Service.UploadFileMSCRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadFileMSCResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadFileMSC(inValue);
            return retVal.UploadFileMSCResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadFileSignupResponse RainMaker.BSS_Service.Service1Soap.DownloadFileSignup(RainMaker.BSS_Service.DownloadFileSignupRequest request) {
            return base.Channel.DownloadFileSignup(request);
        }
        
        public byte[] DownloadFileSignup(string filename) {
            RainMaker.BSS_Service.DownloadFileSignupRequest inValue = new RainMaker.BSS_Service.DownloadFileSignupRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadFileSignupResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadFileSignup(inValue);
            return retVal.DownloadFileSignupResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadManualResponse RainMaker.BSS_Service.Service1Soap.DownloadManual(RainMaker.BSS_Service.DownloadManualRequest request) {
            return base.Channel.DownloadManual(request);
        }
        
        public byte[] DownloadManual() {
            RainMaker.BSS_Service.DownloadManualRequest inValue = new RainMaker.BSS_Service.DownloadManualRequest();
            RainMaker.BSS_Service.DownloadManualResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadManual(inValue);
            return retVal.DownloadManualResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadFileSLDResponse RainMaker.BSS_Service.Service1Soap.DownloadFileSLD(RainMaker.BSS_Service.DownloadFileSLDRequest request) {
            return base.Channel.DownloadFileSLD(request);
        }
        
        public byte[] DownloadFileSLD(string filename) {
            RainMaker.BSS_Service.DownloadFileSLDRequest inValue = new RainMaker.BSS_Service.DownloadFileSLDRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadFileSLDResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadFileSLD(inValue);
            return retVal.DownloadFileSLDResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadFileBCaseResponse RainMaker.BSS_Service.Service1Soap.DownloadFileBCase(RainMaker.BSS_Service.DownloadFileBCaseRequest request) {
            return base.Channel.DownloadFileBCase(request);
        }
        
        public byte[] DownloadFileBCase(string filename) {
            RainMaker.BSS_Service.DownloadFileBCaseRequest inValue = new RainMaker.BSS_Service.DownloadFileBCaseRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadFileBCaseResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadFileBCase(inValue);
            return retVal.DownloadFileBCaseResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadFileNDResponse RainMaker.BSS_Service.Service1Soap.UploadFileND(RainMaker.BSS_Service.UploadFileNDRequest request) {
            return base.Channel.UploadFileND(request);
        }
        
        public string UploadFileND(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadFileNDRequest inValue = new RainMaker.BSS_Service.UploadFileNDRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadFileNDResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadFileND(inValue);
            return retVal.UploadFileNDResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadFileNDResponse RainMaker.BSS_Service.Service1Soap.DownloadFileND(RainMaker.BSS_Service.DownloadFileNDRequest request) {
            return base.Channel.DownloadFileND(request);
        }
        
        public byte[] DownloadFileND(string filename) {
            RainMaker.BSS_Service.DownloadFileNDRequest inValue = new RainMaker.BSS_Service.DownloadFileNDRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadFileNDResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadFileND(inValue);
            return retVal.DownloadFileNDResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadNOCFileResponse RainMaker.BSS_Service.Service1Soap.UploadNOCFile(RainMaker.BSS_Service.UploadNOCFileRequest request) {
            return base.Channel.UploadNOCFile(request);
        }
        
        public string UploadNOCFile(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadNOCFileRequest inValue = new RainMaker.BSS_Service.UploadNOCFileRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadNOCFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadNOCFile(inValue);
            return retVal.UploadNOCFileResult;
        }
        
        public bool NOCFileDelete(string filename) {
            return base.Channel.NOCFileDelete(filename);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadNOCFileResponse RainMaker.BSS_Service.Service1Soap.DownloadNOCFile(RainMaker.BSS_Service.DownloadNOCFileRequest request) {
            return base.Channel.DownloadNOCFile(request);
        }
        
        public byte[] DownloadNOCFile(string filename) {
            RainMaker.BSS_Service.DownloadNOCFileRequest inValue = new RainMaker.BSS_Service.DownloadNOCFileRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadNOCFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadNOCFile(inValue);
            return retVal.DownloadNOCFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadTXNFileResponse RainMaker.BSS_Service.Service1Soap.UploadTXNFile(RainMaker.BSS_Service.UploadTXNFileRequest request) {
            return base.Channel.UploadTXNFile(request);
        }
        
        public string UploadTXNFile(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadTXNFileRequest inValue = new RainMaker.BSS_Service.UploadTXNFileRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadTXNFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadTXNFile(inValue);
            return retVal.UploadTXNFileResult;
        }
        
        public bool DeleteTXNFile(string filename) {
            return base.Channel.DeleteTXNFile(filename);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadTXNFileResponse RainMaker.BSS_Service.Service1Soap.DownloadTXNFile(RainMaker.BSS_Service.DownloadTXNFileRequest request) {
            return base.Channel.DownloadTXNFile(request);
        }
        
        public byte[] DownloadTXNFile(string filename) {
            RainMaker.BSS_Service.DownloadTXNFileRequest inValue = new RainMaker.BSS_Service.DownloadTXNFileRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadTXNFileResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadTXNFile(inValue);
            return retVal.DownloadTXNFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadCustomerImageResponse RainMaker.BSS_Service.Service1Soap.UploadCustomerImage(RainMaker.BSS_Service.UploadCustomerImageRequest request) {
            return base.Channel.UploadCustomerImage(request);
        }
        
        public bool UploadCustomerImage(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadCustomerImageRequest inValue = new RainMaker.BSS_Service.UploadCustomerImageRequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadCustomerImageResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadCustomerImage(inValue);
            return retVal.UploadCustomerImageResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadCustomerImageResponse RainMaker.BSS_Service.Service1Soap.DownloadCustomerImage(RainMaker.BSS_Service.DownloadCustomerImageRequest request) {
            return base.Channel.DownloadCustomerImage(request);
        }
        
        public byte[] DownloadCustomerImage(string filename) {
            RainMaker.BSS_Service.DownloadCustomerImageRequest inValue = new RainMaker.BSS_Service.DownloadCustomerImageRequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadCustomerImageResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadCustomerImage(inValue);
            return retVal.DownloadCustomerImageResult;
        }
        
        public bool DeleteCustomerImage(string filename) {
            return base.Channel.DeleteCustomerImage(filename);
        }
        
        public string InsertRejectionForm(string SignupID, System.DateTime RejectionDate, int RejectionID, int InfraID, string Notes, string transBy) {
            return base.Channel.InsertRejectionForm(SignupID, RejectionDate, RejectionID, InfraID, Notes, transBy);
        }
        
        public int InsertAdditionalRequest(
                    int SignupID, 
                    string ReqType, 
                    int Add_InfraID, 
                    System.DateTime CODDate, 
                    System.DateTime RFSDate, 
                    int CityID, 
                    int LocationCode, 
                    int AreaID, 
                    int NodeID, 
                    int IsBOG, 
                    string BOG, 
                    int TypeID, 
                    string Address, 
                    string Notes, 
                    double InfraCost, 
                    double EquipCost, 
                    double OTCParty, 
                    double MRCParty, 
                    double OTC, 
                    double MRC, 
                    double ROI, 
                    int TransactionBy, 
                    System.DateTime TransactionDateTime) {
            return base.Channel.InsertAdditionalRequest(SignupID, ReqType, Add_InfraID, CODDate, RFSDate, CityID, LocationCode, AreaID, NodeID, IsBOG, BOG, TypeID, Address, Notes, InfraCost, EquipCost, OTCParty, MRCParty, OTC, MRC, ROI, TransactionBy, TransactionDateTime);
        }
        
        public bool UpdateAdditionalRequest(
                    int ID, 
                    int SignupID, 
                    string ReqType, 
                    int InfraID, 
                    System.DateTime CODDate, 
                    System.DateTime RFSDate, 
                    int CityID, 
                    int LocationCode, 
                    int AreaID, 
                    int NodeID, 
                    int IsBOG, 
                    string BOG, 
                    int TypeID, 
                    string Address, 
                    string Notes, 
                    double InfraCost, 
                    double EquipCost, 
                    double OTCParty, 
                    double MRCParty, 
                    double OTC, 
                    double MRC, 
                    double ROI, 
                    int TransactionBy, 
                    System.DateTime TransactionDateTime) {
            return base.Channel.UpdateAdditionalRequest(ID, SignupID, ReqType, InfraID, CODDate, RFSDate, CityID, LocationCode, AreaID, NodeID, IsBOG, BOG, TypeID, Address, Notes, InfraCost, EquipCost, OTCParty, MRCParty, OTC, MRC, ROI, TransactionBy, TransactionDateTime);
        }
        
        public bool Addtional_Mail(int SignUpID, int Add_InfraID, string ReqType, string Notes, int LOBID, int ServiceID, int InfraID, int Add_ID) {
            return base.Channel.Addtional_Mail(SignUpID, Add_InfraID, ReqType, Notes, LOBID, ServiceID, InfraID, Add_ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.UploadFileMEMOResponse RainMaker.BSS_Service.Service1Soap.UploadFileMEMO(RainMaker.BSS_Service.UploadFileMEMORequest request) {
            return base.Channel.UploadFileMEMO(request);
        }
        
        public string UploadFileMEMO(byte[] picture, string filename) {
            RainMaker.BSS_Service.UploadFileMEMORequest inValue = new RainMaker.BSS_Service.UploadFileMEMORequest();
            inValue.picture = picture;
            inValue.filename = filename;
            RainMaker.BSS_Service.UploadFileMEMOResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).UploadFileMEMO(inValue);
            return retVal.UploadFileMEMOResult;
        }
        
        public System.Data.DataTable GetAdditionalRequestbyID(int ID) {
            return base.Channel.GetAdditionalRequestbyID(ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RainMaker.BSS_Service.DownloadFileMEMOResponse RainMaker.BSS_Service.Service1Soap.DownloadFileMEMO(RainMaker.BSS_Service.DownloadFileMEMORequest request) {
            return base.Channel.DownloadFileMEMO(request);
        }
        
        public byte[] DownloadFileMEMO(string filename) {
            RainMaker.BSS_Service.DownloadFileMEMORequest inValue = new RainMaker.BSS_Service.DownloadFileMEMORequest();
            inValue.filename = filename;
            RainMaker.BSS_Service.DownloadFileMEMOResponse retVal = ((RainMaker.BSS_Service.Service1Soap)(this)).DownloadFileMEMO(inValue);
            return retVal.DownloadFileMEMOResult;
        }
        
        public System.Data.DataTable GetAdditionalReportData(string SelectQuery, int InfraID, string RequestType, string FromDate, string ToDate, string ReportType, string CircuitName) {
            return base.Channel.GetAdditionalReportData(SelectQuery, InfraID, RequestType, FromDate, ToDate, ReportType, CircuitName);
        }
        
        public System.Data.DataTable GetAdditonalView(string Company_NAme, int SignupID, string BSSCode, string infra, string CMSID, string GPID) {
            return base.Channel.GetAdditonalView(Company_NAme, SignupID, BSSCode, infra, CMSID, GPID);
        }
        
        public System.Data.DataTable GetODFPortCapacity() {
            return base.Channel.GetODFPortCapacity();
        }
        
        public int InsertODFPort(int NodeID, int ODFTypeID, int No_Of_ODFTrayID, int ODFPortCapacityID, string ODFName, int IsActive, string Description, int TransactionBy) {
            return base.Channel.InsertODFPort(NodeID, ODFTypeID, No_Of_ODFTrayID, ODFPortCapacityID, ODFName, IsActive, Description, TransactionBy);
        }
        
        public bool UpdateODFPort(int ODFID, int NodeID, int ODFTypeID, int No_Of_ODFTrayID, int ODFPortCapacityID, string ODFName, int IsActive, string Description, int TransactionBy) {
            return base.Channel.UpdateODFPort(ODFID, NodeID, ODFTypeID, No_Of_ODFTrayID, ODFPortCapacityID, ODFName, IsActive, Description, TransactionBy);
        }
        
        public System.Data.DataTable SearchODF(int CityID, int NodeID, int ODFTypeID, int No_Of_ODFTrayID, int ODFPortCapacityID) {
            return base.Channel.SearchODF(CityID, NodeID, ODFTypeID, No_Of_ODFTrayID, ODFPortCapacityID);
        }
        
        public System.Data.DataTable GetODFPortStatus() {
            return base.Channel.GetODFPortStatus();
        }
        
        public bool UpdateODFPortStatus(int PortID, int StatusID) {
            return base.Channel.UpdateODFPortStatus(PortID, StatusID);
        }
        
        public System.Data.DataTable GetODFPortsbyODFID(int ODFID, string Flag) {
            return base.Channel.GetODFPortsbyODFID(ODFID, Flag);
        }
        
        public System.Data.DataTable GetODF(int CityID, int ODFTypeID, int NodeID) {
            return base.Channel.GetODF(CityID, ODFTypeID, NodeID);
        }
        
        public System.Data.DataTable GetEngineer(int RegionID, int CityID) {
            return base.Channel.GetEngineer(RegionID, CityID);
        }
        
        public bool DeploymentConformationMail(int DeploymentID, int LOBID, int ServcieUnitID, int InfraID, string Stage, int CircuitTypeID) {
            return base.Channel.DeploymentConformationMail(DeploymentID, LOBID, ServcieUnitID, InfraID, Stage, CircuitTypeID);
        }
        
        public bool UpdateDeployment(
                    int DeploymentID, 
                    int SignupID, 
                    int Pri_InfraMediumID, 
                    int Pri_ODFID, 
                    int Pri_ODFPortID, 
                    int Pri_ODFTrayID, 
                    string Pri_DFN, 
                    int Pri_SLAID, 
                    int Pri_InterfaceID, 
                    string Pri_TotalMediaLosses, 
                    int Pri_Client_ODFID, 
                    int Pri_Client_ODFPortID, 
                    int Pri_Client_ODFTrayID, 
                    int Sec_InfraMediumID, 
                    int Sec_ODFID, 
                    int Sec_ODFPortID, 
                    int Sec_ODFTrayID, 
                    string Sec_DFN, 
                    int Sec_SLAID, 
                    int Sec_InterfaceID, 
                    string Sec_TotalMediaLosses, 
                    int Sec_Client_ODFID, 
                    int Sec_Client_ODFPortID, 
                    int Sec_Client_ODFTrayID, 
                    int EngineerID, 
                    int SplicerID, 
                    System.DateTime DeploymentDate, 
                    System.DateTime HandoverDate, 
                    string TestedBy, 
                    string TestedRemarks, 
                    string InfraLayOutDiagram, 
                    string OTDRTraceResult, 
                    string BandwidthTestResult, 
                    string Notes, 
                    int TransactionBy, 
                    int PrimaryCircuitOwnerID, 
                    int SecondaryCircuitOwnerID, 
                    int CircuitTypeID, 
                    int NodeID, 
                    string Flag) {
            return base.Channel.UpdateDeployment(DeploymentID, SignupID, Pri_InfraMediumID, Pri_ODFID, Pri_ODFPortID, Pri_ODFTrayID, Pri_DFN, Pri_SLAID, Pri_InterfaceID, Pri_TotalMediaLosses, Pri_Client_ODFID, Pri_Client_ODFPortID, Pri_Client_ODFTrayID, Sec_InfraMediumID, Sec_ODFID, Sec_ODFPortID, Sec_ODFTrayID, Sec_DFN, Sec_SLAID, Sec_InterfaceID, Sec_TotalMediaLosses, Sec_Client_ODFID, Sec_Client_ODFPortID, Sec_Client_ODFTrayID, EngineerID, SplicerID, DeploymentDate, HandoverDate, TestedBy, TestedRemarks, InfraLayOutDiagram, OTDRTraceResult, BandwidthTestResult, Notes, TransactionBy, PrimaryCircuitOwnerID, SecondaryCircuitOwnerID, CircuitTypeID, NodeID, Flag);
        }
        
        public bool HandoverConformationMail(int DeploymentID, int LOBID, int ServcieUnitID, int InfraID, string Stage) {
            return base.Channel.HandoverConformationMail(DeploymentID, LOBID, ServcieUnitID, InfraID, Stage);
        }
        
        public int InsertDeployment(
                    int DeploymentID, 
                    int SignupID, 
                    int Pri_InfraMediumID, 
                    int Pri_ODFID, 
                    int Pri_ODFPortID, 
                    int Pri_ODFTrayID, 
                    string Pri_DFN, 
                    int Pri_SLAID, 
                    int Pri_InterfaceID, 
                    string Pri_TotalMediaLosses, 
                    int Pri_Client_ODFID, 
                    int Pri_Client_ODFPortID, 
                    int Pri_Client_ODFTrayID, 
                    int Sec_InfraMediumID, 
                    int Sec_ODFID, 
                    int Sec_ODFPortID, 
                    int Sec_ODFTrayID, 
                    string Sec_DFN, 
                    int Sec_SLAID, 
                    int Sec_InterfaceID, 
                    string Sec_TotalMediaLosses, 
                    int Sec_Client_ODFID, 
                    int Sec_Client_ODFPortID, 
                    int Sec_Client_ODFTrayID, 
                    int EngineerID, 
                    int SplicerID, 
                    System.DateTime DeploymentDate, 
                    System.DateTime HandoverDate, 
                    string TestedBy, 
                    string TestedRemarks, 
                    string InfraLayOutDiagram, 
                    string OTDRTraceResult, 
                    string BandwidthTestResult, 
                    string Notes, 
                    int TransactionBy, 
                    int PrimaryCircuitOwnerID, 
                    int SecondaryCircuitOwnerID, 
                    int CircuitTypeID, 
                    int NodeID, 
                    string Flag) {
            return base.Channel.InsertDeployment(DeploymentID, SignupID, Pri_InfraMediumID, Pri_ODFID, Pri_ODFPortID, Pri_ODFTrayID, Pri_DFN, Pri_SLAID, Pri_InterfaceID, Pri_TotalMediaLosses, Pri_Client_ODFID, Pri_Client_ODFPortID, Pri_Client_ODFTrayID, Sec_InfraMediumID, Sec_ODFID, Sec_ODFPortID, Sec_ODFTrayID, Sec_DFN, Sec_SLAID, Sec_InterfaceID, Sec_TotalMediaLosses, Sec_Client_ODFID, Sec_Client_ODFPortID, Sec_Client_ODFTrayID, EngineerID, SplicerID, DeploymentDate, HandoverDate, TestedBy, TestedRemarks, InfraLayOutDiagram, OTDRTraceResult, BandwidthTestResult, Notes, TransactionBy, PrimaryCircuitOwnerID, SecondaryCircuitOwnerID, CircuitTypeID, NodeID, Flag);
        }
        
        public System.Data.DataTable GetODFType() {
            return base.Channel.GetODFType();
        }
        
        public System.Data.DataTable GetODFTraybyODFID(int ODFID) {
            return base.Channel.GetODFTraybyODFID(ODFID);
        }
        
        public System.Data.DataTable GetSLA() {
            return base.Channel.GetSLA();
        }
        
        public System.Data.DataTable GetNo_ofTray() {
            return base.Channel.GetNo_ofTray();
        }
        
        public System.Data.DataTable GetInterface() {
            return base.Channel.GetInterface();
        }
        
        public System.Data.DataTable SearchDeploymentCircuits(int DeploymentID, int SignupID, string BSSCODE, string GPID, string CMSID, int CircuitTypeID, int CircuitOwnerID, int InfraID, int CityID, string CircuitName, int StatusID) {
            return base.Channel.SearchDeploymentCircuits(DeploymentID, SignupID, BSSCODE, GPID, CMSID, CircuitTypeID, CircuitOwnerID, InfraID, CityID, CircuitName, StatusID);
        }
        
        public System.Data.DataTable GetCircuitDeploymentbyDeploymentID(int DeploymentID) {
            return base.Channel.GetCircuitDeploymentbyDeploymentID(DeploymentID);
        }
        
        public System.Data.DataTable GetCircuitDeploymentDetatils(int SignupID) {
            return base.Channel.GetCircuitDeploymentDetatils(SignupID);
        }
        
        public System.Data.DataTable GetSwitchPortCapacity() {
            return base.Channel.GetSwitchPortCapacity();
        }
        
        public System.Data.DataTable GetSwitchPortsbySwitchID(int SwitchID, string Flag) {
            return base.Channel.GetSwitchPortsbySwitchID(SwitchID, Flag);
        }
        
        public System.Data.DataTable GetSwitches(int SwitchID, int IsActive, int NodeID) {
            return base.Channel.GetSwitches(SwitchID, IsActive, NodeID);
        }
        
        public System.Data.DataTable GetOLT(int OLTID, int IsActive) {
            return base.Channel.GetOLT(OLTID, IsActive);
        }
        
        public System.Data.DataTable SearchSwitches(int CityID, int NodeID, int SwitchModelID, int SwitchPortCapacityID, string SwitchName) {
            return base.Channel.SearchSwitches(CityID, NodeID, SwitchModelID, SwitchPortCapacityID, SwitchName);
        }
        
        public int InsertSwitch(int SwitchID, string SwitchName, int NodeID, int SwitchModelID, int SwitchPortCapacityID, string SwitchIP, string SwitchSequence, string Description, int IsActive, int TransactionBy) {
            return base.Channel.InsertSwitch(SwitchID, SwitchName, NodeID, SwitchModelID, SwitchPortCapacityID, SwitchIP, SwitchSequence, Description, IsActive, TransactionBy);
        }
        
        public bool UpdateSwitch(int SwitchID, string SwitchName, int NodeID, int SwitchModelID, int SwitchPortCapacityID, string SwitchIP, string SwitchSequence, string Description, int IsActive, int TransactionBy) {
            return base.Channel.UpdateSwitch(SwitchID, SwitchName, NodeID, SwitchModelID, SwitchPortCapacityID, SwitchIP, SwitchSequence, Description, IsActive, TransactionBy);
        }
        
        public bool UpdateSwitchPortStatus(int SwitchPortID, int StatusID) {
            return base.Channel.UpdateSwitchPortStatus(SwitchPortID, StatusID);
        }
        
        public System.Data.DataTable GetCPEWaveLength() {
            return base.Channel.GetCPEWaveLength();
        }
        
        public System.Data.DataTable GetCPEType() {
            return base.Channel.GetCPEType();
        }
        
        public System.Data.DataTable GetCircuitMode() {
            return base.Channel.GetCircuitMode();
        }
        
        public System.Data.DataTable GetFeedType() {
            return base.Channel.GetFeedType();
        }
        
        public System.Data.DataTable GetRouterType() {
            return base.Channel.GetRouterType();
        }
        
        public System.Data.DataTable GetExtraIp(int SignupID) {
            return base.Channel.GetExtraIp(SignupID);
        }
        
        public System.Data.DataTable GetRouter(int RouterID, int RouterTypeID, int IsActive) {
            return base.Channel.GetRouter(RouterID, RouterTypeID, IsActive);
        }
        
        public System.Data.DataTable GetModel(int ModelID, string ModelType, int IsActive, string Flag) {
            return base.Channel.GetModel(ModelID, ModelType, IsActive, Flag);
        }
        
        public System.Data.DataTable GetVRF(int VRFID, int ServiceUnitID, int IsActive) {
            return base.Channel.GetVRF(VRFID, ServiceUnitID, IsActive);
        }
        
        public System.Data.DataTable GetOperation(int OperationID, int IsActive) {
            return base.Channel.GetOperation(OperationID, IsActive);
        }
        
        public System.Data.DataTable GetNMSStatus(string IPAddress, string IfName) {
            return base.Channel.GetNMSStatus(IPAddress, IfName);
        }
        
        public System.Data.DataTable AuthenticateUser(string username, string pass) {
            return base.Channel.AuthenticateUser(username, pass);
        }
        
        public System.Data.DataTable GetSecModuleForm() {
            return base.Channel.GetSecModuleForm();
        }
        
        public System.Data.DataTable GetSecRoleForm(int RoleID) {
            return base.Channel.GetSecRoleForm(RoleID);
        }
        
        public bool InsertAndDeleteSecRoleForm(int roleID, int formID, int roleFormID) {
            return base.Channel.InsertAndDeleteSecRoleForm(roleID, formID, roleFormID);
        }
        
        public bool InsertAndUpdateSecRole(string rolename, int isActive, int roleID) {
            return base.Channel.InsertAndUpdateSecRole(rolename, isActive, roleID);
        }
        
        public System.Data.DataSet GetSecModuleSecModuleFormSecRole() {
            return base.Channel.GetSecModuleSecModuleFormSecRole();
        }
        
        public System.Data.DataTable GetSecRoleFormByRoleID(int RoleID) {
            return base.Channel.GetSecRoleFormByRoleID(RoleID);
        }
        
        public System.Data.DataTable GetSecRoles() {
            return base.Channel.GetSecRoles();
        }
        
        public System.Data.DataTable GetDepartment() {
            return base.Channel.GetDepartment();
        }
        
        public System.Data.DataTable GetSystemUsers() {
            return base.Channel.GetSystemUsers();
        }
        
        public bool InsertUser(string Name, string Username, string Password, int DepartmentID, int RoleID, int IsADAuthenticate, int IsActive) {
            return base.Channel.InsertUser(Name, Username, Password, DepartmentID, RoleID, IsADAuthenticate, IsActive);
        }
        
        public bool UpdateUser(int UserID, string Name, string Username, string Password, int DepartmentID, int RoleID, int IsADAuthenticate, int IsActive) {
            return base.Channel.UpdateUser(UserID, Name, Username, Password, DepartmentID, RoleID, IsADAuthenticate, IsActive);
        }
        
        public object[] GetMainControl(int roleID) {
            return base.Channel.GetMainControl(roleID);
        }
        
        public System.Data.DataTable GetModuleFormsViaRoleID(int roleID) {
            return base.Channel.GetModuleFormsViaRoleID(roleID);
        }
        
        public bool InsertActivity(int SignupID, string Remarks, System.DateTime TransactionTime, string TransactionBy) {
            return base.Channel.InsertActivity(SignupID, Remarks, TransactionTime, TransactionBy);
        }
        
        public System.Data.DataTable SearchEmailTo(int LobID, int InfraID, int ServiceUnitID, string Name, string Stage) {
            return base.Channel.SearchEmailTo(LobID, InfraID, ServiceUnitID, Name, Stage);
        }
        
        public System.Data.DataTable SearchEmailCC(int LobID, int InfraID, int ServiceUnitID, string Name, string Stage) {
            return base.Channel.SearchEmailCC(LobID, InfraID, ServiceUnitID, Name, Stage);
        }
        
        public bool InsertEmailTo(string ToID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate) {
            return base.Channel.InsertEmailTo(ToID, Name, LobID, ServiceUnitID, InfraID, Stage, IsActive, LoginUser, LoginUserDate);
        }
        
        public bool UpdateEmailTo(int seq, string ToID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate) {
            return base.Channel.UpdateEmailTo(seq, ToID, Name, LobID, ServiceUnitID, InfraID, Stage, IsActive, LoginUser, LoginUserDate);
        }
        
        public bool InsertEmailCC(string CCID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate) {
            return base.Channel.InsertEmailCC(CCID, Name, LobID, ServiceUnitID, InfraID, Stage, IsActive, LoginUser, LoginUserDate);
        }
        
        public bool UpdateEmailCC(int seq, string CCID, string Name, int LobID, int ServiceUnitID, int InfraID, string Stage, int IsActive, string LoginUser, System.DateTime LoginUserDate) {
            return base.Channel.UpdateEmailCC(seq, CCID, Name, LobID, ServiceUnitID, InfraID, Stage, IsActive, LoginUser, LoginUserDate);
        }
        
        public bool ExecQuery(string Query) {
            return base.Channel.ExecQuery(Query);
        }
        
        public System.Data.DataTable GetInfraMedium(int InfraMediumID) {
            return base.Channel.GetInfraMedium(InfraMediumID);
        }
        
        public System.Data.DataTable GetCircuitOwner() {
            return base.Channel.GetCircuitOwner();
        }
        
        public System.Data.DataTable GetThirdPartyType() {
            return base.Channel.GetThirdPartyType();
        }
        
        public object UpdateArea(int AreaID, string Area, bool active, int transby) {
            return base.Channel.UpdateArea(AreaID, Area, active, transby);
        }
        
        public System.Data.DataTable Get_LOB() {
            return base.Channel.Get_LOB();
        }
        
        public System.Data.DataTable Get_Cities() {
            return base.Channel.Get_Cities();
        }
        
        public System.Data.DataTable GetSalesPersons() {
            return base.Channel.GetSalesPersons();
        }
        
        public System.Data.DataTable GetRejectionReasons() {
            return base.Channel.GetRejectionReasons();
        }
        
        public System.Data.DataTable GetEquipmentProperty() {
            return base.Channel.GetEquipmentProperty();
        }
        
        public System.Data.DataTable GetServiceUnitByLOB(int LOB_ID) {
            return base.Channel.GetServiceUnitByLOB(LOB_ID);
        }
        
        public System.Data.DataTable GetCircuitTypeByInfraID(int InfraID) {
            return base.Channel.GetCircuitTypeByInfraID(InfraID);
        }
        
        public System.Data.DataTable GetBandwidthEnterprise() {
            return base.Channel.GetBandwidthEnterprise();
        }
        
        public System.Data.DataTable GetInfra(int IsActive, int ServiceUnitID) {
            return base.Channel.GetInfra(IsActive, ServiceUnitID);
        }
        
        public System.Data.DataTable GetRequestType() {
            return base.Channel.GetRequestType();
        }
        
        public System.Data.DataTable GetTypeDesc() {
            return base.Channel.GetTypeDesc();
        }
        
        public System.Data.DataTable GetTypeDescbyOwnerID(int OwnerID) {
            return base.Channel.GetTypeDescbyOwnerID(OwnerID);
        }
        
        public System.Data.DataTable GetBusinessType() {
            return base.Channel.GetBusinessType();
        }
        
        public System.Data.DataTable GetPaymentTerms() {
            return base.Channel.GetPaymentTerms();
        }
        
        public System.Data.DataTable GetCircuitStatus(string Parameter) {
            return base.Channel.GetCircuitStatus(Parameter);
        }
        
        public System.Data.DataTable GetPriority() {
            return base.Channel.GetPriority();
        }
        
        public System.Data.DataTable GetAreaByCityID(int CityID) {
            return base.Channel.GetAreaByCityID(CityID);
        }
        
        public System.Data.DataTable GetServiceUnits() {
            return base.Channel.GetServiceUnits();
        }
        
        public System.Data.DataTable GetCustomers() {
            return base.Channel.GetCustomers();
        }
        
        public System.Data.DataTable GetConnectivityType() {
            return base.Channel.GetConnectivityType();
        }
        
        public System.Data.DataTable GetRegions() {
            return base.Channel.GetRegions();
        }
        
        public System.Data.DataTable GetCityByRegion(int Region) {
            return base.Channel.GetCityByRegion(Region);
        }
        
        public System.Data.DataTable GetCountries() {
            return base.Channel.GetCountries();
        }
        
        public System.Data.DataTable GetSiteB_ID(string B_Company) {
            return base.Channel.GetSiteB_ID(B_Company);
        }
        
        public System.Data.DataTable GetRingByCity(int CityID, int IsActive) {
            return base.Channel.GetRingByCity(CityID, IsActive);
        }
        
        public bool InsertRing(string RingName, int CityID, int IsActive, int TransactionBy) {
            return base.Channel.InsertRing(RingName, CityID, IsActive, TransactionBy);
        }
        
        public bool UpdateRing(int RingID, string RingName, int CityID, int IsActive, int TransactionBy) {
            return base.Channel.UpdateRing(RingID, RingName, CityID, IsActive, TransactionBy);
        }
        
        public System.Data.DataTable GetTaskForce(string Name, string Desgination, int RegionID) {
            return base.Channel.GetTaskForce(Name, Desgination, RegionID);
        }
        
        public bool UpdateTaskForce(int TaskForceID, string Name, int RegionID, int IsActive, int TransactionBy, System.DateTime TransactionDate) {
            return base.Channel.UpdateTaskForce(TaskForceID, Name, RegionID, IsActive, TransactionBy, TransactionDate);
        }
        
        public bool InsertTaskForce(string Name, string Desgination, int RegionID, int IsActive, int TransactionBy, System.DateTime TransactionDate) {
            return base.Channel.InsertTaskForce(Name, Desgination, RegionID, IsActive, TransactionBy, TransactionDate);
        }
        
        public System.Data.DataTable GetSiteB_Circuits(int CustomerCode, int ServiceUnitID, int InfraID) {
            return base.Channel.GetSiteB_Circuits(CustomerCode, ServiceUnitID, InfraID);
        }
        
        public System.Data.DataTable GetClientStatusHistory(int SignupID, string CMSID) {
            return base.Channel.GetClientStatusHistory(SignupID, CMSID);
        }
        
        public System.Data.DataTable GetServiceUnitViaInfra(int InfraID) {
            return base.Channel.GetServiceUnitViaInfra(InfraID);
        }
        
        public System.Data.DataTable GetInfraViaLOB(int LOBID) {
            return base.Channel.GetInfraViaLOB(LOBID);
        }
        
        public int InsertCustomerSignup(
                    int SignupID, 
                    int LOBID, 
                    int ServiceUnitID, 
                    int InfraID, 
                    int CustomerCode, 
                    int ProjectCode, 
                    int LocationCode, 
                    int CircuitCode, 
                    string CircuitName, 
                    string Address, 
                    string Phone, 
                    string Email, 
                    string Fax, 
                    string Country, 
                    string TD_City, 
                    int CityID, 
                    int AreaID, 
                    int NodeID, 
                    int BusinessTypeID, 
                    string NTN, 
                    string Contact_Name, 
                    string Contact_Department, 
                    string Contact_Designation, 
                    string Contact_Office, 
                    string Contact_Phone, 
                    string Contact_Cell, 
                    string Contact_Fax, 
                    string Contact_Email, 
                    string Contact_SMS, 
                    string CNIC, 
                    System.DateTime CNICExpiryDate, 
                    int PriorityID, 
                    int IsSLA, 
                    string SLA, 
                    int IsBOG, 
                    string BOG, 
                    int IsSignup, 
                    string Signup, 
                    string TD_ConnectivityType, 
                    string TD_BandwidthType, 
                    string TD_CircuitSpeed, 
                    int BandwidthID, 
                    int ULPackageID, 
                    int DLPackageID, 
                    string InfraMedium, 
                    string InfraLength, 
                    int IsAddReq, 
                    int IsVOIP, 
                    int IsVC, 
                    int IsVPN, 
                    int IsExtraIP, 
                    string TD_ContractPeriod, 
                    string Bil_Name, 
                    string Bil_Company, 
                    string Bil_Address, 
                    string Bil_Country, 
                    string Bil_City, 
                    string Bil_PostalCode, 
                    string Bil_Phone, 
                    string Bil_Email, 
                    string Bil_Cell, 
                    string Bil_Fax, 
                    string Bil_Currency, 
                    string OTC_Type, 
                    double OTC_Charges, 
                    int PaymentTermID, 
                    double MRC_Charges, 
                    int CircuitOwnerID, 
                    string ThirdPartyAccountID, 
                    double OTC_Party, 
                    double MRC_Party, 
                    double InfraCost, 
                    int EquipmentPropertyID, 
                    double EquipmentCost, 
                    double ROI_Month, 
                    double PortCost, 
                    string SiteNature, 
                    double ProjectMRC, 
                    double ProjectOTC, 
                    double ProjectInvestment, 
                    double ProjectPayBack, 
                    int IsAdvancePayment, 
                    double AdvanceAmount, 
                    string ChequeNo, 
                    string ReceiptNo, 
                    int CircuitTypeID, 
                    int BackupInfraID, 
                    int BackupOwnerID, 
                    double BackupOTC, 
                    double BackupMRC, 
                    string SD_SiteA_Interface, 
                    string SD_SiteB_Interface, 
                    string SID_A_Company, 
                    string SID_A_Address, 
                    string SID_Country, 
                    string SID_A_City, 
                    string SID_A_Cell, 
                    string SID_A_Phone, 
                    string SID_A_Fax, 
                    string SID_A_Email, 
                    string SID_B_Company, 
                    string SID_B_Address, 
                    string SID_B_Country, 
                    string SID_B_City, 
                    string SID_B_Cell, 
                    string SID_B_Phone, 
                    string SID_B_Fax, 
                    string SID_B_Email, 
                    int ParentID, 
                    int SiteB, 
                    string GPID, 
                    string ClientRefID, 
                    int PartnerID, 
                    int IsGSAC, 
                    System.DateTime SignupDate, 
                    int SalesPersonID, 
                    System.DateTime OrderDate, 
                    string WorkingDays, 
                    System.DateTime RFSDate, 
                    string Notes, 
                    int StatusID, 
                    int TransactionBy, 
                    int Cus_Mail) {
            return base.Channel.InsertCustomerSignup(SignupID, LOBID, ServiceUnitID, InfraID, CustomerCode, ProjectCode, LocationCode, CircuitCode, CircuitName, Address, Phone, Email, Fax, Country, TD_City, CityID, AreaID, NodeID, BusinessTypeID, NTN, Contact_Name, Contact_Department, Contact_Designation, Contact_Office, Contact_Phone, Contact_Cell, Contact_Fax, Contact_Email, Contact_SMS, CNIC, CNICExpiryDate, PriorityID, IsSLA, SLA, IsBOG, BOG, IsSignup, Signup, TD_ConnectivityType, TD_BandwidthType, TD_CircuitSpeed, BandwidthID, ULPackageID, DLPackageID, InfraMedium, InfraLength, IsAddReq, IsVOIP, IsVC, IsVPN, IsExtraIP, TD_ContractPeriod, Bil_Name, Bil_Company, Bil_Address, Bil_Country, Bil_City, Bil_PostalCode, Bil_Phone, Bil_Email, Bil_Cell, Bil_Fax, Bil_Currency, OTC_Type, OTC_Charges, PaymentTermID, MRC_Charges, CircuitOwnerID, ThirdPartyAccountID, OTC_Party, MRC_Party, InfraCost, EquipmentPropertyID, EquipmentCost, ROI_Month, PortCost, SiteNature, ProjectMRC, ProjectOTC, ProjectInvestment, ProjectPayBack, IsAdvancePayment, AdvanceAmount, ChequeNo, ReceiptNo, CircuitTypeID, BackupInfraID, BackupOwnerID, BackupOTC, BackupMRC, SD_SiteA_Interface, SD_SiteB_Interface, SID_A_Company, SID_A_Address, SID_Country, SID_A_City, SID_A_Cell, SID_A_Phone, SID_A_Fax, SID_A_Email, SID_B_Company, SID_B_Address, SID_B_Country, SID_B_City, SID_B_Cell, SID_B_Phone, SID_B_Fax, SID_B_Email, ParentID, SiteB, GPID, ClientRefID, PartnerID, IsGSAC, SignupDate, SalesPersonID, OrderDate, WorkingDays, RFSDate, Notes, StatusID, TransactionBy, Cus_Mail);
        }
        
        public bool UpdateCustomerSignups(
                    int SignupID, 
                    int LOBID, 
                    int ServiceUnitID, 
                    int InfraID, 
                    int CustomerCode, 
                    int ProjectCode, 
                    int LocationCode, 
                    int CircuitCode, 
                    string CircuitName, 
                    string Address, 
                    string Phone, 
                    string Email, 
                    string Fax, 
                    string Country, 
                    string TD_City, 
                    int CityID, 
                    int AreaID, 
                    int NodeID, 
                    int BusinessTypeID, 
                    string NTN, 
                    string Contact_Name, 
                    string Contact_Department, 
                    string Contact_Designation, 
                    string Contact_Office, 
                    string Contact_Phone, 
                    string Contact_Cell, 
                    string Contact_Fax, 
                    string Contact_Email, 
                    string Contact_SMS, 
                    string CNIC, 
                    System.DateTime CNICExpiryDate, 
                    int PriorityID, 
                    int IsSLA, 
                    string SLA, 
                    int IsBOG, 
                    string BOG, 
                    int IsSignup, 
                    string Signup, 
                    string TD_ConnectivityType, 
                    string TD_BandwidthType, 
                    string TD_CircuitSpeed, 
                    int BandwidthID, 
                    int ULPackageID, 
                    int DLPackageID, 
                    string InfraMedium, 
                    string InfraLength, 
                    int IsAddReq, 
                    int IsVOIP, 
                    int IsVC, 
                    int IsVPN, 
                    int IsExtraIP, 
                    int IsGSAC, 
                    string TD_ContractPeriod, 
                    string Bil_Name, 
                    string Bil_Company, 
                    string Bil_Address, 
                    string Bil_Country, 
                    string Bil_City, 
                    string Bil_PostalCode, 
                    string Bil_Phone, 
                    string Bil_Email, 
                    string Bil_Cell, 
                    string Bil_Fax, 
                    string Bil_Currency, 
                    string OTC_Type, 
                    double OTC_Charges, 
                    int PaymentTermID, 
                    double MRC_Charges, 
                    int CircuitOwnerID, 
                    string ThirdPartyAccountID, 
                    double OTC_Party, 
                    double MRC_Party, 
                    double InfraCost, 
                    int EquipmentPropertyID, 
                    double EquipmentCost, 
                    double ROI_Month, 
                    double PortCost, 
                    string SiteNature, 
                    double ProjectMRC, 
                    double ProjectOTC, 
                    double ProjectInvestment, 
                    double ProjectPayBack, 
                    int IsAdvancePayment, 
                    double AdvanceAmount, 
                    string ChequeNo, 
                    string ReceiptNo, 
                    int CircuitTypeID, 
                    int BackupInfraID, 
                    int BackupOwnerID, 
                    double BackupOTC, 
                    double BackupMRC, 
                    string SD_SiteA_Interface, 
                    string SD_SiteB_Interface, 
                    string SID_A_Company, 
                    string SID_A_Address, 
                    string SID_Country, 
                    string SID_A_City, 
                    string SID_A_Cell, 
                    string SID_A_Phone, 
                    string SID_A_Fax, 
                    string SID_A_Email, 
                    string SID_B_Company, 
                    string SID_B_Address, 
                    string SID_B_Country, 
                    string SID_B_City, 
                    string SID_B_Cell, 
                    string SID_B_Phone, 
                    string SID_B_Fax, 
                    string SID_B_Email, 
                    int ParentID, 
                    int SiteB, 
                    string GPID, 
                    string ContractID, 
                    string ClientRefID, 
                    int PartnerID, 
                    int IsBluechip, 
                    int IsRelocate, 
                    System.DateTime SignupDate, 
                    int SalesPersonID, 
                    System.DateTime OrderDate, 
                    string WorkingDays, 
                    System.DateTime RFSDate, 
                    string Notes, 
                    int StatusID, 
                    int TransactionBy, 
                    string BSSCODE) {
            return base.Channel.UpdateCustomerSignups(SignupID, LOBID, ServiceUnitID, InfraID, CustomerCode, ProjectCode, LocationCode, CircuitCode, CircuitName, Address, Phone, Email, Fax, Country, TD_City, CityID, AreaID, NodeID, BusinessTypeID, NTN, Contact_Name, Contact_Department, Contact_Designation, Contact_Office, Contact_Phone, Contact_Cell, Contact_Fax, Contact_Email, Contact_SMS, CNIC, CNICExpiryDate, PriorityID, IsSLA, SLA, IsBOG, BOG, IsSignup, Signup, TD_ConnectivityType, TD_BandwidthType, TD_CircuitSpeed, BandwidthID, ULPackageID, DLPackageID, InfraMedium, InfraLength, IsAddReq, IsVOIP, IsVC, IsVPN, IsExtraIP, IsGSAC, TD_ContractPeriod, Bil_Name, Bil_Company, Bil_Address, Bil_Country, Bil_City, Bil_PostalCode, Bil_Phone, Bil_Email, Bil_Cell, Bil_Fax, Bil_Currency, OTC_Type, OTC_Charges, PaymentTermID, MRC_Charges, CircuitOwnerID, ThirdPartyAccountID, OTC_Party, MRC_Party, InfraCost, EquipmentPropertyID, EquipmentCost, ROI_Month, PortCost, SiteNature, ProjectMRC, ProjectOTC, ProjectInvestment, ProjectPayBack, IsAdvancePayment, AdvanceAmount, ChequeNo, ReceiptNo, CircuitTypeID, BackupInfraID, BackupOwnerID, BackupOTC, BackupMRC, SD_SiteA_Interface, SD_SiteB_Interface, SID_A_Company, SID_A_Address, SID_Country, SID_A_City, SID_A_Cell, SID_A_Phone, SID_A_Fax, SID_A_Email, SID_B_Company, SID_B_Address, SID_B_Country, SID_B_City, SID_B_Cell, SID_B_Phone, SID_B_Fax, SID_B_Email, ParentID, SiteB, GPID, ContractID, ClientRefID, PartnerID, IsBluechip, IsRelocate, SignupDate, SalesPersonID, OrderDate, WorkingDays, RFSDate, Notes, StatusID, TransactionBy, BSSCODE);
        }
        
        public System.Data.DataTable GetRelocateHistory(int SignupID, int AddID) {
            return base.Channel.GetRelocateHistory(SignupID, AddID);
        }
        
        public string UpdateChildByParentID(long ParentID, string ChildID) {
            return base.Channel.UpdateChildByParentID(ParentID, ChildID);
        }
        
        public string DeAssociateChilds(string ChildID) {
            return base.Channel.DeAssociateChilds(ChildID);
        }
        
        public string GetNewCircuitCode(int CustomerCode, int ProjectCode) {
            return base.Channel.GetNewCircuitCode(CustomerCode, ProjectCode);
        }
        
        public System.Data.DataTable GetCustomerSignupsView(string BSSCode, string Company, int OrderId, string Infra, string Status, string CMSID, string GPID, int CityID, int OwnerID, int CircuitOwnerID, int CustomerCode, int ProjectCode) {
            return base.Channel.GetCustomerSignupsView(BSSCode, Company, OrderId, Infra, Status, CMSID, GPID, CityID, OwnerID, CircuitOwnerID, CustomerCode, ProjectCode);
        }
        
        public System.Data.DataTable GetSearchOrdersByCompanyAndOrderNo(string Company, string OrderNo) {
            return base.Channel.GetSearchOrdersByCompanyAndOrderNo(Company, OrderNo);
        }
        
        public System.Data.DataTable GetViewOrderBySignupID(int SignupID) {
            return base.Channel.GetViewOrderBySignupID(SignupID);
        }
        
        public System.Data.DataTable GetSearchOrdersByCompanyAndServiceNo(string Company, string ServiceNo) {
            return base.Channel.GetSearchOrdersByCompanyAndServiceNo(Company, ServiceNo);
        }
        
        public System.Data.DataTable GetTDMSearchOrderbyOrderNo(string OrderNo) {
            return base.Channel.GetTDMSearchOrderbyOrderNo(OrderNo);
        }
        
        public System.Data.DataTable GetCustomerSignupsbySignupID(int SignupID) {
            return base.Channel.GetCustomerSignupsbySignupID(SignupID);
        }
        
        public System.Data.DataTable GetViewOrderByOrderNo(string OrderNo) {
            return base.Channel.GetViewOrderByOrderNo(OrderNo);
        }
        
        public System.Data.DataTable GetCircuitName(string CircuitName) {
            return base.Channel.GetCircuitName(CircuitName);
        }
        
        public bool OrderNotificationMail(int Lob, int ServiceUnit, int Infra, string stage, string OrderNo) {
            return base.Channel.OrderNotificationMail(Lob, ServiceUnit, Infra, stage, OrderNo);
        }
        
        public bool OrderNotificationMailforTDM(int Lob, int ServiceUnit, int Infra, string stage, string OrderNo) {
            return base.Channel.OrderNotificationMailforTDM(Lob, ServiceUnit, Infra, stage, OrderNo);
        }
        
        public bool Customer_Email(string OrderNo) {
            return base.Channel.Customer_Email(OrderNo);
        }
        
        public bool CustomerMailofTDM(string OrderNo) {
            return base.Channel.CustomerMailofTDM(OrderNo);
        }
        
        public bool InsertArea(string area, int CityID, int IsActive, string TransBy) {
            return base.Channel.InsertArea(area, CityID, IsActive, TransBy);
        }
        
        public bool InsertSalesperson(int InfraID, string SalesPersonName, int IsActive) {
            return base.Channel.InsertSalesperson(InfraID, SalesPersonName, IsActive);
        }
    }
}
